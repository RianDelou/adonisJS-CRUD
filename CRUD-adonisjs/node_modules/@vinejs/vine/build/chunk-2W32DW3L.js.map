{"version":3,"sources":["../src/messages_provider/simple_messages_provider.ts","../src/errors/main.ts","../src/errors/validation_error.ts","../src/reporters/simple_error_reporter.ts","../src/vine/helpers.ts"],"sourcesContent":["/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type {\n  FieldContext,\n  ValidationFields,\n  ValidationMessages,\n  MessagesProviderContact,\n} from '../types.js'\n\n/**\n * Default messages provider performs messages lookup inside\n * a collection of key-value pair.\n */\nexport class SimpleMessagesProvider implements MessagesProviderContact {\n  #messages: ValidationMessages\n  #fields: ValidationFields\n\n  constructor(messages: ValidationMessages, fields?: ValidationFields) {\n    this.#messages = messages\n    this.#fields = fields || {}\n  }\n\n  /**\n   * Interpolates place holders within error messages\n   */\n  #interpolate(message: string, data: any): string {\n    if (!message.includes('{{')) {\n      return message\n    }\n\n    return message.replace(/(\\\\)?{{(.*?)}}/g, (_, __, key) => {\n      const tokens = key.trim().split('.')\n      let output = data\n\n      while (tokens.length) {\n        if (output === null || typeof output !== 'object') {\n          return\n        }\n        const token = tokens.shift()\n        output = Object.hasOwn(output, token) ? output[token] : undefined\n      }\n\n      return output\n    })\n  }\n\n  /**\n   * Returns a validation message for a given field + rule.\n   */\n  getMessage(rawMessage: string, rule: string, field: FieldContext, args?: Record<string, any>) {\n    const fieldName = this.#fields[field.name] || field.name\n\n    /**\n     * 1st priority is given to the field messages\n     */\n    const fieldMessage = this.#messages[`${field.getFieldPath()}.${rule}`]\n    if (fieldMessage) {\n      return this.#interpolate(fieldMessage, {\n        field: fieldName,\n        ...args,\n      })\n    }\n\n    /**\n     * 2nd priority is for the wildcard path messages\n     */\n    const wildcardMessage = this.#messages[`${field.wildCardPath}.${rule}`]\n    if (wildcardMessage) {\n      return this.#interpolate(wildcardMessage, {\n        field: fieldName,\n        ...args,\n      })\n    }\n\n    /**\n     * 3rd priority is for rule messages\n     */\n    const ruleMessage = this.#messages[rule]\n    if (ruleMessage) {\n      return this.#interpolate(ruleMessage, {\n        field: fieldName,\n        ...args,\n      })\n    }\n\n    /**\n     * Fallback to raw message\n     */\n    return this.#interpolate(rawMessage, {\n      field: fieldName,\n      ...args,\n    })\n  }\n\n  toJSON() {\n    return {\n      messages: this.#messages,\n      fields: this.#fields,\n    }\n  }\n}\n","/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { ValidationError } from './validation_error.js'\n\n/**\n * Create an instance of validation error\n */\nexport const E_VALIDATION_ERROR = ValidationError\n","/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Validation error is a superset of Error class with validation\n * error messages\n */\nexport class ValidationError extends Error {\n  /**\n   * Http status code for the validation error\n   */\n  status: number = 422\n\n  /**\n   * Internal code for handling the validation error\n   * exception\n   */\n  code: string = 'E_VALIDATION_ERROR'\n\n  constructor(\n    public messages: any,\n    options?: ErrorOptions\n  ) {\n    super('Validation failure', options)\n    const ErrorConstructor = this.constructor as typeof ValidationError\n    Error.captureStackTrace(this, ErrorConstructor)\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name\n  }\n\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n","/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { E_VALIDATION_ERROR } from '../errors/main.js'\nimport { ValidationError } from '../errors/validation_error.js'\nimport type { ErrorReporterContract, FieldContext } from '../types.js'\n\n/**\n * Shape of the error message collected by the SimpleErrorReporter\n */\ntype SimpleError = {\n  message: string\n  field: string\n  rule: string\n  index?: number\n  meta?: Record<string, any>\n}\n\n/**\n * Simple error reporter collects error messages as an array of object.\n * Each object has following properties.\n *\n * - message: string\n * - field: string\n * - rule: string\n * - index?: number (in case of an array member)\n * - args?: Record<string, any>\n */\nexport class SimpleErrorReporter implements ErrorReporterContract {\n  /**\n   * Boolean to know one or more errors have been reported\n   */\n  hasErrors: boolean = false\n\n  /**\n   * Collection of errors\n   */\n  errors: SimpleError[] = []\n\n  /**\n   * Report an error.\n   */\n  report(\n    message: string,\n    rule: string,\n    field: FieldContext,\n    meta?: Record<string, any> | undefined\n  ) {\n    const error: SimpleError = {\n      message,\n      rule,\n      field: field.getFieldPath(),\n    }\n\n    if (meta) {\n      error.meta = meta\n    }\n    if (field.isArrayMember) {\n      error.index = field.name as number\n    }\n\n    this.hasErrors = true\n    this.errors.push(error)\n  }\n\n  /**\n   * Returns an instance of the validation error\n   */\n  createError(): ValidationError {\n    return new E_VALIDATION_ERROR(this.errors)\n  }\n}\n","/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport delve from 'dlv'\nimport isIP from 'validator/lib/isIP.js'\nimport isJWT from 'validator/lib/isJWT.js'\nimport isURL from 'validator/lib/isURL.js'\nimport isSlug from 'validator/lib/isSlug.js'\nimport isIBAN from 'validator/lib/isIBAN.js'\nimport isUUID from 'validator/lib/isUUID.js'\nimport isAscii from 'validator/lib/isAscii.js'\nimport isEmail from 'validator/lib/isEmail.js'\nimport isAlpha from 'validator/lib/isAlpha.js'\nimport isLatLong from 'validator/lib/isLatLong.js'\nimport isDecimal from 'validator/lib/isDecimal.js'\nimport isHexColor from 'validator/lib/isHexColor.js'\nimport isCreditCard from 'validator/lib/isCreditCard.js'\nimport isAlphanumeric from 'validator/lib/isAlphanumeric.js'\nimport isPassportNumber from 'validator/lib/isPassportNumber.js'\nimport isPostalCode, { type PostalCodeLocale } from 'validator/lib/isPostalCode.js'\nimport isMobilePhone, { type MobilePhoneLocale } from 'validator/lib/isMobilePhone.js'\n// @ts-ignore type missing from @types/validator\nimport { locales as mobilePhoneLocales } from 'validator/lib/isMobilePhone.js'\n// @ts-ignore type missing from @types/validator\nimport { locales as postalCodeLocales } from 'validator/lib/isPostalCode.js'\n\nimport type { FieldContext } from '../types.js'\n\nconst BOOLEAN_POSITIVES = ['1', 1, 'true', true, 'on']\nconst BOOLEAN_NEGATIVES = ['0', 0, 'false', false]\n\n/**\n * Collection of helpers used across the codebase to coerce\n * and type-check values from HTML forms.\n */\nexport const helpers = {\n  /**\n   * Returns true when value is not null and neither\n   * undefined\n   */\n  exists(value: any): boolean {\n    return value !== null && value !== undefined\n  },\n\n  /**\n   * Returns true when value is null or value is undefined\n   */\n  isMissing(value: any): boolean {\n    return !this.exists(value)\n  },\n\n  /**\n   * Returns true when the value is one of the following.\n   *\n   * true\n   * 1\n   * \"1\"\n   * \"true\"\n   * \"on\"\n   */\n  isTrue(value: any): boolean {\n    return BOOLEAN_POSITIVES.includes(value)\n  },\n\n  /**\n   * Returns true when the value is one of the following.\n   *\n   * false\n   * 0\n   * \"0\"\n   * \"false\"\n   */\n  isFalse(value: any) {\n    return BOOLEAN_NEGATIVES.includes(value)\n  },\n\n  /**\n   * Check if the value is a valid string. This method narrows\n   * the type of value to string.\n   */\n  isString(value: unknown): value is string {\n    return typeof value === 'string'\n  },\n\n  /**\n   * Check if the value is a plain JavaScript object. This method\n   * filters out null and Arrays and does not consider them as Objects.\n   */\n  isObject<Value>(value: unknown): value is Record<PropertyKey, Value> {\n    return !!(value && typeof value === 'object' && !Array.isArray(value))\n  },\n\n  /**\n   * Check if an object has all the mentioned keys\n   */\n  hasKeys(value: Record<string, any>, keys: string[]) {\n    for (let key of keys) {\n      if (key in value === false) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Check if the value is an Array.\n   */\n  isArray<Value>(value: unknown): value is Value[] {\n    return Array.isArray(value)\n  },\n\n  /**\n   * Check if the value is a number or a string representation of a number.\n   */\n  isNumeric(value: any): boolean {\n    return !Number.isNaN(Number(value))\n  },\n\n  /**\n   * Casts the value to a number using the Number method.\n   * Returns NaN when unable to cast.\n   */\n  asNumber(value: any): number {\n    return value === null ? Number.NaN : Number(value)\n  },\n\n  /**\n   * Casts the value to a boolean.\n   *\n   * - [true, 1, \"1\", \"true\", \"on\"] will be converted to true.\n   * - [false, 0, \"0\", \"false\"] will be converted to false.\n   * - Everything else will return null. So make sure to handle that case.\n   */\n  asBoolean(value: any): boolean | null {\n    if (this.isTrue(value)) {\n      return true\n    }\n\n    if (this.isFalse(value)) {\n      return false\n    }\n\n    return null\n  },\n\n  isEmail: isEmail.default,\n  isURL: isURL.default,\n  isAlpha: isAlpha.default,\n  isAlphaNumeric: isAlphanumeric.default,\n  isIP: isIP.default,\n  isUUID: isUUID.default,\n  isAscii: isAscii.default,\n  isCreditCard: isCreditCard.default,\n  isIBAN: isIBAN.default,\n  isJWT: isJWT.default,\n  isLatLong: isLatLong.default,\n  isMobilePhone: isMobilePhone.default,\n  isPassportNumber: isPassportNumber.default,\n  isPostalCode: isPostalCode.default,\n  isSlug: isSlug.default,\n  isDecimal: isDecimal.default,\n  mobileLocales: mobilePhoneLocales as MobilePhoneLocale[],\n  postalCountryCodes: postalCodeLocales as PostalCodeLocale[],\n  passportCountryCodes: [\n    'AM',\n    'AR',\n    'AT',\n    'AU',\n    'AZ',\n    'BE',\n    'BG',\n    'BR',\n    'BY',\n    'CA',\n    'CH',\n    'CY',\n    'CZ',\n    'DE',\n    'DK',\n    'DZ',\n    'ES',\n    'FI',\n    'FR',\n    'GB',\n    'GR',\n    'HR',\n    'HU',\n    'IE',\n    'IN',\n    'ID',\n    'IR',\n    'IS',\n    'IT',\n    'JM',\n    'JP',\n    'KR',\n    'KZ',\n    'LI',\n    'LT',\n    'LU',\n    'LV',\n    'LY',\n    'MT',\n    'MZ',\n    'MY',\n    'MX',\n    'NL',\n    'NZ',\n    'PH',\n    'PK',\n    'PL',\n    'PT',\n    'RO',\n    'RU',\n    'SE',\n    'SL',\n    'SK',\n    'TH',\n    'TR',\n    'UA',\n    'US',\n  ] as const,\n\n  /**\n   * Check if the value is a valid color hexcode\n   */\n  isHexColor: (value: string) => {\n    if (!value.startsWith('#')) {\n      return false\n    }\n    return isHexColor.default(value)\n  },\n\n  /**\n   * Check if a URL has valid `A` or `AAAA` DNS records\n   */\n  isActiveURL: async (url: string): Promise<boolean> => {\n    const { resolve4, resolve6 } = await import('node:dns/promises')\n\n    try {\n      const { hostname } = new URL(url)\n      const v6Addresses = await resolve6(hostname)\n      if (v6Addresses.length) {\n        return true\n        /* c8 ignore next 4 */\n      } else {\n        const v4Addresses = await resolve4(hostname)\n        return v4Addresses.length > 0\n      }\n    } catch {\n      return false\n    }\n  },\n\n  /**\n   * Check if all the elements inside the dataset are unique.\n   *\n   * In case of an array of objects, you must provide one or more keys\n   * for the fields that must be unique across the objects.\n   *\n   * ```ts\n   * helpers.isDistinct([1, 2, 4, 5]) // true\n   *\n   * // Null and undefined values are ignored\n   * helpers.isDistinct([1, null, 2, null, 4, 5]) // true\n   *\n   * helpers.isDistinct([\n   *   {\n   *     email: 'foo@bar.com',\n   *     name: 'foo'\n   *   },\n   *   {\n   *     email: 'baz@bar.com',\n   *     name: 'baz'\n   *   }\n   * ], 'email') // true\n   *\n   * helpers.isDistinct([\n   *   {\n   *     email: 'foo@bar.com',\n   *     tenant_id: 1,\n   *     name: 'foo'\n   *   },\n   *   {\n   *     email: 'foo@bar.com',\n   *     tenant_id: 2,\n   *     name: 'baz'\n   *   }\n   * ], ['email', 'tenant_id']) // true\n   * ```\n   */\n  isDistinct: (dataSet: any[], fields?: string | string[]): boolean => {\n    const uniqueItems: Set<any> = new Set()\n\n    /**\n     * Check for duplicates when no fields are provided\n     */\n    if (!fields) {\n      for (let item of dataSet) {\n        if (helpers.exists(item)) {\n          if (uniqueItems.has(item)) {\n            return false\n          } else {\n            uniqueItems.add(item)\n          }\n        }\n      }\n      return true\n    }\n\n    /**\n     * Checking for duplicates when one or more fields are mentioned\n     */\n    const fieldsList = Array.isArray(fields) ? fields : [fields]\n    for (let item of dataSet) {\n      /**\n       * Only process item, if it is an object and has all the fields\n       * required for uniqueness check\n       */\n      if (helpers.isObject(item) && helpers.hasKeys(item, fieldsList)) {\n        const element = fieldsList.map((field) => item[field]).join('_')\n        if (uniqueItems.has(element)) {\n          return false\n        } else {\n          uniqueItems.add(element)\n        }\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Returns the nested value from the field root\n   * object or the sibling value from the field\n   * parent object\n   */\n  getNestedValue(key: string, field: FieldContext) {\n    if (key.indexOf('.') > -1) {\n      return delve(field.data, key)\n    }\n    return field.parent[key]\n  },\n}\n"],"mappings":"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","names":[]}