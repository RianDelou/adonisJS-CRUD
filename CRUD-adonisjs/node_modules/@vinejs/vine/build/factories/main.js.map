{"version":3,"sources":["../../factories/field.ts","../../factories/validator.ts","../../factories/main.ts"],"sourcesContent":["/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { ErrorReporterContract } from '@vinejs/compiler/types'\n\nimport { helpers } from '../src/vine/helpers.js'\nimport type { FieldContext, MessagesProviderContact } from '../src/types.js'\nimport { SimpleErrorReporter } from '../src/reporters/simple_error_reporter.js'\nimport { SimpleMessagesProvider } from '../src/messages_provider/simple_messages_provider.js'\n\n/**\n * Exposes API to create a dummy field context\n */\nexport class FieldFactory {\n  create(\n    fieldName: string,\n    value: any,\n    messagesProvider?: MessagesProviderContact,\n    errorReporter?: ErrorReporterContract\n  ) {\n    const reporter = errorReporter || new SimpleErrorReporter()\n    const provider = messagesProvider || new SimpleMessagesProvider({}, {})\n\n    return {\n      value: value,\n      isArrayMember: false,\n      parent: { [fieldName]: value } as any,\n      data: { [fieldName]: value },\n      name: fieldName as any,\n      wildCardPath: fieldName,\n      getFieldPath() {\n        return fieldName\n      },\n      isDefined: helpers.exists(value),\n      isValid: true,\n      meta: {},\n      mutate(newValue) {\n        this.value = newValue\n        this.isDefined = helpers.exists(newValue)\n        return this\n      },\n      report(message, rule, context, args) {\n        this.isValid = false\n        reporter.report(provider.getMessage(message, rule, context, args), rule, context, args)\n      },\n    } satisfies FieldContext\n  }\n}\n","/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { AssertionError, deepEqual } from 'node:assert'\n\nimport { FieldFactory } from './field.js'\nimport type { FieldContext, Validation } from '../src/types.js'\nimport { SimpleErrorReporter } from '../src/reporters/simple_error_reporter.js'\n\n/**\n * Exposes APIs for writing validation assertions\n */\nclass ValidationResult {\n  #outputValue: any\n  #reporter: SimpleErrorReporter\n\n  constructor(outputValue: any, reporter: SimpleErrorReporter) {\n    this.#outputValue = outputValue\n    this.#reporter = reporter\n  }\n\n  /**\n   * Creates an assertion error instance\n   */\n  #assertionError(\n    options: ConstructorParameters<typeof AssertionError>[0] & { showDiff?: boolean }\n  ) {\n    const assertion = new AssertionError(options)\n    Object.defineProperty(assertion, 'showDiff', { value: true })\n    return assertion\n  }\n\n  /**\n   * Returns the validation result output\n   */\n  getOutput() {\n    return this.#outputValue\n  }\n\n  /**\n   * Returns an array of errors reported to the\n   * error reporter\n   */\n  getErrors() {\n    return this.#reporter.errors\n  }\n\n  /**\n   * Assert one or more validation errors have occurred\n   */\n  assertSucceeded() {\n    if (this.#reporter.hasErrors) {\n      const errorsCount = this.#reporter.errors.length\n      throw this.#assertionError({\n        message: `Expected validation to pass. Instead failed with \"${errorsCount} error(s)\"`,\n        operator: 'strictEqual',\n        stackStartFn: this.assertSucceeded,\n      })\n    }\n  }\n\n  /**\n   * Assert the output value of validation. The output value is\n   * same as the input value, unless \"mutate\" method is called\n   */\n  assertOutput(expectedOutput: any) {\n    deepEqual(this.#outputValue, expectedOutput)\n  }\n\n  /**\n   * Assert one or more validation errors have occurred\n   */\n  assertFailed() {\n    if (!this.#reporter.hasErrors) {\n      throw this.#assertionError({\n        message: `Expected validation to report one or more errors`,\n        operator: 'strictEqual',\n        stackStartFn: this.assertFailed,\n      })\n    }\n  }\n\n  /**\n   * Assert the number of errors have occurred\n   */\n  assertErrorsCount(count: number) {\n    const errorsCount = this.#reporter.errors.length\n\n    if (errorsCount !== count) {\n      throw this.#assertionError({\n        message: `Expected validation to report \"${count}\" errors. Received \"${errorsCount}\"`,\n        expected: count,\n        actual: errorsCount,\n        operator: 'strictEqual',\n        stackStartFn: this.assertErrorsCount,\n        showDiff: true,\n      })\n    }\n  }\n\n  /**\n   * Assert error messages to include a given error message\n   */\n  assertError(message: string) {\n    const messages = this.#reporter.errors.map((e) => e.message)\n\n    if (!messages.includes(message)) {\n      throw this.#assertionError({\n        message: `Expected validation errors to include \"${message}\" message`,\n        expected: [message],\n        actual: messages,\n        operator: 'includes',\n        stackStartFn: this.assertError,\n        showDiff: true,\n      })\n    }\n  }\n}\n\n/**\n * Validator factory exposes the API to execute validations\n * during tests\n */\nexport class ValidatorFactory {\n  #field?: Partial<FieldContext>\n  #bail?: boolean\n\n  constructor(field?: Partial<FieldContext>, bail?: boolean) {\n    this.#field = field\n    this.#bail = bail\n  }\n\n  /**\n   * Creates an instance of the error reporter required\n   * to report errors.\n   */\n  #getReporter() {\n    return new SimpleErrorReporter()\n  }\n\n  /**\n   * Define field context for the validation\n   */\n  withContext(field: Partial<FieldContext>) {\n    return new ValidatorFactory(field, this.#bail)\n  }\n\n  /**\n   * Toggle bail mode for the validation\n   */\n  bail(state: boolean) {\n    return new ValidatorFactory(this.#field, state)\n  }\n\n  /**\n   * Executes a validation against the provided value\n   */\n  execute(validation: Validation<any> | Validation<any>[], value: any) {\n    const errorReporter = this.#getReporter()\n    const bail = this.#bail === false ? false : true\n    const field: FieldContext = {\n      ...new FieldFactory().create('dummy', value, undefined, errorReporter),\n      ...this.#field,\n    }\n\n    const validations = Array.isArray(validation) ? validation : [validation]\n    for (let one of validations) {\n      if (one.rule.isAsync) {\n        throw new Error(\n          `Cannot execute async rule \"${one.rule.validator.name}\". Use \"validator.executeAsync\" instead`\n        )\n      }\n\n      if ((field.isDefined || one.rule.implicit) && (field.isValid || !bail)) {\n        one.rule.validator(field.value, one.options, field)\n      }\n    }\n\n    return new ValidationResult(field.value, errorReporter)\n  }\n\n  /**\n   * Executes an async validation against the provided\n   * value\n   */\n  async executeAsync(validation: Validation<any> | Validation<any>[], value: any) {\n    const errorReporter = this.#getReporter()\n    const bail = this.#bail === false ? false : true\n    const field: FieldContext = {\n      ...new FieldFactory().create('dummy', value, undefined, errorReporter),\n      ...this.#field,\n    }\n\n    const validations = Array.isArray(validation) ? validation : [validation]\n    for (let one of validations) {\n      if ((field.isDefined || one.rule.implicit) && (field.isValid || !bail)) {\n        await one.rule.validator(field.value, one.options, field)\n      }\n    }\n\n    return new ValidationResult(field.value, errorReporter)\n  }\n}\n","/*\n * @vinejs/vine\n *\n * (c) VineJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { FieldFactory } from './field.js'\nimport { ValidatorFactory } from './validator.js'\n\n/**\n * Validator factory is used for unit testing validation\n * rules.\n */\nexport const validator = new ValidatorFactory()\nexport const fieldContext = new FieldFactory()\n"],"mappings":"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","names":[]}