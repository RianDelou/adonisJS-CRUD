{"version":3,"sources":["../index.ts","../src/icons.ts","../src/table.ts","../src/colors.ts","../src/renderers/console.ts","../src/logger/action.ts","../src/logger/spinner.ts","../src/logger/main.ts","../src/instructions.ts","../src/tasks/task.ts","../src/tasks/renderers/verbose.ts","../src/tasks/renderers/minimal.ts","../src/tasks/renderers/raw.ts","../src/tasks/manager.ts","../src/renderers/memory.ts"],"sourcesContent":["/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport supportsColor from 'supports-color'\nimport { Colors } from '@poppinss/colors/types'\nimport { default as poppinssColors } from '@poppinss/colors'\n\nimport { icons } from './src/icons.js'\nimport { Table } from './src/table.js'\nimport { useColors } from './src/colors.js'\nimport { Logger } from './src/logger/main.js'\nimport { Instructions } from './src/instructions.js'\nimport { TaskManager } from './src/tasks/manager.js'\nimport { MemoryRenderer } from './src/renderers/memory.js'\nimport { ConsoleRenderer } from './src/renderers/console.js'\nimport type { RendererContract, TableOptions, TaskManagerOptions } from './src/types.js'\n\nexport {\n  icons,\n  Table,\n  Logger,\n  TaskManager,\n  Instructions,\n  MemoryRenderer,\n  ConsoleRenderer,\n  poppinssColors as colors,\n}\n\n/**\n * Create a new CLI UI instance.\n *\n * - The \"raw\" mode is tailored for testing\n * - The \"silent\" mode should be used when the terminal does not support colors. We\n *   automatically perform the detection\n */\nexport function cliui(options: Partial<{ mode: 'raw' | 'silent' | 'normal' }> = {}) {\n  let mode = options.mode\n\n  /**\n   * Use silent mode when not explicit mode is defined\n   */\n  if (!mode && !supportsColor.stdout) {\n    mode = 'silent'\n  }\n\n  /**\n   * Renderer to use\n   */\n  let renderer: RendererContract = mode === 'raw' ? new MemoryRenderer() : new ConsoleRenderer()\n\n  /**\n   * Colors instance in use\n   */\n  let colors = useColors({ silent: mode === 'silent', raw: mode === 'raw' })\n\n  /**\n   * Logger\n   */\n  const logger = new Logger()\n  logger.useRenderer(renderer)\n  logger.useColors(colors)\n\n  /**\n   * Render instructions inside a box\n   */\n  const instructions = () => {\n    const instructionsInstance = new Instructions({ icons: true, raw: mode === 'raw' })\n    instructionsInstance.useRenderer(renderer)\n    instructionsInstance.useColors(colors)\n    return instructionsInstance\n  }\n\n  /**\n   * Similar to instructions. But without the `pointer` icon\n   */\n  const sticker = () => {\n    const instructionsInstance = new Instructions({ icons: false, raw: mode === 'raw' })\n    instructionsInstance.useRenderer(renderer)\n    instructionsInstance.useColors(colors)\n    return instructionsInstance\n  }\n\n  /**\n   * Initiates a group of tasks\n   */\n  const tasks = (tasksOptions?: Partial<TaskManagerOptions>) => {\n    const manager = new TaskManager({ raw: mode === 'raw', ...tasksOptions })\n    manager.useRenderer(renderer)\n    manager.useColors(colors)\n    return manager\n  }\n\n  /**\n   * Instantiate a new table\n   */\n  const table = (tableOptions?: Partial<TableOptions>) => {\n    const tableInstance = new Table({ raw: mode === 'raw', ...tableOptions })\n    tableInstance.useRenderer(renderer)\n    tableInstance.useColors(colors)\n    return tableInstance\n  }\n\n  return {\n    colors,\n    logger,\n    table,\n    tasks,\n    icons,\n    sticker,\n    instructions,\n    switchMode(modeToUse: 'raw' | 'silent' | 'normal') {\n      mode = modeToUse\n\n      /**\n       * Use memory renderer in raw mode, otherwise switch to\n       * console renderer\n       */\n      if (mode === 'raw') {\n        this.useRenderer(new MemoryRenderer())\n      } else {\n        this.useRenderer(new ConsoleRenderer())\n      }\n\n      this.useColors(useColors({ silent: mode === 'silent', raw: mode === 'raw' }))\n    },\n    useRenderer(rendererToUse: RendererContract) {\n      renderer = rendererToUse\n      logger.useRenderer(renderer)\n    },\n    useColors(colorsToUse: Colors) {\n      colors = colorsToUse\n      logger.useColors(colors)\n      this.colors = colors\n    },\n  }\n}\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst { platform } = process\n\n/**\n * A collection of platform specific icons\n */\nexport const icons =\n  platform === 'win32' && !process.env.WT_SESSION\n    ? {\n        tick: '√',\n        cross: '×',\n        bullet: '*',\n        nodejs: '♦',\n        pointer: '>',\n        info: 'i',\n        warning: '‼',\n        squareSmallFilled: '[█]',\n      }\n    : {\n        tick: '✔',\n        cross: '✖',\n        bullet: '●',\n        nodejs: '⬢',\n        pointer: '❯',\n        info: 'ℹ',\n        warning: '⚠',\n        squareSmallFilled: '◼',\n      }\n","/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport CliTable from 'cli-table3'\nimport stringWidth from 'string-width'\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { useColors } from './colors.js'\nimport { TERMINAL_SIZE } from './helpers.js'\nimport { ConsoleRenderer } from './renderers/console.js'\nimport type { RendererContract, TableHead, TableOptions, TableRow } from './types.js'\n\n/**\n * Exposes the API to represent a table\n */\nexport class Table {\n  #state: {\n    colWidths?: number[]\n    head: TableHead\n    rows: TableRow[]\n  } = {\n    head: [],\n    rows: [],\n  }\n\n  /**\n   * Size of the largest row for a given\n   * column\n   */\n  #columnSizes: number[] = []\n\n  /**\n   * The renderer to use to output logs\n   */\n  #renderer?: RendererContract\n\n  /**\n   * Logger configuration options\n   */\n  #options: TableOptions\n\n  /**\n   * The colors reference\n   */\n  #colors?: Colors\n\n  /**\n   * Whether or not to render full width\n   */\n  #renderFullWidth: boolean = false\n\n  /**\n   * The column index that should take remaining\n   * width.\n   */\n  #fluidColumnIndex: number = 0\n\n  /**\n   * Padding for columns\n   */\n  #padding: number = 2\n\n  constructor(options: Partial<TableOptions> = {}) {\n    this.#options = {\n      raw: options.raw === undefined ? false : options.raw,\n      chars: options.chars,\n    }\n  }\n\n  /**\n   * Tracking the column size and keeping on the largest\n   * one by tracking the content size\n   */\n  #storeColumnSize(columns: string[]) {\n    columns.forEach((column, index) => {\n      const size = stringWidth(column)\n      const existingSize = this.#columnSizes[index]\n      if (!existingSize || existingSize < size) {\n        this.#columnSizes[index] = size\n      }\n    })\n  }\n\n  /**\n   * Computes the col widths based when in fullwidth mode\n   */\n  #computeColumnsWidth() {\n    /**\n     * Do not compute columns size, when rendering in full-width\n     */\n    if (!this.#renderFullWidth) {\n      return\n    }\n\n    /**\n     * The terminal columns\n     */\n    let columns = TERMINAL_SIZE - (this.#columnSizes.length + 1)\n\n    this.#state.colWidths = this.#state.colWidths || []\n    this.#columnSizes.forEach((column, index) => {\n      /**\n       * The column width will be the size of the biggest\n       * text + padding left + padding right\n       */\n      this.#state.colWidths![index] = this.#state.colWidths![index] || column + this.#padding * 2\n\n      /**\n       * Compute remaining columns\n       */\n      columns = columns - this.#state.colWidths![index]\n    })\n\n    /**\n     * If there are remaining columns, then assign them\n     * to the fluid column.\n     */\n    if (columns) {\n      const index =\n        this.#fluidColumnIndex > this.#columnSizes.length - 1 ? 0 : this.#fluidColumnIndex\n      this.#state.colWidths![index] = this.#state.colWidths![index] + columns\n    }\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer() {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define a custom renderer. Logs to \"stdout\" and \"stderr\"\n   * by default\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Returns the colors implementation in use\n   */\n  getColors(): Colors {\n    if (!this.#colors) {\n      this.#colors = useColors()\n    }\n\n    return this.#colors\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#colors = color\n    return this\n  }\n\n  /**\n   * Define table head\n   */\n  head(headColumns: TableHead): this {\n    this.#state.head = headColumns\n    this.#storeColumnSize(\n      headColumns.map((column) => (typeof column === 'string' ? column : column.content))\n    )\n    return this\n  }\n\n  /**\n   * Add a new table row\n   */\n  row(row: TableRow): this {\n    this.#state.rows.push(row)\n\n    if (Array.isArray(row)) {\n      this.#storeColumnSize(row.map((cell) => (typeof cell === 'string' ? cell : cell.content)))\n    }\n\n    return this\n  }\n\n  /**\n   * Define custom column widths\n   */\n  columnWidths(widths: number[]): this {\n    this.#state.colWidths = widths\n    return this\n  }\n\n  /**\n   * Toggle whether or render in full width or not\n   */\n  fullWidth(renderFullWidth: boolean = true): this {\n    this.#renderFullWidth = renderFullWidth\n    return this\n  }\n\n  /**\n   * Define the column index that should take\n   * will remaining width when rendering in\n   * full-width\n   */\n  fluidColumnIndex(index: number): this {\n    this.#fluidColumnIndex = index\n    return this\n  }\n\n  /**\n   * Render table\n   */\n  render() {\n    if (this.#options.raw) {\n      this.getRenderer().log(\n        this.#state.head.map((col) => (typeof col === 'string' ? col : col.content)).join('|')\n      )\n\n      this.#state.rows.forEach((row) => {\n        const content = Array.isArray(row)\n          ? row.map((cell) => (typeof cell === 'string' ? cell : cell.content))\n          : Object.keys(row)\n\n        this.getRenderer().log(content.join('|'))\n      })\n\n      return\n    }\n\n    this.#computeColumnsWidth()\n\n    /**\n     * Types of \"cli-table3\" are out of the sync from the\n     * implementation\n     */\n    const cliTable = new CliTable({\n      head: this.#state.head,\n      style: { 'head': [], 'border': ['dim'], 'padding-left': 2, 'padding-right': 2 },\n      wordWrap: true,\n      ...(this.#state.colWidths ? { colWidths: this.#state.colWidths } : {}),\n      chars: this.#options.chars,\n    } as any)\n\n    this.#state.rows.forEach((row) => cliTable.push(row))\n    this.getRenderer().log(cliTable.toString())\n  }\n}\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport colors from '@poppinss/colors'\nimport type { Colors } from '@poppinss/colors/types'\n\n/**\n * Returns the colors instance based upon the environment.\n *\n * - The \"raw\" option returns the colors instance that prefix the color\n *   transformations as raw text\n * - The \"silent\" option returns the colors instance that performs no\n *   color transformations\n */\nexport function useColors(options: { raw?: boolean; silent?: boolean } = {}): Colors {\n  if (options.raw) {\n    return colors.raw()\n  }\n\n  if (options.silent) {\n    return colors.silent()\n  }\n\n  return colors.ansi()\n}\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport logUpdate from 'log-update'\nimport type { RendererContract } from '../types.js'\n\n/**\n * Renders messages to the \"stdout\" and \"stderr\"\n */\nexport class ConsoleRenderer implements RendererContract {\n  getLogs() {\n    return []\n  }\n\n  flushLogs(): void {}\n\n  log(message: string) {\n    console.log(message)\n  }\n\n  /**\n   * Log message by overwriting the existing one\n   */\n  logUpdate(message: string) {\n    logUpdate(message)\n  }\n\n  /**\n   * Persist the last logged message\n   */\n  logUpdatePersist() {\n    logUpdate.done()\n  }\n\n  /**\n   * Log error\n   */\n  logError(message: string) {\n    console.error(message)\n  }\n}\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport prettyHrtime from 'pretty-hrtime'\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { useColors } from '../colors.js'\nimport { ConsoleRenderer } from '../renderers/console.js'\nimport type { ActionOptions, RendererContract } from '../types.js'\n\n/**\n * Exposes the API to print actions in one of the following three states\n *\n * - failed\n * - succeeded\n * - skipped\n */\nexport class Action {\n  #startTime?: [number, number]\n\n  /**\n   * Action options\n   */\n  #options: ActionOptions\n\n  /**\n   * Action message\n   */\n  #message: string\n\n  /**\n   * Reference to the colors implementation\n   */\n  #colors?: Colors\n\n  /**\n   * The renderer to use for writing to the console\n   */\n  #renderer?: RendererContract\n\n  /**\n   * Whether or not to display duration of the action\n   */\n  #displayDuration: boolean = false\n\n  constructor(message: string, options: Partial<ActionOptions> = {}) {\n    this.#message = message\n    this.#startTime = process.hrtime()\n    this.#options = {\n      dim: options.dim === undefined ? false : options.dim,\n    }\n  }\n\n  /**\n   * Format label\n   */\n  #formatLabel(label: string, color: keyof Colors) {\n    label = this.getColors()[color](`${label.toUpperCase()}:`) as string\n\n    if (this.#options.dim) {\n      return this.getColors().dim(label)\n    }\n\n    return label\n  }\n\n  /**\n   * Format message\n   */\n  #formatMessage(message: string) {\n    if (this.#options.dim) {\n      return this.getColors().dim(message)\n    }\n\n    return message\n  }\n\n  /**\n   * Format the suffix\n   */\n  #formatSuffix(message: string) {\n    message = `(${message})`\n    return this.getColors().dim(message)\n  }\n\n  /**\n   * Format error\n   */\n  #formatError(error: string | Error) {\n    let message = typeof error === 'string' ? error : error.stack || error.message\n\n    return `\\n    ${message\n      .split('\\n')\n      .map((line) => {\n        if (this.#options.dim) {\n          line = this.getColors().dim(line)\n        }\n\n        return `     ${this.getColors().red(line)}`\n      })\n      .join('\\n')}`\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer(): RendererContract {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define a custom renderer.\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Returns the colors implementation in use\n   */\n  getColors(): Colors {\n    if (!this.#colors) {\n      this.#colors = useColors()\n    }\n\n    return this.#colors\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#colors = color\n    return this\n  }\n\n  /**\n   * Toggle whether to display duration for completed\n   * tasks or not.\n   */\n  displayDuration(displayDuration: boolean = true) {\n    this.#displayDuration = displayDuration\n    return this\n  }\n\n  /**\n   * Prepares the message to mark action as successful\n   */\n  prepareSucceeded() {\n    const formattedLabel = this.#formatLabel('done', 'green')\n    const formattedMessage = this.#formatMessage(this.#message)\n\n    let logMessage = `${formattedLabel}    ${formattedMessage}`\n    if (this.#displayDuration) {\n      logMessage = `${logMessage} ${this.#formatSuffix(\n        prettyHrtime(process.hrtime(this.#startTime))\n      )}`\n    }\n\n    return logMessage\n  }\n\n  /**\n   * Mark action as successful\n   */\n  succeeded() {\n    this.getRenderer().log(this.prepareSucceeded())\n  }\n\n  /**\n   * Prepares the message to mark action as skipped\n   */\n  prepareSkipped(skipReason?: string) {\n    const formattedLabel = this.#formatLabel('skipped', 'cyan')\n    const formattedMessage = this.#formatMessage(this.#message)\n\n    let logMessage = `${formattedLabel} ${formattedMessage}`\n    if (skipReason) {\n      logMessage = `${logMessage} ${this.#formatSuffix(skipReason)}`\n    }\n\n    return logMessage\n  }\n\n  /**\n   * Mark action as skipped. An optional skip reason can be\n   * supplied\n   */\n  skipped(skipReason?: string) {\n    this.getRenderer().log(this.prepareSkipped(skipReason))\n  }\n\n  /**\n   * Prepares the message to mark action as failed\n   */\n  prepareFailed(error: string | Error) {\n    const formattedLabel = this.#formatLabel('failed', 'red')\n    const formattedMessage = this.#formatMessage(this.#message)\n    const formattedError = this.#formatError(error)\n\n    const logMessage = `${formattedLabel}  ${formattedMessage} ${formattedError}`\n    return logMessage\n  }\n\n  /**\n   * Mark action as failed. An error message is required\n   */\n  failed(error: string | Error) {\n    this.getRenderer().logError(this.prepareFailed(error))\n  }\n}\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { ConsoleRenderer } from '../renderers/console.js'\nimport type { LoggerMessageOptions, RendererContract, SpinnerMessage } from '../types.js'\n\n/**\n * Textual spinner to print a message with dotted progress\n * bar.\n */\nexport class Spinner {\n  #animator = {\n    frames: ['.  ', '.. ', '...', ' ..', '  .', '   '],\n    interval: 200,\n    index: 0,\n    getFrame() {\n      return this.frames[this.index]\n    },\n    advance() {\n      this.index = this.index + 1 === this.frames.length ? 0 : this.index + 1\n      return this.index\n    },\n  }\n\n  /**\n   * The state of the spinner\n   */\n  #state: 'idle' | 'running' | 'stopped' = 'idle'\n\n  /**\n   * Spinner message\n   */\n  #message: SpinnerMessage\n\n  /**\n   * The renderer to use for writing to the console\n   */\n  #renderer?: RendererContract\n\n  /**\n   * Custom method to handle animation result\n   */\n  #spinnerWriter?: (line: string) => void\n\n  constructor(message: SpinnerMessage) {\n    this.#message = message\n  }\n\n  /**\n   * Loop over the message and animate the spinner\n   */\n  #animate() {\n    if (this.#state !== 'running') {\n      return\n    }\n\n    /**\n     * Do not write when in silent mode\n     */\n    if (this.#message.silent) {\n      return\n    }\n\n    const frame = this.#animator.getFrame()\n\n    if (this.#spinnerWriter) {\n      this.#spinnerWriter(`${this.#message.render()} ${frame}`)\n    } else {\n      this.getRenderer().logUpdate(`${this.#message.render()} ${frame}`)\n    }\n\n    setTimeout(() => {\n      this.#animator.advance()\n      this.#animate()\n    }, this.#animator.interval)\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer(): RendererContract {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define the custom renderer\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Star the spinner\n   */\n  start(): this {\n    this.#state = 'running'\n    this.#animate()\n    return this\n  }\n\n  /**\n   * Update spinner\n   */\n  update(text: string, options?: LoggerMessageOptions): this {\n    if (this.#state !== 'running') {\n      return this\n    }\n\n    Object.assign(this.#message, { text, ...options })\n    return this\n  }\n\n  /**\n   * Stop spinner\n   */\n  stop() {\n    this.#state = 'stopped'\n    this.#animator.index = 0\n\n    if (!this.#spinnerWriter && !this.#message.silent) {\n      this.getRenderer().logUpdate(`${this.#message.render()} ${this.#animator.frames[2]}`)\n      this.getRenderer().logUpdatePersist()\n    }\n  }\n\n  /**\n   * Tap into spinner to manually write the\n   * output.\n   */\n  tap(callback: (line: string) => void): this {\n    this.#spinnerWriter = callback\n    return this\n  }\n}\n","/*\n * @poppinss/clui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { Action } from './action.js'\nimport { Spinner } from './spinner.js'\nimport { useColors } from '../colors.js'\nimport { ConsoleRenderer } from '../renderers/console.js'\n\nimport type {\n  LoggingTypes,\n  LoggerOptions,\n  RendererContract,\n  LoggerMessageOptions,\n} from '../types.js'\n\n/**\n * CLI logger to log messages to the console. The output is consistently\n * formatted.\n */\nexport class Logger implements RendererContract {\n  /**\n   * Logger configuration options\n   */\n  #options: LoggerOptions\n\n  /**\n   * Reference to the colors implementation\n   */\n  #colors?: Colors\n\n  /**\n   * The renderer to use to output logs\n   */\n  #renderer?: RendererContract\n\n  getLogs(): { message: string; stream: 'stdout' | 'stderr' }[] {\n    return this.getRenderer().getLogs()\n  }\n\n  flushLogs(): void {\n    this.getRenderer().flushLogs()\n  }\n\n  constructor(options: Partial<LoggerOptions> = {}) {\n    const dimOutput = options.dim === undefined ? false : options.dim\n\n    this.#options = {\n      dim: dimOutput,\n      dimLabels: options.dimLabels === undefined ? dimOutput : options.dimLabels,\n    }\n  }\n\n  /**\n   * Color the logger label\n   */\n  #colorizeLabel(color: keyof Colors, text: string): string {\n    text = this.getColors()[color](text) as string\n\n    if (this.#options.dimLabels) {\n      return `[ ${this.getColors().dim(text)} ]`\n    }\n\n    return `[ ${text} ]`\n  }\n\n  /**\n   * Returns the label for a given logging type\n   */\n  #getLabel(type: LoggingTypes): string {\n    switch (type) {\n      case 'success':\n        return this.#colorizeLabel('green', type)\n      case 'error':\n      case 'fatal':\n        return this.#colorizeLabel('red', type)\n      case 'warning':\n        return this.#colorizeLabel('yellow', 'warn')\n      case 'info':\n        return this.#colorizeLabel('blue', type)\n      case 'debug':\n        return this.#colorizeLabel('cyan', type)\n      case 'await':\n        return this.#colorizeLabel('cyan', 'wait')\n    }\n  }\n\n  /**\n   * Appends the suffix to the message\n   */\n  #addSuffix(message: string, suffix?: string): string {\n    if (!suffix) {\n      return message\n    }\n\n    return `${message} ${this.getColors().dim().yellow(`(${suffix})`)}`\n  }\n\n  /**\n   * Prepends the prefix to the message. We do not DIM the prefix, since\n   * gray doesn't have much brightness already\n   */\n  #addPrefix(message: string, prefix?: string): string {\n    if (!prefix) {\n      return message\n    }\n\n    prefix = prefix.replace(/%time%/, new Date().toISOString())\n    return `${this.getColors().dim(`[${prefix}]`)} ${message}`\n  }\n\n  /**\n   * Prepends the prefix to the message\n   */\n  #prefixLabel(message: string, label: string) {\n    return `${label} ${message}`\n  }\n\n  /**\n   * Decorate message string\n   */\n  #decorateMessage(message: string): string {\n    if (this.#options.dim) {\n      return this.getColors().dim(message)\n    }\n\n    return message\n  }\n\n  /**\n   * Decorate error stack\n   */\n  #formatStack(stack?: string): string {\n    if (!stack) {\n      return ''\n    }\n\n    return `\\n${stack\n      .split('\\n')\n      .splice(1)\n      .map((line) => {\n        if (this.#options.dim) {\n          line = this.getColors().dim(line)\n        }\n\n        return `      ${this.getColors().red(line)}`\n      })\n      .join('\\n')}`\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer(): RendererContract {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define a custom renderer to output logos\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Returns the colors implementation in use\n   */\n  getColors(): Colors {\n    if (!this.#colors) {\n      this.#colors = useColors()\n    }\n\n    return this.#colors\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#colors = color\n    return this\n  }\n\n  /**\n   * Log message\n   */\n  log(message: string) {\n    this.getRenderer().log(message)\n  }\n\n  /**\n   * Log message by updating the existing line\n   */\n  logUpdate(message: string) {\n    this.getRenderer().logUpdate(message)\n  }\n\n  /**\n   * Persist log line written using the `logUpdate`\n   * method.\n   */\n  logUpdatePersist() {\n    this.getRenderer().logUpdatePersist()\n  }\n\n  /**\n   * Log error message using the renderer. It is similar to `console.error`\n   * but uses the underlying renderer instead\n   */\n  logError(message: string) {\n    this.getRenderer().logError(message)\n  }\n\n  /**\n   * Prepares the success message\n   */\n  prepareSuccess(message: string, options?: LoggerMessageOptions) {\n    message = this.#decorateMessage(message)\n    message = this.#prefixLabel(message, this.#getLabel('success'))\n    message = this.#addPrefix(message, options?.prefix)\n    message = this.#addSuffix(message, options?.suffix)\n    return message\n  }\n\n  /**\n   * Log success message\n   */\n  success(message: string, options?: LoggerMessageOptions) {\n    this.log(this.prepareSuccess(message, options))\n  }\n\n  /**\n   * Prepares the error message\n   */\n  prepareError(message: string | { message: string }, options?: LoggerMessageOptions) {\n    message = typeof message === 'string' ? message : message.message\n    message = this.#decorateMessage(message)\n    message = this.#prefixLabel(message, this.#getLabel('error'))\n    message = this.#addPrefix(message, options?.prefix)\n    message = this.#addSuffix(message, options?.suffix)\n\n    return message\n  }\n\n  /**\n   * Log error message\n   */\n  error(message: string | { message: string }, options?: LoggerMessageOptions) {\n    this.logError(this.prepareError(message, options))\n  }\n\n  /**\n   * Prepares the fatal message\n   */\n  prepareFatal(\n    message: string | { message: string; stack?: string },\n    options?: LoggerMessageOptions\n  ) {\n    const stack = this.#formatStack(typeof message === 'string' ? undefined : message.stack)\n\n    message = typeof message === 'string' ? message : message.message\n    message = this.#decorateMessage(message)\n    message = this.#prefixLabel(message, this.#getLabel('error'))\n    message = this.#addPrefix(message, options?.prefix)\n    message = this.#addSuffix(message, options?.suffix)\n\n    return `${message}${stack}`\n  }\n\n  /**\n   * Log fatal message\n   */\n  fatal(message: string | { message: string; stack?: string }, options?: LoggerMessageOptions) {\n    this.logError(this.prepareFatal(message, options))\n  }\n\n  /**\n   * Prepares the warning message\n   */\n  prepareWarning(message: string, options?: LoggerMessageOptions) {\n    message = this.#decorateMessage(message)\n    message = this.#prefixLabel(message, this.#getLabel('warning'))\n    message = this.#addPrefix(message, options?.prefix)\n    message = this.#addSuffix(message, options?.suffix)\n\n    return message\n  }\n\n  /**\n   * Log warning message\n   */\n  warning(message: string, options?: LoggerMessageOptions) {\n    this.log(this.prepareWarning(message, options))\n  }\n\n  /**\n   * Prepares the info message\n   */\n  prepareInfo(message: string, options?: LoggerMessageOptions) {\n    message = this.#decorateMessage(message)\n    message = this.#prefixLabel(message, this.#getLabel('info'))\n    message = this.#addPrefix(message, options?.prefix)\n    message = this.#addSuffix(message, options?.suffix)\n\n    return message\n  }\n\n  /**\n   * Log info message\n   */\n  info(message: string, options?: LoggerMessageOptions) {\n    this.log(this.prepareInfo(message, options))\n  }\n\n  /**\n   * Prepares the debug message\n   */\n  prepareDebug(message: string, options?: LoggerMessageOptions) {\n    message = this.#decorateMessage(message)\n    message = this.#prefixLabel(message, this.#getLabel('debug'))\n    message = this.#addPrefix(message, options?.prefix)\n    message = this.#addSuffix(message, options?.suffix)\n\n    return message\n  }\n\n  /**\n   * Log debug message\n   */\n  debug(message: string, options?: LoggerMessageOptions) {\n    this.log(this.prepareDebug(message, options))\n  }\n\n  /**\n   * Log a message with a spinner\n   */\n  await(text: string, options?: LoggerMessageOptions) {\n    const message = {\n      logger: this,\n      text,\n      ...options,\n      render() {\n        let decorated = this.logger.#decorateMessage(this.text)\n        decorated = this.logger.#prefixLabel(decorated, this.logger.#getLabel('await'))\n        decorated = this.logger.#addPrefix(decorated, this.prefix)\n        decorated = this.logger.#addSuffix(decorated, this.suffix)\n        return decorated\n      },\n    }\n\n    return new Spinner(message).useRenderer(this.getRenderer())\n  }\n\n  /**\n   * Initiates a new action\n   */\n  action(title: string) {\n    return new Action(title, { dim: this.#options.dim })\n      .useColors(this.getColors())\n      .useRenderer(this.getRenderer())\n  }\n\n  /**\n   * Create a new child instance of self\n   */\n  child(options?: Partial<LoggerOptions>): Logger {\n    return new (this.constructor as typeof Logger)(options)\n      .useColors(this.getColors())\n      .useRenderer(this.getRenderer())\n  }\n}\n","/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport boxes from 'cli-boxes'\nimport stringWidth from 'string-width'\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { icons } from './icons.js'\nimport { useColors } from './colors.js'\nimport { TERMINAL_SIZE } from './helpers.js'\nimport { ConsoleRenderer } from './renderers/console.js'\nimport type { InstructionsOptions, RendererContract } from './types.js'\n\n/**\n * The box styling used by the instructions\n */\nconst BOX = boxes.round\n\n/**\n * The API to render instructions wrapped inside a box\n */\nexport class Instructions {\n  #state: {\n    heading?: { text: string; width: number }\n    content: { text: string; width: number }[]\n  } = {\n    content: [],\n  }\n\n  /**\n   * Renderer to use for rendering instructions\n   */\n  #renderer?: RendererContract\n\n  /**\n   * Length of the widest line inside instructions content\n   */\n  #widestLineLength = 0\n\n  /**\n   * Number of white spaces on the left of the box\n   */\n  #leftPadding = 4\n\n  /**\n   * Number of white spaces on the right of the box\n   */\n  #rightPadding = 8\n\n  /**\n   * Number of empty lines at the top\n   */\n  #paddingTop = 1\n\n  /**\n   * Number of empty lines at the bottom\n   */\n  #paddingBottom = 1\n\n  /**\n   * Reference to the colors\n   */\n  #colors?: Colors\n\n  /**\n   * Options\n   */\n  #options: InstructionsOptions\n\n  /**\n   * Draws the border\n   */\n  #drawBorder: (border: string, colors: Colors) => string = (border, colors) => {\n    return colors.dim(border)\n  }\n\n  constructor(options: Partial<InstructionsOptions> = {}) {\n    this.#options = {\n      icons: options.icons === undefined ? true : options.icons,\n      raw: options.raw === undefined ? false : options.raw,\n    }\n  }\n\n  /**\n   * Returns the length of the horizontal line\n   */\n  #getHorizontalLength() {\n    return this.#widestLineLength + this.#leftPadding + this.#rightPadding\n  }\n\n  /**\n   * Repeats text for given number of times\n   */\n  #repeat(text: string, times: number) {\n    return new Array(times + 1).join(text)\n  }\n\n  /**\n   * Wraps content inside the left and right vertical lines\n   */\n  #wrapInVerticalLines(content: string, leftWhitespace: string, rightWhitespace: string) {\n    return `${this.#drawBorder(\n      BOX.left,\n      this.getColors()\n    )}${leftWhitespace}${content}${rightWhitespace}${this.#drawBorder(BOX.right, this.getColors())}`\n  }\n\n  /**\n   * Returns the top line for the box\n   */\n  #getTopLine(): string {\n    const horizontalLength = this.#getHorizontalLength()\n    const horizontalLine = this.#repeat(\n      this.#drawBorder(BOX.top, this.getColors()),\n      horizontalLength\n    )\n\n    return `${this.#drawBorder(BOX.topLeft, this.getColors())}${horizontalLine}${this.#drawBorder(\n      BOX.topRight,\n      this.getColors()\n    )}`\n  }\n\n  /**\n   * Returns the bottom line for the box\n   */\n  #getBottomLine(): string {\n    const horizontalLength = this.#getHorizontalLength()\n    const horizontalLine = this.#repeat(\n      this.#drawBorder(BOX.bottom, this.getColors()),\n      horizontalLength\n    )\n    return `${this.#drawBorder(\n      BOX.bottomLeft,\n      this.getColors()\n    )}${horizontalLine}${this.#drawBorder(BOX.bottomRight, this.getColors())}`\n  }\n\n  /**\n   * Returns the heading border bottom\n   */\n  #getHeadingBorderBottom(): string {\n    const horizontalLength = this.#getHorizontalLength()\n    const horizontalLine = this.#repeat(\n      this.#drawBorder(boxes.single.top, this.getColors()),\n      horizontalLength\n    )\n    return this.#wrapInVerticalLines(horizontalLine, '', '')\n  }\n\n  /**\n   * Decorates the instruction line by wrapping it inside the box\n   * lines\n   */\n  #getContentLine(line: { text: string; width: number }): string {\n    const leftWhitespace = this.#repeat(' ', this.#leftPadding)\n    const rightWhitespace = this.#repeat(\n      ' ',\n      this.#widestLineLength - line.width + this.#rightPadding\n    )\n    return this.#wrapInVerticalLines(line.text, leftWhitespace, rightWhitespace)\n  }\n\n  /**\n   * Returns the heading line by applying padding\n   */\n  #getHeading(): string | undefined {\n    if (!this.#state.heading) {\n      return\n    }\n\n    return this.#getContentLine(this.#state.heading)\n  }\n\n  /**\n   * Returns the formatted body\n   */\n  #getBody(): string | undefined {\n    if (!this.#state.content || !this.#state.content.length) {\n      return\n    }\n\n    const top = new Array(this.#paddingTop).fill('').map(this.#getEmptyLineNode)\n    const bottom = new Array(this.#paddingBottom).fill('').map(this.#getEmptyLineNode)\n\n    return top\n      .concat(this.#state.content)\n      .concat(bottom)\n      .map((line) => this.#getContentLine(line))\n      .join('\\n')\n  }\n\n  /**\n   * Returns node for a empty line\n   */\n  #getEmptyLineNode() {\n    return { text: '', width: 0 }\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer() {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define a custom renderer. Logs to \"stdout\" and \"stderr\"\n   * by default\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Returns the colors implementation in use\n   */\n  getColors(): Colors {\n    if (!this.#colors) {\n      this.#colors = useColors()\n    }\n\n    return this.#colors\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#colors = color\n    return this\n  }\n\n  /**\n   * Draw the instructions box in fullscreen\n   */\n  fullScreen(): this {\n    const borderWidth = 2\n    this.#widestLineLength = TERMINAL_SIZE - (this.#leftPadding + this.#rightPadding) - borderWidth\n\n    return this\n  }\n\n  /**\n   * Attach a callback to self draw the borders\n   */\n  drawBorder(callback: (borderChar: string, colors: Colors) => string) {\n    this.#drawBorder = callback\n    return this\n  }\n\n  /**\n   * Define heading for instructions\n   */\n  heading(text: string): this {\n    const width = stringWidth(text)\n    if (width > this.#widestLineLength) {\n      this.#widestLineLength = width\n    }\n\n    this.#state.heading = { text, width }\n    return this\n  }\n\n  /**\n   * Add new instruction. Each instruction is rendered\n   * in a new line inside a box\n   */\n  add(text: string): this {\n    text = this.#options.icons ? `${this.getColors().dim(icons.pointer)} ${text}` : `${text}`\n\n    const width = stringWidth(text)\n    if (width > this.#widestLineLength) {\n      this.#widestLineLength = width\n    }\n\n    this.#state.content.push({ text, width })\n    return this\n  }\n\n  prepare(): string {\n    /**\n     * Render content as it is in raw mode\n     */\n    if (this.#options.raw) {\n      let output: string[] = []\n      if (this.#state.heading) {\n        output.push(this.#state.heading.text)\n      }\n\n      output = output.concat(this.#state.content.map(({ text }) => text))\n      return output.join('\\n')\n    }\n\n    const top = this.#getTopLine()\n    const heading = this.#getHeading()\n    const headingBorderBottom = this.#getHeadingBorderBottom()\n    const body = this.#getBody()\n    const bottom = this.#getBottomLine()\n\n    let output = `${top}\\n`\n\n    /**\n     * Draw heading if it exists\n     */\n    if (heading) {\n      output = `${output}${heading}`\n    }\n\n    /**\n     * Draw the border between the heading and the body if\n     * both exists\n     */\n    if (heading && body) {\n      output = `${output}\\n${headingBorderBottom}\\n`\n    }\n\n    /**\n     * Draw body if it exists\n     */\n    if (body) {\n      output = `${output}${body}`\n    }\n\n    return `${output}\\n${bottom}`\n  }\n\n  /**\n   * Render instructions\n   */\n  render() {\n    this.getRenderer().log(this.prepare())\n  }\n}\n","/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport prettyHrtime from 'pretty-hrtime'\n\n/**\n * Task exposes a very simple API to create tasks with states, along with a\n * listener to listen for the task state updates.\n *\n * The task itself has does not render anything to the console. The task\n * renderers does that.\n */\nexport class Task {\n  #startTime?: [number, number]\n\n  /**\n   * Last logged line for the task\n   */\n  #lastLogLine?: string\n\n  /**\n   * Define one or more update listeners\n   */\n  #updateListeners: ((task: this) => void)[] = []\n\n  /**\n   * Duration of the task. Updated after the task is over\n   */\n  #duration?: string\n\n  /**\n   * Message set after completing the task. Can be an error or the\n   * a success message\n   */\n  #completionMessage?: string | { message: string; stack?: string }\n\n  /**\n   * Task current state\n   */\n  #state: 'idle' | 'running' | 'failed' | 'succeeded' = 'idle'\n\n  constructor(public title: string) {}\n\n  #notifyListeners() {\n    for (let listener of this.#updateListeners) {\n      listener(this)\n    }\n  }\n\n  /**\n   * Access the task state\n   */\n  getState() {\n    return this.#state\n  }\n\n  /**\n   * Get the time spent in running the task\n   */\n  getDuration() {\n    return this.#duration || null\n  }\n\n  /**\n   * Get error occurred while running the task\n   */\n  getError() {\n    return this.#completionMessage || null\n  }\n\n  /**\n   * Get task completion success message\n   */\n  getSuccessMessage() {\n    return typeof this.#completionMessage === 'string' ? this.#completionMessage : null\n  }\n\n  /**\n   * Last logged line for the task\n   */\n  getLastLoggedLine() {\n    return this.#lastLogLine || null\n  }\n\n  /**\n   * Bind a listener to listen to the state updates of the task\n   */\n  onUpdate(listener: (task: this) => void): this {\n    this.#updateListeners.push(listener)\n    return this\n  }\n\n  /**\n   * Start the task\n   */\n  start() {\n    this.#state = 'running'\n    this.#startTime = process.hrtime()\n    this.#notifyListeners()\n    return this\n  }\n\n  /**\n   * Update task with log messages. Based upon the renderer\n   * in use, it may only display one line at a time.\n   */\n  update(message: string): this {\n    this.#lastLogLine = message\n    this.#notifyListeners()\n    return this\n  }\n\n  /**\n   * Mark task as completed\n   */\n  markAsSucceeded(message?: string): this {\n    this.#state = 'succeeded'\n    this.#duration = prettyHrtime(process.hrtime(this.#startTime))\n    this.#completionMessage = message\n    this.#notifyListeners()\n    return this\n  }\n\n  /**\n   * Mark task as failed\n   */\n  markAsFailed(error: string | { message: string; stack?: string }): this {\n    this.#state = 'failed'\n    this.#duration = prettyHrtime(process.hrtime(this.#startTime))\n    this.#completionMessage = error\n    this.#notifyListeners()\n    return this\n  }\n}\n","/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { Task } from '../task.js'\nimport { useColors } from '../../colors.js'\nimport type { RendererContract } from '../../types.js'\nimport { ConsoleRenderer } from '../../renderers/console.js'\n\n/**\n * Verbose renderer shows a detailed output of the tasks and the\n * messages logged by a given task\n */\nexport class VerboseRenderer {\n  /**\n   * Reference to the colors implementation\n   */\n  #colors?: Colors\n\n  /**\n   * The renderer to use to output logs\n   */\n  #renderer?: RendererContract\n\n  /**\n   * List of registered tasks\n   */\n  #registeredTasks: Task[] = []\n\n  #notifiedTasks: Set<string> = new Set()\n\n  constructor() {}\n\n  /**\n   * Format error\n   */\n  #formatError(error: string | { message: string; stack?: string }) {\n    if (typeof error === 'string') {\n      return `${this.#getAnsiIcon('│', 'dim')}${this.getColors().red(error)}`\n    }\n\n    if (!error.stack) {\n      return `${this.#getAnsiIcon('│', 'dim')}${this.getColors().red(error.message)}`\n    }\n\n    return `${error.stack\n      .split('\\n')\n      .map((line) => `${this.#getAnsiIcon('│', 'dim')} ${this.getColors().red(line)}`)\n      .join('\\n')}`\n  }\n\n  /**\n   * Returns the ansi icon back when icons are enabled\n   * or an empty string\n   */\n  #getAnsiIcon(icon: string, color: keyof Colors) {\n    return this.getColors()[color](`${icon} `)\n  }\n\n  /**\n   * Renders message for a running task\n   */\n  #renderRunningTask(task: Task) {\n    if (this.#notifiedTasks.has(task.title)) {\n      const lastLoggedLine = task.getLastLoggedLine()\n      if (lastLoggedLine) {\n        this.getRenderer().log(`${this.#getAnsiIcon('│', 'dim')}${lastLoggedLine}`)\n      }\n\n      return\n    }\n\n    this.getRenderer().log(`${this.#getAnsiIcon('┌', 'dim')}${task.title}`)\n    this.#notifiedTasks.add(task.title)\n  }\n\n  /**\n   * Renders message for a succeeded task\n   */\n  #renderSucceededTask(task: Task) {\n    const successMessage = task.getSuccessMessage()\n    const icon = this.#getAnsiIcon('└', 'dim')\n    const status = this.getColors().green(successMessage || 'Completed')\n    const duration = this.getColors().dim(`(${task.getDuration()})`)\n    this.getRenderer().log(`${icon}${status} ${duration}`)\n  }\n\n  /**\n   * Renders message for a failed task\n   */\n  #renderFailedTask(task: Task) {\n    const error = task.getError()\n    if (error) {\n      this.getRenderer().logError(this.#formatError(error))\n    }\n\n    const icon = this.#getAnsiIcon('└', 'dim')\n    const status = this.getColors().red('Failed')\n    const duration = this.getColors().dim(`(${task.getDuration()})`)\n    this.getRenderer().logError(`${icon}${status} ${duration}`)\n  }\n\n  /**\n   * Renders a given task\n   */\n  #renderTask(task: Task) {\n    switch (task.getState()) {\n      case 'running':\n        return this.#renderRunningTask(task)\n      case 'succeeded':\n        return this.#renderSucceededTask(task)\n      case 'failed':\n        return this.#renderFailedTask(task)\n    }\n  }\n\n  /**\n   * Renders all tasks\n   */\n  #renderTasks() {\n    this.#registeredTasks.forEach((task) => this.#renderTask(task))\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer() {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define a custom renderer. Logs to \"stdout\" and \"stderr\"\n   * by default\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Returns the colors implementation in use\n   */\n  getColors(): Colors {\n    if (!this.#colors) {\n      this.#colors = useColors()\n    }\n\n    return this.#colors\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#colors = color\n    return this\n  }\n\n  /**\n   * Register tasks to render\n   */\n  tasks(tasks: Task[]): this {\n    this.#registeredTasks = tasks\n    return this\n  }\n\n  /**\n   * Render all tasks\n   */\n  render() {\n    this.#registeredTasks.forEach((task) => task.onUpdate(($task) => this.#renderTask($task)))\n    this.#renderTasks()\n  }\n}\n","/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { Task } from '../task.js'\nimport { icons } from '../../icons.js'\nimport { useColors } from '../../colors.js'\nimport { ConsoleRenderer } from '../../renderers/console.js'\nimport type { TaskRendererOptions, RendererContract } from '../../types.js'\n\n/**\n * As the name suggests, render tasks in minimal UI for better viewing\n * experience.\n */\nexport class MinimalRenderer {\n  /**\n   * Renderer options\n   */\n  #options: TaskRendererOptions\n\n  /**\n   * Reference to the colors implementation\n   */\n  #colors?: Colors\n\n  /**\n   * The renderer to use to output logs\n   */\n  #renderer?: RendererContract\n\n  /**\n   * List of registered tasks\n   */\n  #registeredTasks: Task[] = []\n\n  constructor(options: TaskRendererOptions) {\n    this.#options = {\n      icons: options.icons === undefined ? true : options.icons,\n    }\n  }\n\n  /**\n   * Format error\n   */\n  #formatError(error: string | { message: string; stack?: string }) {\n    let message = typeof error === 'string' ? error : error.message\n    message = this.getColors().red(message)\n\n    return `\\n  ${message\n      .split('\\n')\n      .map((line) => `${line}`)\n      .join('\\n')}`\n  }\n\n  /**\n   * Returns the pointer icon, if icons are not disabled.\n   */\n  #getPointerIcon(color: keyof Colors) {\n    const icon = this.#options.icons ? `${icons.pointer} ` : ''\n    if (!icon) {\n      return icon\n    }\n\n    return this.getColors()[color](icon)\n  }\n\n  /**\n   * Returns the display string for an idle task\n   */\n  #renderIdleTask(task: Task) {\n    return `${this.#getPointerIcon('dim')}${this.getColors().dim(task.title)}`\n  }\n\n  /**\n   * Returns the display string for a running task\n   */\n  #renderRunningTask(task: Task) {\n    const lastLogLine = task.getLastLoggedLine()\n    const title = this.#options.icons ? `${icons.pointer} ${task.title}` : task.title\n\n    return `${title}\\n  ${lastLogLine || ''}`\n  }\n\n  /**\n   * Returns the display string for a failed task\n   */\n  #renderFailedTask(task: Task) {\n    const pointer = this.#getPointerIcon('red')\n    const duration = this.getColors().dim(`(${task.getDuration()!})`)\n\n    let message = `${pointer}${task.title} ${duration}`\n\n    const error = task.getError()\n    if (!error) {\n      return `${message}\\n`\n    }\n\n    message = `${message}${this.#formatError(error)}`\n    return message\n  }\n\n  /**\n   * Returns the display string for a succeeded task\n   */\n  #renderSucceededTask(task: Task) {\n    const pointer = this.#getPointerIcon('green')\n    const duration = this.getColors().dim(`(${task.getDuration()!})`)\n\n    let message = `${pointer}${task.title} ${duration}`\n\n    const successMessage = task.getSuccessMessage()\n    if (!successMessage) {\n      return `${message}\\n`\n    }\n\n    message = `${message}\\n  ${this.getColors().green(successMessage)}`\n    return message\n  }\n\n  /**\n   * Renders a given task\n   */\n  #renderTask(task: Task): string {\n    switch (task.getState()) {\n      case 'idle':\n        return this.#renderIdleTask(task)\n      case 'running':\n        return this.#renderRunningTask(task)\n      case 'succeeded':\n        return this.#renderSucceededTask(task)\n      case 'failed':\n        return this.#renderFailedTask(task)\n    }\n  }\n\n  /**\n   * Renders all tasks\n   */\n  #renderTasks() {\n    const lastTaskState = this.#registeredTasks[this.#registeredTasks.length - 1].getState()\n    this.getRenderer().logUpdate(\n      this.#registeredTasks.map((task) => this.#renderTask(task)).join('\\n')\n    )\n    if (lastTaskState === 'succeeded' || lastTaskState === 'failed') {\n      this.getRenderer().logUpdatePersist()\n    }\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer() {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define a custom renderer. Logs to \"stdout\" and \"stderr\"\n   * by default\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Returns the colors implementation in use\n   */\n  getColors(): Colors {\n    if (!this.#colors) {\n      this.#colors = useColors()\n    }\n\n    return this.#colors\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#colors = color\n    return this\n  }\n\n  /**\n   * Register tasks to render\n   */\n  tasks(tasks: Task[]): this {\n    this.#registeredTasks = tasks\n    return this\n  }\n\n  /**\n   * Render all tasks\n   */\n  render() {\n    this.#registeredTasks.forEach((task) => {\n      task.onUpdate(() => this.#renderTasks())\n    })\n    this.#renderTasks()\n  }\n}\n","/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { Task } from '../task.js'\nimport { useColors } from '../../colors.js'\nimport type { RendererContract } from '../../types.js'\nimport { ConsoleRenderer } from '../../renderers/console.js'\n\n/**\n * Raw renderer shows a detailed output of the tasks without using any\n * ansi characters\n */\nexport class RawRenderer {\n  /**\n   * Reference to the colors implementation\n   */\n  #colors?: Colors\n\n  /**\n   * The renderer to use to output logs\n   */\n  #renderer?: RendererContract\n\n  /**\n   * List of registered tasks\n   */\n  #registeredTasks: Task[] = []\n\n  #notifiedTasks: Set<string> = new Set()\n\n  constructor() {}\n\n  /**\n   * Format error\n   */\n  #formatError(error: string | { message: string; stack?: string }) {\n    if (typeof error === 'string') {\n      return `${this.getColors().red(error)}`\n    }\n\n    if (!error.stack) {\n      return `${this.getColors().red(error.message)}`\n    }\n\n    return `${error.stack\n      .split('\\n')\n      .map((line) => ` ${this.getColors().red(line)}`)\n      .join('\\n')}`\n  }\n\n  /**\n   * Renders message for a running task\n   */\n  #renderRunningTask(task: Task) {\n    if (this.#notifiedTasks.has(task.title)) {\n      const lastLoggedLine = task.getLastLoggedLine()\n      if (lastLoggedLine) {\n        this.getRenderer().log(lastLoggedLine)\n      }\n\n      return\n    }\n\n    this.getRenderer().log(`${task.title}\\n${new Array(task.title.length + 1).join('-')}`)\n    this.#notifiedTasks.add(task.title)\n  }\n\n  /**\n   * Renders message for a succeeded task\n   */\n  #renderSucceededTask(task: Task) {\n    const successMessage = task.getSuccessMessage()\n    const status = this.getColors().green(successMessage || 'completed')\n    const duration = this.getColors().dim(`(${task.getDuration()})`)\n    this.getRenderer().log(`${status} ${duration}\\n`)\n  }\n\n  /**\n   * Renders message for a failed task\n   */\n  #renderFailedTask(task: Task) {\n    const error = task.getError()\n    if (error) {\n      this.getRenderer().logError(this.#formatError(error))\n    }\n\n    const status = this.getColors().red('failed')\n    const duration = this.getColors().dim(`(${task.getDuration()})`)\n    this.getRenderer().logError(`${status} ${duration}\\n`)\n  }\n\n  /**\n   * Renders a given task\n   */\n  #renderTask(task: Task) {\n    switch (task.getState()) {\n      case 'running':\n        return this.#renderRunningTask(task)\n      case 'succeeded':\n        return this.#renderSucceededTask(task)\n      case 'failed':\n        return this.#renderFailedTask(task)\n    }\n  }\n\n  /**\n   * Renders all tasks\n   */\n  #renderTasks() {\n    this.#registeredTasks.forEach((task) => this.#renderTask(task))\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer() {\n    if (!this.#renderer) {\n      this.#renderer = new ConsoleRenderer()\n    }\n\n    return this.#renderer\n  }\n\n  /**\n   * Define a custom renderer. Logs to \"stdout\" and \"stderr\"\n   * by default\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#renderer = renderer\n    return this\n  }\n\n  /**\n   * Returns the colors implementation in use\n   */\n  getColors(): Colors {\n    if (!this.#colors) {\n      this.#colors = useColors()\n    }\n\n    return this.#colors\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#colors = color\n    return this\n  }\n\n  /**\n   * Register tasks to render\n   */\n  tasks(tasks: Task[]): this {\n    this.#registeredTasks = tasks\n    return this\n  }\n\n  /**\n   * Render all tasks\n   */\n  render() {\n    this.#registeredTasks.forEach((task) => task.onUpdate(($task) => this.#renderTask($task)))\n    this.#renderTasks()\n  }\n}\n","/*\n * @poppinss/cliui\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Colors } from '@poppinss/colors/types'\n\nimport { Task } from './task.js'\nimport { VerboseRenderer } from './renderers/verbose.js'\nimport { MinimalRenderer } from './renderers/minimal.js'\nimport type { TaskManagerOptions, TaskCallback, RendererContract } from '../types.js'\nimport { RawRenderer } from './renderers/raw.js'\n\n/**\n * Transforms error message\n */\nfunction TRANSFORM_ERROR<T extends string>(error: T): { isError: true; message: string }\nfunction TRANSFORM_ERROR<T extends Error>(error: T): T\nfunction TRANSFORM_ERROR<T extends string | Error>(error: T) {\n  if (typeof error === 'string') {\n    return { isError: true, message: error }\n  }\n\n  return error\n}\n\n/**\n * Exposes the API to create a group of tasks and run them in sequence\n */\nexport class TaskManager {\n  /**\n   * Last handled error\n   */\n  error?: any\n\n  /**\n   * Options\n   */\n  #options: TaskManagerOptions\n\n  /**\n   * The renderer to use for rendering tasks. The verbose renderer is\n   * used When \"raw\" is set to true.\n   */\n  #tasksRenderer: MinimalRenderer | VerboseRenderer | RawRenderer\n\n  /**\n   * A set of created tasks\n   */\n  #tasks: { task: Task; callback: TaskCallback }[] = []\n\n  /**\n   * State of the tasks manager\n   */\n  #state: 'idle' | 'running' | 'succeeded' | 'failed' = 'idle'\n\n  constructor(options: Partial<TaskManagerOptions> = {}) {\n    this.#options = {\n      icons: options.icons === undefined ? true : options.icons,\n      raw: options.raw === undefined ? false : options.raw,\n      verbose: options.verbose === undefined ? false : options.verbose,\n    }\n\n    /**\n     * Using verbose renderer when in raw mode\n     */\n    if (this.#options.raw) {\n      this.#tasksRenderer = new RawRenderer()\n    } else if (this.#options.verbose) {\n      this.#tasksRenderer = new VerboseRenderer()\n    } else {\n      /**\n       * Otheriwse using the minimal renderer\n       */\n      this.#tasksRenderer = new MinimalRenderer({\n        icons: this.#options.icons,\n      })\n    }\n  }\n\n  /**\n   * Run a given task. The underlying code assumes that tasks are\n   * executed in sequence.\n   */\n  async #runTask(index: number) {\n    const task = this.#tasks[index]\n    if (!task) {\n      return\n    }\n\n    /**\n     * Start the underlying task\n     */\n    task.task.start()\n\n    /**\n     * Update task progress\n     */\n    const update = (logMessage: string) => {\n      task.task.update(logMessage)\n    }\n\n    /**\n     * Invoke callback\n     */\n    try {\n      const response = await task.callback({ error: TRANSFORM_ERROR, update })\n      if (typeof response === 'string') {\n        task.task.markAsSucceeded(response)\n        await this.#runTask(index + 1)\n      } else {\n        this.#state = 'failed'\n        task.task.markAsFailed(response)\n      }\n    } catch (error) {\n      this.#state = 'failed'\n      this.error = error\n      task.task.markAsFailed(error)\n    }\n  }\n\n  /**\n   * Access the task state\n   */\n  getState() {\n    return this.#state\n  }\n\n  /**\n   * Register a new task\n   */\n  add(title: string, callback: TaskCallback): this {\n    this.#tasks.push({ task: new Task(title), callback })\n    return this\n  }\n\n  /**\n   * Register a new task, when the \"conditional = true\"\n   */\n  addIf(conditional: boolean, title: string, callback: TaskCallback): this {\n    if (conditional) {\n      this.add(title, callback)\n    }\n    return this\n  }\n\n  /**\n   * Register a new task, when the \"conditional = false\"\n   */\n  addUnless(conditional: boolean, title: string, callback: TaskCallback): this {\n    if (!conditional) {\n      this.add(title, callback)\n    }\n    return this\n  }\n\n  /**\n   * Get access to registered tasks\n   */\n  tasks() {\n    return this.#tasks.map(({ task }) => task)\n  }\n\n  /**\n   * Returns the renderer for rendering the messages\n   */\n  getRenderer() {\n    return this.#tasksRenderer.getRenderer()\n  }\n\n  /**\n   * Define a custom renderer. Logs to \"stdout\" and \"stderr\"\n   * by default\n   */\n  useRenderer(renderer: RendererContract): this {\n    this.#tasksRenderer.useRenderer(renderer)\n    return this\n  }\n\n  /**\n   * Define a custom colors implementation\n   */\n  useColors(color: Colors): this {\n    this.#tasksRenderer.useColors(color)\n    return this\n  }\n\n  /**\n   * Run tasks\n   */\n  async run() {\n    if (this.#state !== 'idle') {\n      return\n    }\n\n    this.#state = 'running'\n    this.#tasksRenderer.tasks(this.tasks()).render()\n    await this.#runTask(0)\n\n    if (this.#state === 'running') {\n      this.#state = 'succeeded'\n    }\n  }\n}\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { RendererContract } from '../types.js'\n\n/**\n * Keeps log messages within memory. Useful for testing\n */\nexport class MemoryRenderer implements RendererContract {\n  #logs: { message: string; stream: 'stdout' | 'stderr' }[] = []\n\n  getLogs() {\n    return this.#logs\n  }\n\n  flushLogs(): void {\n    this.#logs = []\n  }\n\n  /**\n   * Log message\n   */\n  log(message: string) {\n    this.#logs.push({ message, stream: 'stdout' })\n  }\n\n  /**\n   * For memory renderer the logUpdate is similar to log\n   */\n  logUpdate(message: string) {\n    this.log(message)\n  }\n\n  /**\n   * Its a noop\n   */\n  logUpdatePersist() {}\n\n  /**\n   * Log message as error\n   */\n  logError(message: string) {\n    this.#logs.push({ message, stream: 'stderr' })\n  }\n}\n"],"mappings":"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","names":["stringWidth","colors","stringWidth","output","prettyHrtime","colors"]}