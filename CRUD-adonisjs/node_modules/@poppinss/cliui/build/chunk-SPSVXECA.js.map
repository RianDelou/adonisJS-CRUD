{"version":3,"sources":["../src/helpers.ts"],"sourcesContent":["/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport wordwrap from 'wordwrap'\nimport stringWidth from 'string-width'\nimport cliTruncate from 'cli-truncate'\nimport terminalSize from 'terminal-size'\n\n/**\n * Total number of columns for the terminal\n */\nexport const TERMINAL_SIZE = terminalSize().columns\n\n/**\n * Applies padding to the left or the right of the string by repeating\n * a given char.\n *\n * The method is not same as `padLeft` or `padRight` from JavaScript STD lib,\n * since it repeats a char regardless of the max width.\n */\nfunction applyPadding(\n  value: string,\n  options: { paddingLeft?: number; paddingRight?: number; paddingChar: string }\n) {\n  if (options.paddingLeft) {\n    value = `${options.paddingChar.repeat(options.paddingLeft)}${value}`\n  }\n\n  if (options.paddingRight) {\n    value = `${value}${options.paddingChar.repeat(options.paddingRight)}`\n  }\n\n  return value\n}\n\n/**\n * Justify the columns to have the same width by filling\n * the empty slots with a padding char.\n *\n * Optionally, the column can be aligned left or right.\n */\nexport function justify(\n  columns: string[],\n  options: {\n    maxWidth: number\n    align?: 'left' | 'right'\n    paddingChar?: string\n  }\n) {\n  const normalizedOptions = {\n    align: 'left' as const,\n    paddingChar: ' ',\n    ...options,\n  }\n\n  return columns.map((column) => {\n    const columnWidth = stringWidth(column)\n\n    /**\n     * Column is already same or greater than the maxWidth\n     */\n    if (columnWidth >= normalizedOptions.maxWidth) {\n      return column\n    }\n\n    /**\n     * Fill empty space on the right\n     */\n    if (normalizedOptions.align === 'left') {\n      return applyPadding(column, {\n        paddingChar: normalizedOptions.paddingChar,\n        paddingRight: normalizedOptions.maxWidth - columnWidth,\n      })\n    }\n\n    /**\n     * Fill empty space on the left\n     */\n    return applyPadding(column, {\n      paddingChar: normalizedOptions.paddingChar,\n      paddingLeft: normalizedOptions.maxWidth - columnWidth,\n    })\n  })\n}\n\n/**\n * Wrap the text under the starting and the ending column.\n * The first line will start at 1st column. However, from\n * the 2nd line onwards, the columns before the start\n * column are filled with white space.\n */\nexport function wrap(\n  columns: string[],\n  options: {\n    startColumn: number\n    endColumn: number\n    trimStart?: boolean\n  }\n) {\n  const wrapper = wordwrap(options.startColumn, options.endColumn)\n  if (options.trimStart) {\n    return columns.map((column) => wrapper(column).trimStart())\n  }\n\n  return columns.map((column) => wrapper(column))\n}\n\n/**\n * Truncates the text after a certain width.\n */\nexport function truncate(\n  columns: string[],\n  options: {\n    maxWidth: number\n    truncationChar?: string\n    position?: 'start' | 'middle' | 'end'\n  }\n) {\n  return columns.map((column) =>\n    cliTruncate(column, options.maxWidth, {\n      truncationCharacter: options.truncationChar || 'â€¦',\n      position: options.position || 'end',\n    })\n  )\n}\n"],"mappings":";AASA,OAAO,cAAc;AACrB,OAAO,iBAAiB;AACxB,OAAO,iBAAiB;AACxB,OAAO,kBAAkB;AAKlB,IAAM,gBAAgB,aAAa,EAAE;AAS5C,SAAS,aACP,OACA,SACA;AACA,MAAI,QAAQ,aAAa;AACvB,YAAQ,GAAG,QAAQ,YAAY,OAAO,QAAQ,WAAW,CAAC,GAAG,KAAK;AAAA,EACpE;AAEA,MAAI,QAAQ,cAAc;AACxB,YAAQ,GAAG,KAAK,GAAG,QAAQ,YAAY,OAAO,QAAQ,YAAY,CAAC;AAAA,EACrE;AAEA,SAAO;AACT;AAQO,SAAS,QACd,SACA,SAKA;AACA,QAAM,oBAAoB;AAAA,IACxB,OAAO;AAAA,IACP,aAAa;AAAA,IACb,GAAG;AAAA,EACL;AAEA,SAAO,QAAQ,IAAI,CAAC,WAAW;AAC7B,UAAM,cAAc,YAAY,MAAM;AAKtC,QAAI,eAAe,kBAAkB,UAAU;AAC7C,aAAO;AAAA,IACT;AAKA,QAAI,kBAAkB,UAAU,QAAQ;AACtC,aAAO,aAAa,QAAQ;AAAA,QAC1B,aAAa,kBAAkB;AAAA,QAC/B,cAAc,kBAAkB,WAAW;AAAA,MAC7C,CAAC;AAAA,IACH;AAKA,WAAO,aAAa,QAAQ;AAAA,MAC1B,aAAa,kBAAkB;AAAA,MAC/B,aAAa,kBAAkB,WAAW;AAAA,IAC5C,CAAC;AAAA,EACH,CAAC;AACH;AAQO,SAAS,KACd,SACA,SAKA;AACA,QAAM,UAAU,SAAS,QAAQ,aAAa,QAAQ,SAAS;AAC/D,MAAI,QAAQ,WAAW;AACrB,WAAO,QAAQ,IAAI,CAAC,WAAW,QAAQ,MAAM,EAAE,UAAU,CAAC;AAAA,EAC5D;AAEA,SAAO,QAAQ,IAAI,CAAC,WAAW,QAAQ,MAAM,CAAC;AAChD;AAKO,SAAS,SACd,SACA,SAKA;AACA,SAAO,QAAQ;AAAA,IAAI,CAAC,WAClB,YAAY,QAAQ,QAAQ,UAAU;AAAA,MACpC,qBAAqB,QAAQ,kBAAkB;AAAA,MAC/C,UAAU,QAAQ,YAAY;AAAA,IAChC,CAAC;AAAA,EACH;AACF;","names":[]}