// src/watcher.ts
import slash2 from "slash";
import chokidar from "chokidar";
import Emittery from "emittery";
import { join as join2 } from "node:path";

// src/debug.ts
import { debuglog } from "node:util";
var debug_default = debuglog("chokidar:ts");

// src/source_files_manager.ts
import slash from "slash";
import memoize from "memoize";
import { join } from "node:path";
import picomatch from "picomatch";
var SourceFilesManager = class {
  #appRoot;
  #included;
  #excluded;
  /**
   * A collection of project files collected as part of the first scan. We need
   * an object here, so that we can share it by reference with the
   * typescript language server.
   */
  #projectFiles = {};
  /**
   * A memoized function to match the file path against included and excluded
   * picomatch patterns
   */
  #matchAgainstPattern = memoize((filePath) => {
    filePath = slash(filePath);
    if (!this.#included(filePath)) {
      return false;
    }
    if (this.#excluded(filePath)) {
      return false;
    }
    return true;
  });
  constructor(appRoot, options) {
    this.#appRoot = appRoot;
    options.files.forEach((file) => this.add(file));
    this.#included = picomatch(
      (options.includes || []).map((pattern) => {
        return slash(join(this.#appRoot, pattern));
      })
    );
    this.#excluded = picomatch(
      (options.excludes || []).map((pattern) => {
        return slash(join(this.#appRoot, pattern));
      })
    );
  }
  /**
   * Add a new source file to the list of project files. This is helpful
   * when new source files are added after the initial typescript
   * build.
   */
  add(filePath) {
    filePath = slash(filePath);
    this.#projectFiles[filePath] = this.#projectFiles[filePath] || { version: 1 };
    debug_default('adding new source file "%s"', filePath);
  }
  /**
   * Bumps the project file version. This is required to tell the
   * typescript compiler that file has been changed.
   */
  bumpVersion(filePath) {
    filePath = slash(filePath);
    const projectFile = this.#projectFiles[filePath];
    if (!projectFile) {
      return;
    }
    projectFile.version++;
    debug_default('source file version bump "%s:%d"', filePath, projectFile.version);
  }
  /**
   * Remove file from the list of existing source files
   */
  remove(filePath) {
    filePath = slash(filePath);
    debug_default('removing source file "%s"', filePath);
    delete this.#projectFiles[filePath];
  }
  /**
   * Returns true when filePath is part of the source files after checking
   * them against `includes`, `excludes` and custom set of `files`.
   */
  isSourceFile(filePath) {
    filePath = slash(filePath);
    return !!this.#projectFiles[filePath] || this.#matchAgainstPattern(filePath);
  }
  /**
   * Returns a copy of project source files
   */
  toJSON() {
    return this.#projectFiles;
  }
};

// src/watcher.ts
var DEFAULT_INCLUDES = ["**/*"];
var DEFAULT_EXCLUDES = ["node_modules/**", "bower_components/**", "jspm_packages/**"];
var Watcher = class extends Emittery {
  #cwd;
  #config;
  #sourceFilesManager;
  constructor(cwd, config) {
    const outDir = config.raw.compilerOptions?.outDir;
    const includes = config.raw.include || DEFAULT_INCLUDES;
    const excludes = config.raw.exclude || (outDir ? DEFAULT_EXCLUDES.concat(outDir) : DEFAULT_EXCLUDES);
    debug_default("initiating watcher %O", { includes, excludes, outDir, files: config.fileNames });
    super();
    this.#cwd = cwd;
    this.#config = config;
    this.#sourceFilesManager = new SourceFilesManager(this.#cwd, {
      includes,
      excludes,
      files: config.fileNames
    });
  }
  /**
   * Returns a boolean telling if it is a script file or not.
   *
   * We check for the `compilerOptions.allowJs` before marking
   * `.js` files as a script files.
   */
  #isScriptFile(filePath) {
    if (filePath.endsWith(".ts") || filePath.endsWith(".tsx")) {
      return true;
    }
    if (this.#config.options.allowJs && filePath.endsWith(".js")) {
      return true;
    }
    return false;
  }
  /**
   * Initiates chokidar watcher
   */
  #initiateWatcher(watchPattern = ["."], watcherOptions) {
    watcherOptions = Object.assign(
      {
        ignored: this.#config.raw.exclude,
        cwd: this.#cwd,
        ignoreInitial: true
      },
      watcherOptions
    );
    debug_default("initating watcher with %j options", watcherOptions);
    return chokidar.watch(watchPattern, watcherOptions);
  }
  /**
   * Process the source file
   */
  async #processSourceFile(absPath, relativePath, trigger) {
    if (trigger === "add") {
      this.#sourceFilesManager.add(absPath);
      this.emit("source:add", { relativePath: slash2(relativePath), absPath });
    } else {
      this.#sourceFilesManager.bumpVersion(absPath);
      this.emit("source:change", { relativePath: slash2(relativePath), absPath });
    }
  }
  /**
   * Invoked when chokidar notifies for a new file addtion
   */
  #onNewFile(filePath) {
    const absPath = join2(this.#cwd, filePath);
    if (!this.#isScriptFile(filePath) || !this.#sourceFilesManager.isSourceFile(absPath)) {
      debug_default('new file added "%s"', filePath);
      this.emit("add", { relativePath: slash2(filePath), absPath });
      return;
    }
    debug_default('new source file added "%s"', filePath);
    this.#processSourceFile(absPath, filePath, "add");
  }
  /**
   * Invoked when chokidar notifies for changes the existing
   * source file
   */
  #onChange(filePath) {
    const absPath = join2(this.#cwd, filePath);
    if (!this.#isScriptFile(filePath) || !this.#sourceFilesManager.isSourceFile(absPath)) {
      debug_default('file changed "%s"', filePath);
      this.emit("change", { relativePath: slash2(filePath), absPath });
      return;
    }
    debug_default('source file changed "%s"', filePath);
    this.#processSourceFile(absPath, filePath, "change");
  }
  /**
   * Invoked when chokidar notifies for file deletion
   */
  #onRemove(filePath) {
    const absPath = join2(this.#cwd, filePath);
    if (!this.#isScriptFile(filePath) || !this.#sourceFilesManager.isSourceFile(absPath)) {
      debug_default('file removed "%s"', filePath);
      this.emit("unlink", { relativePath: slash2(filePath), absPath });
      return;
    }
    debug_default('source file removed "%s"', filePath);
    this.#sourceFilesManager.remove(absPath);
    this.emit("source:unlink", { relativePath: slash2(filePath), absPath });
  }
  /**
   * Build and watch project for changes
   */
  watch(watchPattern = ["."], watcherOptions) {
    const watcher = this.#initiateWatcher(watchPattern, watcherOptions);
    watcher.on("ready", () => {
      debug_default("watcher ready");
      this.emit("watcher:ready");
    });
    watcher.on("add", (path) => this.#onNewFile(path));
    watcher.on("change", (path) => this.#onChange(path));
    watcher.on("unlink", (path) => this.#onRemove(path));
    return watcher;
  }
};

// src/config_parser.ts
import { join as join3 } from "node:path";
import { fileURLToPath } from "node:url";
var ConfigParser = class {
  #cwd;
  #configFileName;
  #ts;
  constructor(cwd, configFileName, ts) {
    this.#cwd = typeof cwd === "string" ? cwd : fileURLToPath(cwd);
    this.#configFileName = configFileName;
    this.#ts = ts;
  }
  /**
   * Parse file. The errors the return back inside the `error` property
   */
  parse(optionsToExtend) {
    let hardException = null;
    debug_default('parsing config file "%s"', this.#configFileName);
    const parsedConfig = this.#ts.getParsedCommandLineOfConfigFile(
      join3(this.#cwd, this.#configFileName),
      optionsToExtend || {},
      {
        ...this.#ts.sys,
        useCaseSensitiveFileNames: true,
        getCurrentDirectory: () => this.#cwd,
        onUnRecoverableConfigFileDiagnostic: (error) => hardException = error
      }
    );
    return { config: parsedConfig, error: hardException };
  }
};
export {
  ConfigParser,
  SourceFilesManager,
  Watcher
};
//# sourceMappingURL=index.js.map