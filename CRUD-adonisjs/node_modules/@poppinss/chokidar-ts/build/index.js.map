{"version":3,"sources":["../src/watcher.ts","../src/debug.ts","../src/source_files_manager.ts","../src/config_parser.ts"],"sourcesContent":["/*\n * @poppinss/chokidar-ts\n *\n * (c) Harminder Virk <virk@adonisjs.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport slash from 'slash'\nimport chokidar from 'chokidar'\nimport Emittery from 'emittery'\nimport { join } from 'node:path'\nimport tsStatic from 'typescript'\n\nimport debug from './debug.js'\nimport type { WatcherEvents } from './types.js'\nimport { SourceFilesManager } from './source_files_manager.js'\n\nconst DEFAULT_INCLUDES = ['**/*']\nconst DEFAULT_EXCLUDES = ['node_modules/**', 'bower_components/**', 'jspm_packages/**']\n\n/**\n * Exposes the API to build the typescript project and then watch it\n * for changes.\n */\nexport class Watcher extends Emittery<WatcherEvents & { 'watcher:ready': undefined }> {\n  #cwd: string\n  #config: tsStatic.ParsedCommandLine\n  #sourceFilesManager: SourceFilesManager\n\n  constructor(cwd: string, config: tsStatic.ParsedCommandLine) {\n    const outDir = config.raw.compilerOptions?.outDir\n    const includes = config.raw.include || DEFAULT_INCLUDES\n    const excludes =\n      config.raw.exclude || (outDir ? DEFAULT_EXCLUDES.concat(outDir) : DEFAULT_EXCLUDES)\n\n    debug('initiating watcher %O', { includes, excludes, outDir, files: config.fileNames })\n\n    super()\n    this.#cwd = cwd\n    this.#config = config\n    this.#sourceFilesManager = new SourceFilesManager(this.#cwd, {\n      includes,\n      excludes,\n      files: config.fileNames,\n    })\n  }\n\n  /**\n   * Returns a boolean telling if it is a script file or not.\n   *\n   * We check for the `compilerOptions.allowJs` before marking\n   * `.js` files as a script files.\n   */\n  #isScriptFile(filePath: string): boolean {\n    if (filePath.endsWith('.ts') || filePath.endsWith('.tsx')) {\n      return true\n    }\n\n    if (this.#config.options.allowJs && filePath.endsWith('.js')) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Initiates chokidar watcher\n   */\n  #initiateWatcher(\n    watchPattern: string | string[] = ['.'],\n    watcherOptions?: chokidar.WatchOptions\n  ) {\n    watcherOptions = Object.assign(\n      {\n        ignored: this.#config.raw.exclude,\n        cwd: this.#cwd,\n        ignoreInitial: true,\n      },\n      watcherOptions\n    )\n\n    debug('initating watcher with %j options', watcherOptions)\n    return chokidar.watch(watchPattern, watcherOptions)\n  }\n\n  /**\n   * Process the source file\n   */\n  async #processSourceFile(absPath: string, relativePath: string, trigger: 'add' | 'change') {\n    /**\n     * Update the source files manager to add the new file or\n     * bump it's version.\n     *\n     * Bumping the version is important, so that the typescript compiler\n     * referencing the source files manager should re-read the file\n     * from disk\n     */\n    if (trigger === 'add') {\n      this.#sourceFilesManager.add(absPath)\n      this.emit('source:add', { relativePath: slash(relativePath), absPath })\n    } else {\n      this.#sourceFilesManager.bumpVersion(absPath)\n      this.emit('source:change', { relativePath: slash(relativePath), absPath })\n    }\n  }\n\n  /**\n   * Invoked when chokidar notifies for a new file addtion\n   */\n  #onNewFile(filePath: string) {\n    const absPath = join(this.#cwd, filePath)\n\n    if (!this.#isScriptFile(filePath) || !this.#sourceFilesManager.isSourceFile(absPath)) {\n      debug('new file added \"%s\"', filePath)\n      this.emit('add', { relativePath: slash(filePath), absPath })\n      return\n    }\n\n    debug('new source file added \"%s\"', filePath)\n    this.#processSourceFile(absPath, filePath, 'add')\n  }\n\n  /**\n   * Invoked when chokidar notifies for changes the existing\n   * source file\n   */\n  #onChange(filePath: string) {\n    const absPath = join(this.#cwd, filePath)\n\n    if (!this.#isScriptFile(filePath) || !this.#sourceFilesManager.isSourceFile(absPath)) {\n      debug('file changed \"%s\"', filePath)\n      this.emit('change', { relativePath: slash(filePath), absPath })\n      return\n    }\n\n    debug('source file changed \"%s\"', filePath)\n    this.#processSourceFile(absPath, filePath, 'change')\n  }\n\n  /**\n   * Invoked when chokidar notifies for file deletion\n   */\n  #onRemove(filePath: string) {\n    const absPath = join(this.#cwd, filePath)\n\n    if (!this.#isScriptFile(filePath) || !this.#sourceFilesManager.isSourceFile(absPath)) {\n      debug('file removed \"%s\"', filePath)\n      this.emit('unlink', { relativePath: slash(filePath), absPath })\n      return\n    }\n\n    debug('source file removed \"%s\"', filePath)\n\n    /**\n     * Clean up tracking for a given file\n     */\n    this.#sourceFilesManager.remove(absPath)\n\n    /**\n     * Notify subscribers\n     */\n    this.emit('source:unlink', { relativePath: slash(filePath), absPath })\n  }\n\n  /**\n   * Build and watch project for changes\n   */\n  watch(watchPattern: string | string[] = ['.'], watcherOptions?: chokidar.WatchOptions) {\n    const watcher = this.#initiateWatcher(watchPattern, watcherOptions)\n\n    watcher.on('ready', () => {\n      debug('watcher ready')\n      this.emit('watcher:ready')\n    })\n\n    watcher.on('add', (path: string) => this.#onNewFile(path))\n    watcher.on('change', (path: string) => this.#onChange(path))\n    watcher.on('unlink', (path: string) => this.#onRemove(path))\n\n    return watcher\n  }\n}\n","/*\n * @poppinss/chokidar-ts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\n\nexport default debuglog('chokidar:ts')\n","/*\n * @poppinss/chokidar-ts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport slash from 'slash'\nimport memoize from 'memoize'\nimport { join } from 'node:path'\nimport picomatch from 'picomatch'\nimport type tsStatic from 'typescript'\n\nimport debug from './debug.js'\nimport type { SourceFilesManagerOptions } from './types.js'\n\n/**\n * Exposes the API to manage the source files for a typescript project.\n * All paths are stored with unix paths\n */\nexport class SourceFilesManager {\n  #appRoot: string\n  #included: picomatch.Matcher\n  #excluded: picomatch.Matcher\n\n  /**\n   * A collection of project files collected as part of the first scan. We need\n   * an object here, so that we can share it by reference with the\n   * typescript language server.\n   */\n  #projectFiles: tsStatic.MapLike<{ version: number }> = {}\n\n  /**\n   * A memoized function to match the file path against included and excluded\n   * picomatch patterns\n   */\n  #matchAgainstPattern = memoize((filePath: string) => {\n    filePath = slash(filePath)\n\n    if (!this.#included(filePath)) {\n      return false\n    }\n\n    if (this.#excluded(filePath)) {\n      return false\n    }\n\n    return true\n  })\n\n  constructor(appRoot: string, options: SourceFilesManagerOptions) {\n    this.#appRoot = appRoot\n\n    options.files.forEach((file) => this.add(file))\n\n    this.#included = picomatch(\n      (options.includes || []).map((pattern) => {\n        return slash(join(this.#appRoot, pattern))\n      })\n    )\n\n    this.#excluded = picomatch(\n      (options.excludes || []).map((pattern) => {\n        return slash(join(this.#appRoot, pattern))\n      })\n    )\n  }\n\n  /**\n   * Add a new source file to the list of project files. This is helpful\n   * when new source files are added after the initial typescript\n   * build.\n   */\n  add(filePath: string): void {\n    filePath = slash(filePath)\n    this.#projectFiles[filePath] = this.#projectFiles[filePath] || { version: 1 }\n    debug('adding new source file \"%s\"', filePath)\n  }\n\n  /**\n   * Bumps the project file version. This is required to tell the\n   * typescript compiler that file has been changed.\n   */\n  bumpVersion(filePath: string) {\n    filePath = slash(filePath)\n    const projectFile = this.#projectFiles[filePath]\n    if (!projectFile) {\n      return\n    }\n\n    projectFile.version++\n    debug('source file version bump \"%s:%d\"', filePath, projectFile.version)\n  }\n\n  /**\n   * Remove file from the list of existing source files\n   */\n  remove(filePath: string) {\n    filePath = slash(filePath)\n    debug('removing source file \"%s\"', filePath)\n    delete this.#projectFiles[filePath]\n  }\n\n  /**\n   * Returns true when filePath is part of the source files after checking\n   * them against `includes`, `excludes` and custom set of `files`.\n   */\n  isSourceFile(filePath: string): boolean {\n    filePath = slash(filePath)\n    return !!this.#projectFiles[filePath] || this.#matchAgainstPattern(filePath)\n  }\n\n  /**\n   * Returns a copy of project source files\n   */\n  toJSON() {\n    return this.#projectFiles\n  }\n}\n","/*\n * @poppinss/chokidar-ts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { join } from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport type tsStatic from 'typescript'\n\nimport debug from './debug.js'\n\n/**\n * Exposes the API to parse typescript config file using the\n * TypeScript's official compiler.\n */\nexport class ConfigParser {\n  #cwd: string\n  #configFileName: string\n  #ts: typeof tsStatic\n\n  constructor(cwd: string | URL, configFileName: string, ts: typeof tsStatic) {\n    this.#cwd = typeof cwd === 'string' ? cwd : fileURLToPath(cwd)\n    this.#configFileName = configFileName\n    this.#ts = ts\n  }\n\n  /**\n   * Parse file. The errors the return back inside the `error` property\n   */\n  parse(optionsToExtend?: tsStatic.CompilerOptions): {\n    error: tsStatic.Diagnostic | null\n    config?: tsStatic.ParsedCommandLine\n  } {\n    let hardException: null | tsStatic.Diagnostic = null\n    debug('parsing config file \"%s\"', this.#configFileName)\n\n    const parsedConfig = this.#ts.getParsedCommandLineOfConfigFile(\n      join(this.#cwd, this.#configFileName),\n      optionsToExtend || {},\n      {\n        ...this.#ts.sys,\n        useCaseSensitiveFileNames: true,\n        getCurrentDirectory: () => this.#cwd,\n        onUnRecoverableConfigFileDiagnostic: (error) => (hardException = error),\n      }\n    )\n\n    return { config: parsedConfig, error: hardException }\n  }\n}\n"],"mappings":"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","names":["slash","join","slash","join","join","join"]}