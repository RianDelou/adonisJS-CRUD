{"version":3,"sources":["../src/runner.ts","../src/middleware.ts"],"sourcesContent":["/*\n * @poppinss/middleware\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\nimport type { ErrorHandler, Executor, FinalHandler } from './types.js'\n\nconst debug = debuglog('poppinss:middleware')\n\n/**\n * Run a function only once. Tightly coupled with the Runner class\n */\nfunction once(scope: Runner<any>, callback: (scope: Runner<any>) => Promise<void> | void) {\n  function next(): Promise<void> | void {\n    if (next.called) {\n      return\n    }\n\n    next.called = true\n    debug('next invoked')\n    return callback(scope)\n  }\n  next.called = false\n\n  return next\n}\n\n/**\n * Default final handler resolves the middleware chain right away\n */\nconst DEFAULT_FINAL_HANDLER = () => Promise.resolve()\n\n/**\n * Runnable to execute an array of functions in sequence. The queue is\n * advanced only when the current function calls `next`.\n *\n * ```js\n * const runner = new Runnable([async function fn1 (params, next) {\n * }])\n * ```\n */\nexport class Runner<MiddlewareFn extends any> {\n  /**\n   * An array of middleware to execute\n   */\n  #middleware: MiddlewareFn[]\n\n  /**\n   * The active index for the middleware handler\n   */\n  #currentIndex = 0\n\n  /**\n   * Executor is responsible for executing a middleware\n   */\n  #executor!: Executor<MiddlewareFn>\n\n  /**\n   * Final handler to execute\n   */\n  #finalHandler: FinalHandler = DEFAULT_FINAL_HANDLER\n\n  /**\n   * Error handler to self handle errors\n   */\n  #errorHandler?: ErrorHandler\n\n  constructor(middleware: MiddlewareFn[]) {\n    this.#middleware = middleware\n  }\n\n  /**\n   * Invoke one middleware at a time. Middleware fns will be executed\n   * recursively until `next` is invoked.\n   *\n   * If one method doesn't call `next`, then the chain will be finished\n   * automatically.\n   */\n  #invoke(self: Runner<MiddlewareFn>): Promise<void> | void {\n    const middleware = self.#middleware[self.#currentIndex++]\n    debug('running middleware at index', self.#currentIndex)\n\n    /**\n     * Empty stack\n     */\n    if (!middleware) {\n      return self.#finalHandler()\n    }\n\n    return self.#executor(middleware, once(self, self.#invoke))\n  }\n\n  /**\n   * Same as invoke, but captures errors\n   */\n  #invokeWithErrorManagement(self: Runner<MiddlewareFn>): Promise<void> | void {\n    const middleware = self.#middleware[self.#currentIndex++]\n    debug('running middleware at index', self.#currentIndex)\n\n    /**\n     * Empty stack\n     */\n    if (!middleware) {\n      return self.#finalHandler().catch(self.#errorHandler)\n    }\n\n    return self\n      .#executor(middleware, once(self, self.#invokeWithErrorManagement))\n      .catch(self.#errorHandler)\n  }\n\n  /**\n   * Final handler to be executed, when the chain ends successfully.\n   */\n  finalHandler(finalHandler: FinalHandler): this {\n    this.#finalHandler = finalHandler\n    return this\n  }\n\n  /**\n   * Specify a custom error handler to use. Defining an error handler\n   * turns will make run method not throw an exception and instead\n   * run the upstream middleware logic\n   */\n  errorHandler(errorHandler: ErrorHandler): this {\n    this.#errorHandler = errorHandler\n    return this\n  }\n\n  /**\n   * Start the middleware queue and pass params to it. The `params`\n   * array will be passed as spread arguments.\n   */\n  async run(cb: Executor<MiddlewareFn>): Promise<void> {\n    this.#executor = cb\n    debug('starting middleware chain with %d middleware', this.#middleware.length)\n\n    if (this.#errorHandler) {\n      return this.#invokeWithErrorManagement(this)\n    }\n\n    return this.#invoke(this)\n  }\n}\n","/*\n * @poppinss/middleware\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Runner } from './runner.js'\n\n/**\n * The middleware class implements the chain of responsibility design pattern\n * and allows executing handlers in series.\n */\nexport class Middleware<MiddlewareFn extends any> {\n  #middleware: Set<MiddlewareFn> = new Set()\n  #middlewareArray?: MiddlewareFn[]\n  #isFrozen: boolean = false\n\n  /**\n   * Get access to all the registered middleware. The return value is\n   * a set of handlers.\n   */\n  all() {\n    return this.#middleware\n  }\n\n  /**\n   * Find if a handler has been registered as a middleware\n   * already.\n   */\n  has(handler: MiddlewareFn): boolean {\n    return this.#middleware.has(handler)\n  }\n\n  /**\n   * Add a middleware. Adding the same middleware\n   * twice will result in a noop.\n   */\n  add(handler: MiddlewareFn): this {\n    if (this.#isFrozen) {\n      throw new Error('Middleware stack is frozen. Cannot add new middleware')\n    }\n\n    this.#middleware.add(handler)\n    return this\n  }\n\n  /**\n   * Remove a specific middleware\n   */\n  remove(handler: MiddlewareFn): boolean {\n    if (this.#isFrozen) {\n      throw new Error('Middleware stack is frozen. Cannot remove middleware')\n    }\n\n    return this.#middleware.delete(handler)\n  }\n\n  /**\n   * Remove all middleware\n   */\n  clear(): void {\n    if (this.#isFrozen) {\n      throw new Error('Middleware stack is frozen. Cannot clear middleware')\n    }\n\n    this.#middleware.clear()\n  }\n\n  /**\n   * Merge middleware from a existing middleware\n   * instance. The merged middleware are\n   * appended\n   */\n  merge(hooks: Middleware<MiddlewareFn>) {\n    if (this.#isFrozen) {\n      throw new Error('Middleware stack is frozen. Cannot merge middleware')\n    }\n\n    hooks.all().forEach((handler) => {\n      this.add(handler)\n    })\n  }\n\n  /**\n   * Freezes the middleware stack for further modifications\n   */\n  freeze() {\n    if (this.#isFrozen) {\n      return\n    }\n\n    this.#isFrozen = true\n    this.#middlewareArray = [...this.all()]\n  }\n\n  /**\n   * Returns an instance of the runner to run hooks\n   */\n  runner(): Runner<MiddlewareFn> {\n    this.freeze()\n    return new Runner(this.#middlewareArray!)\n  }\n}\n"],"mappings":"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","names":[]}