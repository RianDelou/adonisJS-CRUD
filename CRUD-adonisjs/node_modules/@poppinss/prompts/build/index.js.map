{"version":3,"sources":["../src/enquirer.ts","../src/base.ts","../src/colors.ts","../src/mocked_prompt.ts","../src/icons.ts","../src/prompt_options.ts","../src/errors.ts"],"sourcesContent":["/*\n * @poppinss/prompts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport enq from 'enquirer'\nimport { BasePrompt } from './base.js'\nimport { E_PROMPT_CANCELLED } from './errors.js'\n\n/**\n * Since the typings for `enquirer` package is badly broken, we\n * need to cast it to any to make it usable\n */\nconst enquirer = enq as any\n\n/**\n * Uses the `enquirer` package to prompt user for input. The `$prompt`\n * method is invoked by the extended `Prompt` class.\n */\nexport class Prompt extends BasePrompt {\n  protected async prompt(options: any): Promise<any> {\n    let cancelled = false\n    options = Object.assign(\n      {\n        onCancel() {\n          cancelled = true\n        },\n      },\n      options\n    )\n\n    try {\n      const output = await enquirer.prompt(options)\n      return output[options.name]\n    } catch (error) {\n      if (cancelled) {\n        throw new E_PROMPT_CANCELLED()\n      }\n\n      throw error\n    }\n  }\n}\n","/*\n * @poppinss/prompts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { AssertionError } from 'node:assert'\nimport { ObjectBuilder } from '@poppinss/utils'\n\nimport {\n  PromptChoice,\n  ListPromptOptions,\n  TextPromptOptions,\n  TogglePromptOptions,\n  ChoicePromptOptions,\n  BooleanPromptOptions,\n  MultiplePromptOptions,\n  AutoCompletePromptOptions,\n} from './types.js'\n\nimport { colors } from './colors.js'\nimport { MockedPrompt } from './mocked_prompt.js'\nimport { promptHiglight, promptPrefix, promptStyles } from './prompt_options.js'\n\n/**\n * Base prompt class exposes the public API for triggering prompts. The\n * implementations just need to implement a single prompt method.\n */\nexport abstract class BasePrompt {\n  traps: {\n    prompts: Map<string, { prompt: MockedPrompt; triggerError: AssertionError }>\n    verify: () => void\n  } = {\n    prompts: new Map(),\n    verify() {\n      this.prompts.forEach((entry) => {\n        throw entry.triggerError\n      })\n    },\n  }\n\n  /**\n   * Handle the prompt. The mocked prompts are given preference if one exists\n   */\n  #handlePrompt(options: any) {\n    let mockedPrompt: MockedPrompt | undefined\n\n    if (this.traps.prompts.has(options.name)) {\n      mockedPrompt = this.traps.prompts.get(options.name)!.prompt\n      this.traps.prompts.delete(options.name)\n    } else if (this.traps.prompts.has(options.message)) {\n      mockedPrompt = this.traps.prompts.get(options.message)!.prompt\n      this.traps.prompts.delete(options.message)\n    }\n\n    if (mockedPrompt) {\n      return mockedPrompt.handle(options)\n    }\n\n    return this.prompt(options)\n  }\n\n  protected abstract prompt(options: any): Promise<any>\n\n  /**\n   * Prompts for text input\n   */\n  async ask<Result extends any = string>(\n    title: string,\n    options?: TextPromptOptions<Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'input')\n    builder.add('name', options.name || 'prompt')\n    builder.add('message', title)\n    builder.add('hint', options.hint)\n    builder.add('initial', options.default)\n    builder.add('result', options.result)\n    builder.add('format', options.format)\n    builder.add('validate', options.validate)\n    builder.add('prefix', promptPrefix)\n    builder.add('styles', promptStyles)\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Prompt to accept a list of comma separated values\n   */\n  async list<Result extends any = string[]>(\n    title: string,\n    options?: ListPromptOptions<Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'list')\n    builder.add('name', options.name || 'prompt')\n    builder.add('sep', options.seperator || ',')\n    builder.add('name', options.name)\n    builder.add('message', title)\n    builder.add('hint', options.hint)\n    builder.add('initial', options.default)\n    builder.add('result', options.result)\n    builder.add('format', options.format)\n    builder.add('validate', options.validate)\n    builder.add('prefix', promptPrefix)\n    builder.add('styles', promptStyles)\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Prompts for text input but masks the output (for password)\n   */\n  async secure<Result extends any = string>(\n    title: string,\n    options?: TextPromptOptions<Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'password')\n    builder.add('name', options.name || 'prompt')\n    builder.add('message', title)\n    builder.add('initial', options.default)\n    builder.add('result', options.result)\n    builder.add('format', options.format)\n    builder.add('validate', options.validate)\n    builder.add('prefix', promptPrefix)\n    builder.add('styles', promptStyles)\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Asks for `Y/n`\n   */\n  async confirm<Result extends any = boolean>(\n    title: string,\n    options?: BooleanPromptOptions<Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'confirm')\n    builder.add('name', options.name || 'prompt')\n    builder.add('message', title)\n    builder.add('hint', options.hint)\n    builder.add('initial', options.default)\n    builder.add('result', options.result)\n    builder.add('format', options.format)\n    builder.add('validate', options.validate)\n    builder.add('prefix', promptPrefix)\n    builder.add('styles', promptStyles)\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Similar to [[this.confirm]] but with custom names for the `Y/n` options\n   */\n  async toggle<Result extends any = boolean>(\n    title: string,\n    choices: [string, string],\n    options?: TogglePromptOptions<Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'toggle')\n    builder.add('name', options.name || 'prompt')\n    builder.add('message', title)\n    builder.add('hint', options.hint)\n    builder.add('initial', options.default)\n    builder.add('result', options.result)\n    builder.add('format', options.format)\n    builder.add('validate', options.validate)\n    builder.add('enabled', choices[0])\n    builder.add('disabled', choices[1])\n    builder.add('prefix', promptPrefix)\n    builder.add('styles', promptStyles)\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Prompt to select a value from the list of options\n   */\n  async choice<Choice extends string, Result extends any = Choice>(\n    title: string,\n    choices: readonly (Choice | PromptChoice<Choice>)[],\n    options?: ChoicePromptOptions<Choice, Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'select')\n    builder.add('name', options.name || 'prompt')\n    builder.add('message', title)\n    builder.add('initial', options.default)\n    builder.add('hint', options.hint || 'Press <ENTER> to select')\n    builder.add('result', options.result)\n    builder.add('format', options.format)\n    builder.add('validate', options.validate)\n    builder.add('prefix', promptPrefix)\n    builder.add('styles', promptStyles)\n\n    builder.add(\n      'choices',\n      choices.map((choice) => {\n        if (typeof choice === 'string') {\n          return { name: choice, message: choice, value: choice }\n        }\n        return choice\n      })\n    )\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Prompt to select multiple values from the list of options\n   */\n  async multiple<Choice extends string, Result extends any = Choice[]>(\n    title: string,\n    choices: readonly (Choice | PromptChoice<Choice>)[],\n    options?: MultiplePromptOptions<Choice, Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'multiselect')\n    builder.add('name', options.name || 'prompt')\n    builder.add('message', title)\n    builder.add('initial', options.default)\n    builder.add('result', options.result)\n    builder.add('format', options.format)\n    builder.add('hint', options.hint || 'Press <SPACE> to select')\n    builder.add('validate', options.validate)\n    builder.add('prefix', promptPrefix)\n    builder.add('styles', promptStyles)\n\n    builder.add('indicator', (state: any, choice: any) => {\n      if (choice.enabled) {\n        return colors.cyan(state.symbols.radio.on)\n      }\n      return colors.dim(state.symbols.radio.off)\n    })\n\n    builder.add(\n      'choices',\n      choices.map((choice) => {\n        if (typeof choice === 'string') {\n          return { name: choice, message: choice, value: choice }\n        }\n        return choice\n      })\n    )\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Prompt to select one or multiple values from the list of searchable\n   * options.\n   */\n  async autocomplete<\n    Choice extends string,\n    Multiple extends boolean = false,\n    Result extends any = Multiple extends true ? Choice[] : Choice,\n  >(\n    title: string,\n    choices: readonly Choice[],\n    options?: AutoCompletePromptOptions<Choice, Multiple, Result>\n  ): Promise<Result> {\n    options = options || {}\n\n    const builder = new ObjectBuilder({})\n    builder.add('type', 'autocomplete')\n    builder.add('name', options.name || 'prompt')\n    builder.add('message', title)\n    builder.add('initial', options.default)\n    builder.add('multiple', options.multiple)\n    builder.add('result', options.result)\n    builder.add(\n      'hint',\n      options.hint || options.multiple ? 'Press <SPACE> to select' : 'Press <ENTER> to select'\n    )\n    builder.add('format', options.format)\n    builder.add('limit', options.limit)\n    builder.add('validate', options.validate)\n    builder.add('footer', options.footer)\n    builder.add('choices', choices)\n    builder.add('prefix', promptPrefix)\n    builder.add('highlight', promptHiglight)\n    builder.add('styles', promptStyles)\n\n    return this.#handlePrompt(builder.toObject())\n  }\n\n  /**\n   * Trap a prompt by its message or unique name\n   */\n  trap(message: string) {\n    /**\n     * Trigger error is raised when the prompt is not triggered but\n     * trapped\n     */\n    const triggerError = new AssertionError({\n      message: `Expected prompt \"${message}\" to get triggered`,\n    })\n    const mockedPrompt = new MockedPrompt()\n\n    this.traps.prompts.set(message, { prompt: mockedPrompt, triggerError })\n    return mockedPrompt\n  }\n}\n","/*\n * @poppinss/prompts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport useColors from '@poppinss/colors'\nimport { Colors } from '@poppinss/colors/types'\n\n/**\n * Colors and icons to use.\n */\nconst colors: Colors = useColors.ansi()\nexport { colors }\n","/*\n * @poppinss/utils\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { inspect } from 'node:util'\nimport { AssertionError } from 'node:assert'\nimport { PromptState } from './types.js'\n\nexport class MockedPrompt {\n  /**\n   * The final answer to reply with\n   */\n  #answer: any\n\n  /**\n   * The selected index for the select prompt\n   */\n  #choiceSelection?: number\n\n  /**\n   * Selected indexes for the multi-select prompt\n   */\n  #multiChoiceSelection?: number[]\n\n  /**\n   * Expected assertions\n   */\n  #assertions: {\n    value: string\n    expectsError: boolean // Does assertion expects error?\n    expectedErrorMessage?: string | RegExp\n    error: AssertionError\n  }[] = []\n\n  /**\n   * Set the answer without overriding the existing one\n   */\n  #setAnswer(answer: string | number | boolean | string[]) {\n    if (this.#answer === undefined) {\n      this.#answer = answer\n    }\n  }\n\n  /**\n   * Choose the default option when no explicit selection was made.\n   *\n   * - Choose the initial value\n   * - Or, select the first option, if no initial value exists\n   */\n  #setSelectDefaults(options: any) {\n    const defaultAnswer = options.initial !== undefined ? options.initial : 0\n    if (typeof defaultAnswer === 'number') {\n      if (this.#choiceSelection === undefined) {\n        this.#choiceSelection = defaultAnswer\n      }\n\n      return\n    }\n\n    if (defaultAnswer !== undefined) {\n      this.#setAnswer(defaultAnswer)\n    }\n  }\n\n  /**\n   * Choose the default option when no explicit selection was made.\n   *\n   * - Choose the initial value\n   */\n  #setMultiSelectDefaults(options: any) {\n    this.#setAnswer(options.initial)\n  }\n\n  /**\n   * Select the default answer for the toggle prompt when no\n   * explicit selection was made.\n   *\n   * - Choose the initial value (if exists)\n   * - Set answer to false\n   */\n  #setToggleDefaults(options: any) {\n    this.#setAnswer(options.initial !== undefined ? options.initial : false)\n  }\n\n  /**\n   * Select the default answer for the confirmation prompt, when\n   * no explicit selection was made\n   *\n   * - Choose the initial value (if exists)\n   * - Set answer to false\n   */\n  #setConfirmationDefaults(options: any) {\n    this.#setAnswer(options.initial !== undefined ? options.initial : false)\n  }\n\n  /**\n   * Select the default answer for the input and password prompts, when\n   * no explicit selection was made\n   *\n   * - Choose the initial value (if exists)\n   */\n  #setTextDefaults(options: any) {\n    this.#setAnswer(options.initial)\n  }\n\n  /**\n   * Conditionals to find the prompt type\n   */\n  #isToggle(options: any) {\n    return options.type === 'toggle'\n  }\n  #isConfirmation(options: any) {\n    return options.type === 'confirm'\n  }\n  #isSelect(options: any) {\n    return (\n      (options.type === 'select' && options.choices) ||\n      (options.type === 'autocomplete' && !options.multiple && options.choices)\n    )\n  }\n  #isMultiSelect(options: any) {\n    return (\n      (options.type === 'multiselect' && options.choices) ||\n      (options.type === 'autocomplete' && options.multiple && options.choices)\n    )\n  }\n  #isText(options: any) {\n    return options.type === 'input' || options.type === 'password' || options.type === 'list'\n  }\n\n  /**\n   * Run assertions on the final answer\n   */\n  async #assert(options: any) {\n    /**\n     * State for the validation method\n     */\n    const state: PromptState<any> = {\n      message: options.message,\n      type: options.type,\n      name: options.name,\n      value: '',\n    }\n\n    /**\n     * Expected there should be assertions, but the prompt has not\n     * defined the validate function\n     */\n    if (!options.validate && this.#assertions.length) {\n      throw this.#assertions[0].error\n    }\n\n    /**\n     * Go through all the expected assertions\n     */\n    for (let assertion of this.#assertions) {\n      const result = await options.validate(assertion.value, state)\n\n      /**\n       * Expected the value to pass the validation, but the validation\n       * result returns a non true value\n       */\n      if (!assertion.expectsError) {\n        if (result !== true) {\n          throw assertion.error\n        }\n      } else {\n        /**\n         * Expected the value to fail the assertion, but the\n         * validation method returned true\n         */\n        if (result === true) {\n          throw assertion.error\n        }\n\n        /**\n         * Validation failed but the error message is different\n         */\n        if (\n          typeof assertion.expectedErrorMessage === 'string' &&\n          result !== assertion.expectedErrorMessage\n        ) {\n          assertion.error.actual = result\n          throw assertion.error\n        }\n\n        if (\n          assertion.expectedErrorMessage instanceof RegExp &&\n          !assertion.expectedErrorMessage.test(result)\n        ) {\n          throw assertion.error\n        }\n      }\n    }\n  }\n\n  /**\n   * Format user input. Inside CLI, the method is called\n   * as the user types\n   */\n  #formatInput(input: string, options: any) {\n    if (options.type === 'list') {\n      return input.split(options.sep)\n    }\n\n    return input\n  }\n\n  /**\n   * Transform the final result\n   */\n  async #transformResult(result: any, options: any) {\n    if (typeof options.result === 'function') {\n      return options.result(result)\n    }\n\n    return result\n  }\n\n  /**\n   * Convert the user selection choice to answer\n   */\n  #convertChoiceToAnswer(options: any) {\n    if (this.#answer !== undefined) {\n      return\n    }\n\n    const answer = options.choices[this.#choiceSelection!]\n    this.#setAnswer(typeof answer === 'string' ? answer : answer?.name)\n  }\n\n  /**\n   * Convert the user multiple selection choice to answer\n   */\n  #convertMultipleChoicesToAnswer(options: any) {\n    if (this.#answer !== undefined) {\n      if (!Array.isArray(this.#answer)) {\n        this.#answer = [this.#answer]\n      }\n      return\n    }\n\n    /**\n     * Initiate multi choice selection array\n     */\n    if (!this.#multiChoiceSelection) {\n      this.#multiChoiceSelection =\n        this.#choiceSelection !== undefined ? [this.#choiceSelection] : []\n    }\n\n    const answers = this.#multiChoiceSelection.map((index) => {\n      const answer = options.choices[index]\n      return typeof answer === 'string' ? answer : answer?.name\n    })\n\n    this.#setAnswer(answers)\n  }\n\n  constructor() {}\n\n  /**\n   * Reply to prompt with a given answer\n   */\n  replyWith(answer: string | string[] | boolean | number): this {\n    this.#answer = answer\n    return this\n  }\n\n  /**\n   * Accept the confirmation or the toggle prompt\n   */\n  accept(): this {\n    return this.replyWith(true)\n  }\n\n  /**\n   * Reject the confirmation or the toggle prompt\n   */\n  reject(): this {\n    return this.replyWith(false)\n  }\n\n  /**\n   * Choose a select option by index. The index starts with zero\n   */\n  chooseOption(index: number): this {\n    this.#choiceSelection = index\n    return this\n  }\n\n  /**\n   * Choose multiple options by indexes. The index starts with zero\n   */\n  chooseOptions(indexes: number[]): this {\n    this.#multiChoiceSelection = indexes\n    return this\n  }\n\n  /**\n   * Expect the given value to fail the prompt validation\n   */\n  assertFails(value: string, message?: string | RegExp): this {\n    if (!message) {\n      this.#assertions.push({\n        value,\n        expectsError: true,\n        expectedErrorMessage: message,\n        error: new AssertionError({\n          message: 'Expected prompt validation to fail',\n          stackStartFn: this.assertFails,\n        }),\n      })\n      return this\n    }\n\n    if (typeof message === 'string') {\n      const error = new AssertionError({\n        message: `Expected prompt validation message to equal ${inspect(message)}`,\n        expected: message,\n        operator: 'strictEqual',\n        stackStartFn: this.assertFails,\n      })\n      Object.defineProperty(error, 'showDiff', { value: true })\n\n      this.#assertions.push({\n        value,\n        expectsError: true,\n        expectedErrorMessage: message,\n        error,\n      })\n\n      return this\n    }\n\n    this.#assertions.push({\n      value,\n      expectsError: true,\n      expectedErrorMessage: message,\n      error: new AssertionError({\n        message: `Expected prompt validation message to match ${inspect(message)}`,\n        expected: message,\n      }),\n    })\n\n    return this\n  }\n\n  /**\n   * Expect the given value to pass the prompt validation\n   */\n  assertPasses(value: string): this {\n    const error = new AssertionError({\n      message: 'Expected assertion to pass, instead it failed',\n    })\n    this.#assertions.push({\n      value,\n      expectsError: false,\n      error: error,\n    })\n\n    return this\n  }\n\n  /**\n   * Handle the prompt\n   */\n  async handle(options: any): Promise<any> {\n    if (this.#isSelect(options)) {\n      this.#setSelectDefaults(options)\n      this.#convertChoiceToAnswer(options)\n    } else if (this.#isMultiSelect(options)) {\n      this.#setMultiSelectDefaults(options)\n      this.#convertMultipleChoicesToAnswer(options)\n    } else if (this.#isToggle(options)) {\n      this.#setToggleDefaults(options)\n    } else if (this.#isConfirmation(options)) {\n      this.#setConfirmationDefaults(options)\n    } else if (this.#isText(options)) {\n      this.#setTextDefaults(options)\n    }\n\n    this.#answer = this.#formatInput(this.#answer, options)\n    await this.#assert(options)\n    return this.#transformResult(this.#answer, options)\n  }\n}\n","/*\n * @poppinss/prompts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport const icons =\n  process.platform === 'win32' && !process.env.WT_SESSION ? { pointer: '>' } : { pointer: '❯' }\n","/*\n * @poppinss/prompts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { colors } from './colors.js'\nimport { icons } from './icons.js'\n\n/**\n * Styles used by prompts\n */\nexport const promptStyles = {\n  danger: (value: string) => colors.red(value),\n  submitted: (value: string) => colors.cyan(value),\n}\n\n/**\n * Prompt prefix\n */\nexport const promptPrefix = colors.dim(icons.pointer)\n\n/**\n * Highlight style used by prompt\n */\nexport const promptHiglight = (value: string) => colors.yellow(value)\n","/*\n * @poppinss/prompts\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { createError } from '@poppinss/utils'\n\nexport const E_PROMPT_CANCELLED = createError('Prompt cancelled', 'E_PROMPT_CANCELLED', 500)\n"],"mappings":"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","names":["AssertionError","AssertionError"]}