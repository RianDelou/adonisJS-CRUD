{"version":3,"sources":["../src/base.ts","../src/raw.ts","../src/kleur.ts","../src/silent.ts","../index.ts"],"sourcesContent":["/**\n * @poppinss/colors\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Abstract implementation of the colors class.\n */\nexport abstract class Colors {\n  protected abstract transform(transformation: string): this\n  protected abstract transform(transformation: string, text: string | number): string\n  protected abstract transform(transformation: string, text?: string | number): this | string\n\n  black(): this\n  black(text: string): string\n  black(text?: string | number): this | string {\n    return this.transform('black', text)\n  }\n\n  red(): this\n  red(text: string): string\n  red(text?: string | number): this | string {\n    return this.transform('red', text)\n  }\n\n  green(): this\n  green(text: string): string\n  green(text?: string | number): this | string {\n    return this.transform('green', text)\n  }\n\n  yellow(): this\n  yellow(text: string): string\n  yellow(text?: string | number): this | string {\n    return this.transform('yellow', text)\n  }\n\n  blue(): this\n  blue(text: string): string\n  blue(text?: string | number): this | string {\n    return this.transform('blue', text)\n  }\n\n  magenta(): this\n  magenta(text: string): string\n  magenta(text?: string | number): this | string {\n    return this.transform('magenta', text)\n  }\n\n  cyan(): this\n  cyan(text: string): string\n  cyan(text?: string | number): this | string {\n    return this.transform('cyan', text)\n  }\n\n  white(): this\n  white(text: string): string\n  white(text?: string | number): this | string {\n    return this.transform('white', text)\n  }\n\n  gray(): this\n  gray(text: string): string\n  gray(text?: string | number): this | string {\n    return this.transform('gray', text)\n  }\n\n  grey(): this\n  grey(text: string): string\n  grey(text?: string | number): this | string {\n    return this.transform('grey', text)\n  }\n\n  bgBlack(): this\n  bgBlack(text: string): string\n  bgBlack(text?: string | number): this | string {\n    return this.transform('bgBlack', text)\n  }\n\n  bgRed(): this\n  bgRed(text: string): string\n  bgRed(text?: string | number): this | string {\n    return this.transform('bgRed', text)\n  }\n\n  bgGreen(): this\n  bgGreen(text: string): string\n  bgGreen(text?: string | number): this | string {\n    return this.transform('bgGreen', text)\n  }\n\n  bgYellow(): this\n  bgYellow(text: string): string\n  bgYellow(text?: string | number): this | string {\n    return this.transform('bgYellow', text)\n  }\n\n  bgBlue(): this\n  bgBlue(text: string): string\n  bgBlue(text?: string | number): this | string {\n    return this.transform('bgBlue', text)\n  }\n\n  bgMagenta(): this\n  bgMagenta(text: string): string\n  bgMagenta(text?: string | number): this | string {\n    return this.transform('bgMagenta', text)\n  }\n\n  bgCyan(): this\n  bgCyan(text: string): string\n  bgCyan(text?: string | number): this | string {\n    return this.transform('bgCyan', text)\n  }\n\n  bgWhite(): this\n  bgWhite(text: string): string\n  bgWhite(text?: string | number): this | string {\n    return this.transform('bgWhite', text)\n  }\n\n  reset(): this\n  reset(text: string): string\n  reset(text?: string | number): this | string {\n    return this.transform('reset', text)\n  }\n\n  bold(): this\n  bold(text: string): string\n  bold(text?: string | number): this | string {\n    return this.transform('bold', text)\n  }\n\n  dim(): this\n  dim(text: string): string\n  dim(text?: string | number): this | string {\n    return this.transform('dim', text)\n  }\n\n  italic(): this\n  italic(text: string): string\n  italic(text?: string | number): this | string {\n    return this.transform('italic', text)\n  }\n\n  underline(): this\n  underline(text: string): string\n  underline(text?: string | number): this | string {\n    return this.transform('underline', text)\n  }\n\n  inverse(): this\n  inverse(text: string): string\n  inverse(text?: string | number): this | string {\n    return this.transform('inverse', text)\n  }\n\n  hidden(): this\n  hidden(text: string): string\n  hidden(text?: string | number): this | string {\n    return this.transform('hidden', text)\n  }\n\n  strikethrough(): this\n  strikethrough(text: string): string\n  strikethrough(text?: string | number): this | string {\n    return this.transform('strikethrough', text)\n  }\n}\n","/**\n * @poppinss/colors\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Colors } from './base.js'\nimport { ColorTransformations } from './types.js'\n\n/**\n * Concrete implementation of the Colors class that prefixes the\n * applied transformations to the final text as string.\n *\n * This class is meant to be used at the time of testing\n */\nexport class Raw extends Colors {\n  #transformations: string[] = []\n\n  #dispose<T>(value: T, callback: () => void) {\n    callback()\n    return value\n  }\n\n  /**\n   * Perform the given transformation. The base class will\n   * invoke this method\n   */\n  protected transform(transformation: ColorTransformations): this\n  protected transform(transformation: ColorTransformations, text: string | number): string\n  protected transform(transformation: ColorTransformations, text?: string | number): string | this {\n    this.#transformations.push(transformation)\n\n    if (text !== undefined) {\n      const transformations = this.#transformations.concat([text as any]).join('(')\n      const closingWrapping = new Array(this.#transformations.length + 1).join(')')\n\n      return this.#dispose(`${transformations}${closingWrapping}`, () => {\n        this.#transformations = []\n      })\n    }\n\n    return this\n  }\n}\n","/**\n * @poppinss/colors\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport kleur from 'kleur'\nimport { Colors } from './base.js'\nimport { ColorTransformations } from './types.js'\n\n/**\n * Concrete implementation of the Colors class using Kleur\n */\nexport class Kleur extends Colors {\n  #chain?: kleur.Kleur\n\n  constructor() {\n    super()\n    kleur.enabled = true\n  }\n\n  #dispose<T>(value: T, callback: () => void) {\n    callback()\n    return value\n  }\n\n  /**\n   * Perform the given transformation. The abstract Color class calls this\n   * method\n   */\n  protected transform(transformation: ColorTransformations): this\n  protected transform(transformation: ColorTransformations, text: string | number): string\n  protected transform(transformation: ColorTransformations, text?: string | number): string | this {\n    /**\n     * Transform text. If the chain is defined, then transform using\n     * the chain, otherwise use kluer directory\n     */\n    if (text !== undefined) {\n      if (this.#chain) {\n        return this.#dispose(this.#chain[transformation](text), () => {\n          this.#chain = undefined\n        })\n      }\n      return kleur[transformation](text)\n    }\n\n    /**\n     * Apply transformation\n     */\n    if (this.#chain) {\n      this.#chain = this.#chain[transformation]()\n    } else {\n      this.#chain = kleur[transformation]()\n    }\n\n    return this\n  }\n}\n","/**\n * @poppinss/colors\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Colors } from './base.js'\nimport { ColorTransformations } from './types.js'\n\n/**\n * Concrete implementation of the Colors class that returns\n * the value as it is.\n */\nexport class Silent extends Colors {\n  /**\n   * Perform the given transformation. The abstract Color class calls this\n   * method\n   */\n  protected transform(transformation: ColorTransformations): this\n  protected transform(transformation: ColorTransformations, text: string | number): string\n  protected transform(_: ColorTransformations, text?: string | number): string | this {\n    if (text !== undefined) {\n      return String(text)\n    }\n\n    return this\n  }\n}\n","/**\n * @poppinss/colors\n *\n * (c) Poppinss\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Raw } from './src/raw.js'\nimport { Kleur } from './src/kleur.js'\nimport { Colors } from './src/base.js'\nimport { Silent } from './src/silent.js'\n\nconst useColors: {\n  ansi(): Colors\n  silent(): Colors\n  raw(): Colors\n} = {\n  /**\n   * Kleur implementation\n   */\n  ansi() {\n    return new Kleur()\n  },\n\n  /**\n   * Silent implementation. Returns the string\n   * as it is\n   */\n  silent() {\n    return new Silent()\n  },\n\n  /**\n   * Raw implementation. Wraps string with applied\n   * transformations as plain text.\n   */\n  raw() {\n    return new Raw()\n  },\n}\n\nexport default useColors\n"],"mappings":"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","names":[]}