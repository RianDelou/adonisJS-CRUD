import type { SpreadArgument, StringArgument } from '../types.js';
/**
 * Namespace for defining arguments using decorators.
 */
export declare const args: {
    /**
     * Define argument that accepts a string value
     */
    string<Type = string>(options?: Partial<Omit<StringArgument<Type>, 'type'>>): <Key extends string, Target extends { [K in Key]?: Type | undefined; }>(target: Target, propertyName: Key) => void;
    /**
     * Define argument that accepts a spread value
     */
    spread<Type_1 extends unknown = string[]>(options?: Partial<Omit<SpreadArgument<Type_1>, "type">> | undefined): <Key_1 extends string, Target_1 extends { [K_1 in Key_1]?: Type_1 | undefined; }>(target: Target_1, propertyName: Key_1) => void;
};
