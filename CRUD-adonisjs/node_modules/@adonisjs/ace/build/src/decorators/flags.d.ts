import type { ArrayFlag, NumberFlag, StringFlag, BooleanFlag } from '../types.js';
/**
 * Namespace for defining flags using decorators.
 */
export declare const flags: {
    /**
     * Define option that accepts a string value
     */
    string<Type = string>(options?: Partial<Omit<StringFlag<Type>, 'type'>>): <Key extends string, Target extends { [K in Key]?: Type | undefined; }>(target: Target, propertyName: Key) => void;
    /**
     * Define option that accepts a boolean value
     */
    boolean<Type_1 = boolean>(options?: Partial<Omit<BooleanFlag<Type_1>, "type">> | undefined): <Key_1 extends string, Target_1 extends { [K_1 in Key_1]?: Type_1 | undefined; }>(target: Target_1, propertyName: Key_1) => void;
    /**
     * Define option that accepts a number value
     */
    number<Type_2 = number>(options?: Partial<Omit<NumberFlag<Type_2>, "type">> | undefined): <Key_2 extends string, Target_2 extends { [K_2 in Key_2]?: Type_2 | undefined; }>(target: Target_2, propertyName: Key_2) => void;
    /**
     * Define option that accepts an array of values
     */
    array<Type_3 extends any[] = string[]>(options?: Partial<Omit<ArrayFlag<Type_3>, "type">> | undefined): <Key_3 extends string, Target_3 extends { [K_3 in Key_3]?: Type_3 | undefined; }>(target: Target_3, propertyName: Key_3) => void;
};
