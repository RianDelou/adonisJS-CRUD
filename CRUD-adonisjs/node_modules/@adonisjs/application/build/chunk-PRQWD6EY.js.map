{"version":3,"sources":["../src/errors.ts","../src/generators.ts","../src/rc_file/parser.ts","../src/directories.ts","../src/application.ts","../src/managers/config.ts","../src/managers/rc_file.ts","../src/managers/node_env.ts","../src/managers/preloads.ts","../src/managers/providers.ts"],"sourcesContent":["/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { createError } from '@poppinss/utils'\n\n/**\n * The exception is raised when the \"pattern\" property is missing\n * in the meta file object.\n */\nexport const E_MISSING_METAFILE_PATTERN = createError<[fileProperty: string]>(\n  'Invalid metafile entry \"%s\". Missing pattern property',\n  'E_MISSING_METAFILE_PATTERN'\n)\n\n/**\n * The exception is raised when the \"file\" property is missing\n * in the preload file object\n */\nexport const E_MISSING_PRELOAD_FILE = createError<[preloadProperty: string]>(\n  'Invalid preload entry \"%s\". Missing file property',\n  'E_MISSING_PRELOAD_FILE'\n)\n\n/**\n * The exception is raised when the \"file\" property is not a function\n */\nexport const E_INVALID_PRELOAD_FILE = createError<[preloadProperty: string]>(\n  'Invalid preload entry \"%s\". The file property must be a function',\n  'E_INVALID_PRELOAD_FILE'\n)\n\n/**\n * The exception is raised when the \"file\" property is missing\n * in the provider object\n */\nexport const E_MISSING_PROVIDER_FILE = createError<[preloadProperty: string]>(\n  'Invalid provider entry \"%s\". Missing file property',\n  'E_MISSING_PROVIDER_FILE'\n)\n\n/**\n * The exception is raised when the \"file\" property is not a function\n * in provider object\n */\nexport const E_INVALID_PROVIDER = createError<[preloadProperty: string]>(\n  'Invalid provider entry \"%s\". The file property must be a function',\n  'E_INVALID_PROVIDER'\n)\n\n/**\n * The exception is raised when the \"name\" property is missing\n * in the suite object\n */\nexport const E_MISSING_SUITE_NAME = createError<[suiteProperty: string]>(\n  'Invalid suite entry \"%s\". Missing name property',\n  'E_MISSING_SUITE_NAME'\n)\n\n/**\n * The exception is raised when the \"files\" property is missing\n * in the suite object\n */\nexport const E_MISSING_SUITE_FILES = createError<[suiteProperty: string]>(\n  'Invalid suite entry \"%s\". Missing files property',\n  'E_MISSING_SUITE_FILES'\n)\n\n/**\n * The exception is raised when the \"devServerCommand\" is missing\n * in assetsBundler object\n */\nexport const E_MISSING_BUNDLER_DEV_COMMAND = createError(\n  'Invalid assetsBundler entry. Missing devServer property',\n  'E_MISSING_BUNDLER_DEV_COMMAND'\n)\n\n/**\n * The exception is raised when the \"buildCommand\" is missing\n * in assetsBundler object\n */\nexport const E_MISSING_BUNDLER_BUILD_COMMAND = createError(\n  'Invalid assetsBundler entry. Missing build property',\n  'E_MISSING_BUNDLER_BUILD_COMMAND'\n)\n\n/**\n * The exception is raised when the \"name\" is missing\n * in assetsBundler object\n */\nexport const E_MISSING_BUNDLER_NAME = createError(\n  'Invalid assetsBundler entry. Missing name property',\n  'E_MISSING_BUNDLER_NAME'\n)\n\n/**\n * The exception is raised when the \"name\" is missing\n * in assembler.runner object\n */\nexport const E_MISSING_ASSEMBLER_RUNNER_NAME = createError(\n  'Invalid assembler.runner entry. Missing name property',\n  'E_MISSING_ASSEMBLER_RUNNER_NAME'\n)\n\n/**\n * The exception is raised when the \"command\" is missing\n * in assembler.runner object\n */\nexport const E_MISSING_ASSEMBLER_RUNNER_COMMAND = createError(\n  'Invalid assembler.runner entry. Missing command property',\n  'E_MISSING_ASSEMBLER_RUNNER_COMMAND'\n)\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { slash } from '@poppinss/utils'\nimport { extname, join } from 'node:path'\nimport string from '@poppinss/utils/string'\nimport StringBuilder from '@poppinss/utils/string_builder'\n\n/**\n * Generators used for scaffolding\n */\nconst generators = {\n  /**\n   * The given controller names will always be generated\n   * in singular form\n   */\n  singularControllerNames: [\n    'home',\n    'admin',\n    'session',\n    'application',\n    'money',\n    'signup',\n    'login',\n    'auth',\n    'authentication',\n    'adonis',\n    'adonisjs',\n    'dashboard',\n    'api',\n    'about',\n    'conatact',\n    'blog',\n  ],\n\n  /**\n   * Creates the entity path and name from the user\n   * input.\n   */\n  createEntity(entityName: string) {\n    /**\n     * Get rid of extensions\n     */\n    entityName = entityName.replace(new RegExp(`${extname(entityName)}$`), '')\n\n    /**\n     * Split to see if we are dealing with a path\n     */\n    const parts = entityName.split('/')\n\n    /**\n     * Last part is always the entity name\n     */\n    const [name] = parts.splice(-1)\n\n    /**\n     * Still have parts? Join them back\n     */\n    if (parts.length) {\n      return {\n        path: parts.join('/'),\n        name,\n      }\n    }\n\n    /**\n     * Use relative current dir\n     */\n    return {\n      path: './',\n      name,\n    }\n  },\n\n  /**\n   * Construct paths to make an import path\n   */\n  importPath(...paths: string[]) {\n    return slash(join(...paths))\n  },\n\n  /**\n   * Converts an entity name to database table name\n   */\n  tableName(entityName: string) {\n    return new StringBuilder(\n      this.modelName(new StringBuilder(entityName).removeSuffix('table').toString())\n    )\n      .plural()\n      .snakeCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to model name\n   */\n  modelName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('model')\n      .singular()\n      .pascalCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to model file name\n   */\n  modelFileName(entityName: string) {\n    return new StringBuilder(this.modelName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to a controller name\n   */\n  controllerName(entityName: string, singular: boolean = false) {\n    const controller = new StringBuilder(entityName).removeExtension().removeSuffix('controller')\n\n    if (this.singularControllerNames.includes(controller.toString().toLowerCase())) {\n      controller.singular()\n    } else if (singular) {\n      controller.singular()\n    } else {\n      controller.plural()\n    }\n\n    return controller.pascalCase().suffix('Controller').toString()\n  },\n\n  /**\n   * Converts an entity name to a controller file name\n   */\n  controllerFileName(entityName: string, singular: boolean = false) {\n    return new StringBuilder(this.controllerName(entityName, singular))\n      .snakeCase()\n      .ext('.ts')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to an event name\n   */\n  eventName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('event')\n      .pascalCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to an event file name\n   */\n  eventFileName(entityName: string) {\n    return new StringBuilder(this.eventName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to listener name\n   */\n  listenerName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('listener')\n      .pascalCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to listener file name\n   */\n  listenerFileName(entityName: string) {\n    return new StringBuilder(this.listenerName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to middleware name\n   */\n  middlewareName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('middleware')\n      .pascalCase()\n      .suffix('Middleware')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to middleware file name\n   */\n  middlewareFileName(entityName: string) {\n    return new StringBuilder(this.middlewareName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to provider name\n   */\n  providerName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('provider')\n      .singular()\n      .pascalCase()\n      .suffix('Provider')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to provider file name\n   */\n  providerFileName(entityName: string) {\n    return new StringBuilder(this.providerName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to policy name\n   */\n  policyName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('policy')\n      .removeSuffix('model')\n      .singular()\n      .pascalCase()\n      .suffix('Policy')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to policy file name\n   */\n  policyFileName(entityName: string) {\n    return new StringBuilder(this.policyName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to factory name\n   */\n  factoryName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('factory')\n      .removeSuffix('model')\n      .singular()\n      .pascalCase()\n      .suffix('Factory')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to factory file name\n   */\n  factoryFileName(entityName: string) {\n    return new StringBuilder(this.factoryName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to service name\n   */\n  serviceName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('service')\n      .removeSuffix('model')\n      .singular()\n      .pascalCase()\n      .suffix('Service')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to service file name\n   */\n  serviceFileName(entityName: string) {\n    return new StringBuilder(this.serviceName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to seeder name\n   */\n  seederName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('seeder')\n      .removeSuffix('model')\n      .singular()\n      .pascalCase()\n      .suffix('Seeder')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to seeder file name\n   */\n  seederFileName(entityName: string) {\n    return new StringBuilder(this.seederName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to command terminal name\n   */\n  commandTerminalName(entityName: string) {\n    const dashCase = new StringBuilder(this.commandName(entityName)).dashCase().toString()\n\n    const [namespace, ...rest] = dashCase.split('-')\n    if (!rest.length) {\n      return namespace\n    }\n\n    return `${namespace}:${rest.join('-')}`\n  },\n\n  /**\n   * Converts an entity name to command name\n   */\n  commandName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('command')\n      .pascalCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to command file name\n   */\n  commandFileName(entityName: string) {\n    return new StringBuilder(this.commandName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to validator name\n   */\n  validatorName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('validator')\n      .singular()\n      .pascalCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to validator action\n   * name\n   */\n  validatorActionName(entityName: string, action: string) {\n    return new StringBuilder(this.validatorName(entityName))\n      .prefix(`${action}_`)\n      .suffix('_validator')\n      .camelCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to validator file name\n   */\n  validatorFileName(entityName: string) {\n    return new StringBuilder(this.validatorName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to exception name\n   */\n  exceptionName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('exception')\n      .pascalCase()\n      .suffix('Exception')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to exception file name\n   */\n  exceptionFileName(entityName: string) {\n    return new StringBuilder(this.exceptionName(entityName)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to mailer name\n   */\n  mailerName(entityName: string, type: 'notification' | 'provision' = 'notification') {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('notification')\n      .removeSuffix('provision')\n      .removeSuffix('mailer')\n      .pascalCase()\n      .suffix(string.pascalCase(type))\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to mailer file name\n   */\n  mailerFileName(entityName: string, type: 'notification' | 'provision' = 'notification') {\n    return new StringBuilder(this.mailerName(entityName, type)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity name to class-based mail name\n   */\n  mailName(entityName: string, type: string = 'notification') {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix(type)\n      .removeSuffix('mailer')\n      .removeSuffix('mail')\n      .pascalCase()\n      .suffix(string.pascalCase(type))\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to class-name mail filename\n   */\n  mailFileName(entityName: string, type: string = 'notification') {\n    return new StringBuilder(this.mailName(entityName, type)).snakeCase().ext('.ts').toString()\n  },\n\n  /**\n   * Converts an entity to test group name\n   */\n  testGroupName(entity: { path: string; name: string }) {\n    return new StringBuilder(`${entity.path}/${entity.name}`)\n      .removeExtension()\n      .removeSuffix('.spec')\n      .sentenceCase()\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to test file name\n   */\n  testFileName(entityName: string) {\n    return new StringBuilder(entityName)\n      .removeExtension()\n      .removeSuffix('.spec')\n      .snakeCase()\n      .ext('.spec.ts')\n      .toString()\n  },\n\n  /**\n   * Converts an entity name to the view template file\n   */\n  viewFileName(entityName: string) {\n    return new StringBuilder(entityName).removeExtension().snakeCase().ext('.edge').toString()\n  },\n}\n\nexport default generators\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { inspect } from 'node:util'\nimport globParent from 'glob-parent'\nimport { ObjectBuilder } from '@poppinss/utils'\n\nimport * as errors from '../errors.js'\nimport { directories } from '../directories.js'\nimport type { AppEnvironments, MetaFileNode, PreloadNode, ProviderNode, RcFile } from '../types.js'\n\n/**\n * Rc file parser is used to parse and validate the `adonisrc.js` file contents.\n */\nexport class RcFileParser {\n  /**\n   * Defaults for the RcFile. This object initiates all\n   * the known properties\n   */\n  #defaults: RcFile = {\n    typescript: true,\n    preloads: [],\n    metaFiles: [],\n    commandsAliases: {},\n    commands: [],\n    providers: [],\n    directories: directories,\n    tests: {\n      suites: [],\n      timeout: 2000,\n      forceExit: true,\n    },\n    raw: {},\n  }\n\n  /**\n   * RcFile merged with defaults\n   */\n  #rcFile: RcFile\n\n  constructor(rcFile: Record<string, any>) {\n    this.#rcFile = Object.assign(this.#defaults, rcFile)\n    this.#rcFile.raw = rcFile\n  }\n\n  /**\n   * An array of known environments\n   */\n  #knownEnvironments(): Exclude<AppEnvironments, 'unknown'>[] {\n    return ['web', 'console', 'test', 'repl']\n  }\n\n  /**\n   * Returns the assets bundler object\n   */\n  #getAssetsBundler(): RcFile['assetsBundler'] {\n    if (this.#rcFile.assetsBundler === false) {\n      return false\n    }\n\n    if (!this.#rcFile.assetsBundler) {\n      return\n    }\n\n    if (!this.#rcFile.assetsBundler.name) {\n      throw new errors.E_MISSING_BUNDLER_NAME()\n    }\n\n    if (!this.#rcFile.assetsBundler.devServer) {\n      throw new errors.E_MISSING_BUNDLER_DEV_COMMAND()\n    }\n\n    if (!this.#rcFile.assetsBundler.build) {\n      throw new errors.E_MISSING_BUNDLER_BUILD_COMMAND()\n    }\n\n    return {\n      name: this.#rcFile.assetsBundler.name,\n      devServer: this.#rcFile.assetsBundler.devServer,\n      build: this.#rcFile.assetsBundler.build,\n    }\n  }\n\n  /**\n   * Returns the assembler object\n   */\n  #getHooks(): RcFile['hooks'] {\n    // @ts-expect-error - Keep supporting the old `unstable_assembler` property for now\n    const hooksProperty = this.#rcFile.hooks || this.#rcFile.unstable_assembler\n    if (!hooksProperty) {\n      return\n    }\n\n    return new ObjectBuilder({})\n      .add('onBuildStarting', hooksProperty.onBuildStarting)\n      .add('onBuildCompleted', hooksProperty.onBuildCompleted)\n      .add('onDevServerStarted', hooksProperty.onDevServerStarted)\n      .add('onSourceFileChanged', hooksProperty.onSourceFileChanged)\n      .toObject()\n  }\n\n  /**\n   * Returns a normalized array of preload files\n   */\n  #getPreloads(): PreloadNode[] {\n    return this.#rcFile.preloads.map((preload: PreloadNode | PreloadNode['file']) => {\n      const normalizedPreload =\n        typeof preload === 'function'\n          ? {\n              file: preload,\n              environment: this.#knownEnvironments(),\n            }\n          : preload\n\n      if (!normalizedPreload.file) {\n        throw new errors.E_MISSING_PRELOAD_FILE([inspect(preload)])\n      }\n\n      if (typeof normalizedPreload.file !== 'function') {\n        throw new errors.E_INVALID_PRELOAD_FILE([inspect(preload)])\n      }\n\n      return {\n        file: normalizedPreload.file,\n        environment: normalizedPreload.environment ?? this.#knownEnvironments(),\n      }\n    })\n  }\n\n  /**\n   * Returns a normalized array of providers\n   */\n  #getProviders(): ProviderNode[] {\n    return this.#rcFile.providers.map((provider: ProviderNode | ProviderNode['file']) => {\n      const normalizedProvider =\n        typeof provider === 'function'\n          ? {\n              file: provider,\n              environment: this.#knownEnvironments(),\n            }\n          : provider\n\n      if (!normalizedProvider.file) {\n        throw new errors.E_MISSING_PROVIDER_FILE([inspect(provider)])\n      }\n\n      if (typeof normalizedProvider.file !== 'function') {\n        throw new errors.E_INVALID_PROVIDER([inspect(provider)])\n      }\n\n      return {\n        file: normalizedProvider.file,\n        environment: normalizedProvider.environment ?? this.#knownEnvironments(),\n      }\n    })\n  }\n\n  /**\n   * Returns a nornalized array of meta files\n   */\n  #getMetaFiles(): MetaFileNode[] {\n    return this.#rcFile.metaFiles.map((pattern: MetaFileNode | string) => {\n      const normalizeMetaFile =\n        typeof pattern === 'string'\n          ? {\n              pattern: pattern,\n              reloadServer: true,\n            }\n          : pattern\n\n      if (!normalizeMetaFile.pattern) {\n        throw new errors.E_MISSING_METAFILE_PATTERN([inspect(pattern)])\n      }\n\n      return {\n        pattern: normalizeMetaFile.pattern,\n        reloadServer: normalizeMetaFile.reloadServer ?? true,\n      }\n    })\n  }\n\n  /**\n   * Returns a normalized array of test suites\n   */\n  #getSuites() {\n    const suites = this.#rcFile.tests.suites || []\n\n    return suites.map((suite) => {\n      if (!suite.name) {\n        throw new errors.E_MISSING_SUITE_NAME([inspect(suite)])\n      }\n\n      if (!suite.files) {\n        throw new errors.E_MISSING_SUITE_FILES([inspect(suite)])\n      }\n\n      const files = Array.isArray(suite.files) ? [...suite.files] : [suite.files]\n      return {\n        name: suite.name,\n        files: files,\n        directories: files.map((file) => globParent(file)),\n        timeout: suite.timeout,\n      }\n    })\n  }\n\n  /**\n   * Parse and validate file contents and merge them with defaults\n   */\n  parse(): RcFile {\n    const assembler = this.#getHooks()\n    const assetsBundler = this.#getAssetsBundler()\n\n    return {\n      typescript: this.#rcFile.typescript,\n      ...(assembler ? { hooks: assembler } : {}),\n      ...(assetsBundler !== undefined ? { assetsBundler } : {}),\n      preloads: this.#getPreloads(),\n      metaFiles: this.#getMetaFiles(),\n      commands: [...this.#rcFile.commands],\n      directories: { ...directories, ...this.#rcFile.directories },\n      commandsAliases: { ...this.#rcFile.commandsAliases },\n      providers: this.#getProviders(),\n      tests: {\n        suites: this.#getSuites(),\n        timeout: this.#rcFile.tests.timeout ?? 2000,\n        forceExit: this.#rcFile.tests.forceExit ?? true,\n      },\n      raw: this.#rcFile.raw,\n    }\n  }\n}\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { DirectoriesNode } from './types.js'\n\n/**\n * List of default directories\n */\nexport const directories: DirectoriesNode = {\n  config: 'config',\n  commands: 'commands',\n  contracts: 'contracts',\n  public: 'public',\n  providers: 'providers',\n  languageFiles: 'resources/lang',\n  migrations: 'database/migrations',\n  seeders: 'database/seeders',\n  factories: 'database/factories',\n  views: 'resources/views',\n  start: 'start',\n  tmp: 'tmp',\n  tests: 'tests',\n  httpControllers: 'app/controllers',\n  models: 'app/models',\n  services: 'app/services',\n  exceptions: 'app/exceptions',\n  mailers: 'app/mailers',\n  mails: 'app/mails',\n  middleware: 'app/middleware',\n  policies: 'app/policies',\n  validators: 'app/validators',\n  events: 'app/events',\n  listeners: 'app/listeners',\n  stubs: 'stubs',\n}\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Hooks from '@poppinss/hooks'\nimport { fileURLToPath } from 'node:url'\nimport { join, relative } from 'node:path'\nimport { Container } from '@adonisjs/fold'\nimport Macroable from '@poppinss/macroable'\nimport type { HookHandler } from '@poppinss/hooks/types'\nimport { importDefault, RuntimeException } from '@poppinss/utils'\n\nimport debug from './debug.js'\nimport generators from './generators.js'\nimport { ConfigManager } from './managers/config.js'\nimport { RcFileManager } from './managers/rc_file.js'\nimport { NodeEnvManager } from './managers/node_env.js'\nimport { PreloadsManager } from './managers/preloads.js'\nimport { ProvidersManager } from './managers/providers.js'\nimport type {\n  Importer,\n  SemverNode,\n  HooksState,\n  AppEnvironments,\n  ApplicationStates,\n} from './types.js'\n\n/**\n * Application class manages the state of an AdonisJS application. It includes\n *\n * - Setting up the base features like importing config and setting up logger.\n * - Parsing the \"adonisrc.js\" file\n * - Setting up the IoC container\n * - Registering an booting providers\n * - Invoking lifecycle methods on the providers and hooks\n */\nexport class Application<ContainerBindings extends Record<any, any>> extends Macroable {\n  /**\n   * Importer function to import modules from the application\n   * context\n   */\n  #importer?: Importer\n\n  /**\n   * Flag to know if we have started the termination\n   * process\n   */\n  #terminating: boolean = false\n\n  /**\n   * The environment in which the app is running. Currently we track\n   * pm2 only\n   */\n  #surroundedEnvironment = {\n    pm2: false,\n  }\n\n  /**\n   * Application root. The path must end with '/'\n   */\n  #appRoot: URL\n\n  /**\n   * Current application environment\n   */\n  #environment: AppEnvironments\n\n  /**\n   * Current state of the application\n   */\n  #state: ApplicationStates = 'created'\n\n  /**\n   * Managers for sub-features\n   */\n  #configManager: ConfigManager\n  #rcFileManager: RcFileManager\n  #nodeEnvManager: NodeEnvManager\n  #preloadsManager: PreloadsManager\n  #providersManager: ProvidersManager\n\n  /**\n   * Lifecycle hooks\n   */\n  #hooks = new Hooks<{\n    initiating: HooksState<ContainerBindings>\n    booting: HooksState<ContainerBindings>\n    booted: HooksState<ContainerBindings>\n    starting: HooksState<ContainerBindings>\n    ready: HooksState<ContainerBindings>\n    terminating: HooksState<ContainerBindings>\n  }>()\n\n  /**\n   * Store info metadata about the app.\n   */\n  info: Map<'appName' | 'version' | 'adonisVersion' | string, any> = new Map()\n\n  /**\n   * Returns the application name from the info map\n   */\n  get appName() {\n    return this.info.get('appName') || 'adonisjs_app'\n  }\n\n  /**\n   * Returns the application version from the info map\n   */\n  get version(): SemverNode | null {\n    return this.info.get('version') || null\n  }\n\n  /**\n   * The parsed version for the \"@adonisjs/core\" package.\n   */\n  get adonisVersion(): SemverNode | null {\n    return this.info.get('adonisVersion') || null\n  }\n\n  /**\n   * The URL for the root of the application\n   */\n  get appRoot() {\n    return this.#appRoot\n  }\n\n  /**\n   * A boolean to know if the application has been booted\n   */\n  get isBooted() {\n    return this.#state !== 'created' && this.#state !== 'initiated'\n  }\n\n  /**\n   * A boolean to know if the application is ready\n   */\n  get isReady() {\n    return this.#state === 'ready'\n  }\n\n  /**\n   * A boolean to know if the application has been terminated\n   */\n  get isTerminated() {\n    return this.#state === 'terminated'\n  }\n\n  /**\n   * A boolean to know if the application is in the middle of getting\n   * terminating\n   */\n  get isTerminating() {\n    return this.#terminating && this.#state !== 'terminated'\n  }\n\n  /**\n   * Reference to the config class. The value is defined\n   * after the \"init\" method call\n   */\n  get config() {\n    return this.#configManager.config\n  }\n\n  /**\n   * Reference to the parsed rc file. The value is defined\n   * after the \"init\" method call\n   */\n  get rcFile() {\n    return this.#rcFileManager.rcFile\n  }\n\n  /**\n   * Normalized current NODE_ENV\n   */\n  get nodeEnvironment() {\n    return this.#nodeEnvManager.nodeEnvironment\n  }\n\n  /**\n   * Return true when `this.nodeEnvironment === 'production'`\n   */\n  get inProduction(): boolean {\n    return this.nodeEnvironment === 'production'\n  }\n\n  /**\n   * Return true when `this.nodeEnvironment === 'development'`\n   */\n  get inDev(): boolean {\n    return this.nodeEnvironment === 'development'\n  }\n\n  /**\n   * Returns true when `this.nodeEnvironment === 'test'`\n   */\n  get inTest(): boolean {\n    return this.nodeEnvironment === 'test'\n  }\n\n  /**\n   * Find if the process is managed and run under\n   * pm2\n   */\n  get managedByPm2() {\n    return this.#surroundedEnvironment.pm2\n  }\n\n  /**\n   * Reference to scaffolding generators\n   */\n  get generators() {\n    return generators\n  }\n\n  /**\n   * Reference to the stubs module to scaffold\n   * resources or eject stubs\n   */\n  stubs = {\n    create: async () => {\n      const { StubsManager } = await import('./stubs/manager.js')\n      return new StubsManager(this, this.makePath(this.rcFile.directories.stubs))\n    },\n  }\n\n  /**\n   * A flag to know if VineJS provider is configured. When set\n   * to true, you may import `@vinejs/vine` package\n   */\n  usingVineJS: boolean = false\n\n  /**\n   * A flag to know if Edge provider is configured. When set\n   * to true, you may import `edge.js` package\n   */\n  usingEdgeJS: boolean = false\n\n  /**\n   * Reference to the AdonisJS IoC container. The value is defined\n   * after the \"init\" method call\n   */\n  declare container: Container<ContainerBindings>\n\n  constructor(appRoot: URL, options: { environment: AppEnvironments; importer?: Importer }) {\n    super()\n\n    this.#appRoot = appRoot\n    this.#importer = options.importer\n    this.#environment = options.environment\n    this.#nodeEnvManager = new NodeEnvManager()\n    this.#configManager = new ConfigManager(this.appRoot)\n    this.#rcFileManager = new RcFileManager(this.appRoot)\n    this.#providersManager = new ProvidersManager({\n      environment: this.#environment,\n      providersState: [this],\n    })\n    this.#preloadsManager = new PreloadsManager({\n      environment: this.#environment,\n    })\n    this.#surroundedEnvironment.pm2 = !!process.env.pm2_id\n\n    if (debug.enabled) {\n      debug('app environment :%O', {\n        pm2: this.#surroundedEnvironment.pm2,\n        environment: this.#environment,\n        nodeEnv: this.#nodeEnvManager.nodeEnvironment,\n      })\n    }\n  }\n\n  /**\n   * Instantiate the application container\n   */\n  #instantiateContainer() {\n    this.container = new Container<ContainerBindings>()\n  }\n\n  /**\n   * The current environment in which the application\n   * is running\n   */\n  getEnvironment() {\n    return this.#environment\n  }\n\n  /**\n   * Switch the environment in which the app is running. The\n   * environment can only be changed before the app is\n   * booted.\n   */\n  setEnvironment(environment: AppEnvironments): this {\n    if (this.#state !== 'created' && this.#state !== 'initiated') {\n      throw new RuntimeException('Cannot switch environment once the app has been booted')\n    }\n\n    debug('switching environment { from:\"%s\", to: \"%s\" }', this.#environment, environment)\n    this.#environment = environment\n    this.#preloadsManager.setEnvironment(environment)\n    this.#providersManager.setEnvironment(environment)\n    return this\n  }\n\n  /**\n   * The current state of the application.\n   */\n  getState() {\n    return this.#state\n  }\n\n  /**\n   * Specify the contents of the \"adonisrc.js\" file as\n   * an object. Calling this method will disable loading\n   * the \"adonisrc.js\" file from the disk.\n   */\n  rcContents(value: Record<string, any>): this {\n    this.#rcFileManager.rcContents(value)\n    return this\n  }\n\n  /**\n   * Define the config values to use when booting the\n   * config provider. Calling this method disables\n   * reading files from the config directory.\n   */\n  useConfig(values: Record<any, any>): this {\n    this.#configManager.useConfig(values)\n    return this\n  }\n\n  /**\n   * Notify the parent process when the Node.js process is spawned with an IPC channel.\n   * The arguments accepted are same as \"process.send\"\n   */\n  notify(\n    message: any,\n    sendHandle?: any,\n    options?: {\n      swallowErrors?: boolean | undefined\n      keepOpen?: boolean | undefined\n    },\n    callback?: (error: Error | null) => void\n  ) {\n    if (process.send) {\n      process.send(message, sendHandle, options, callback)\n    }\n  }\n\n  /**\n   * Listen for a process signal. This method is same as calling\n   * \"process.on(signal)\"\n   */\n  listen(signal: NodeJS.Signals, callback: NodeJS.SignalsListener): this {\n    process.on(signal, callback)\n    return this\n  }\n\n  /**\n   * Listen for a process signal once. This method is same as calling\n   * \"process.once(signal)\"\n   */\n  listenOnce(signal: NodeJS.Signals, callback: NodeJS.SignalsListener): this {\n    process.once(signal, callback)\n    return this\n  }\n\n  /**\n   * Listen for a process signal conditionally.\n   */\n  listenIf(conditional: boolean, signal: NodeJS.Signals, callback: NodeJS.SignalsListener): this {\n    if (conditional) {\n      process.on(signal, callback)\n    }\n\n    return this\n  }\n\n  /**\n   * Listen for a process signal once conditionally.\n   */\n  listenOnceIf(\n    conditional: boolean,\n    signal: NodeJS.Signals,\n    callback: NodeJS.SignalsListener\n  ): this {\n    if (conditional) {\n      process.once(signal, callback)\n    }\n\n    return this\n  }\n\n  /**\n   * Register hooks that are called before the app starts\n   * the initiating process\n   */\n  initiating(\n    handler: HookHandler<[Application<ContainerBindings>], [Application<ContainerBindings>]>\n  ): this {\n    this.#hooks.add('initiating', handler)\n    return this\n  }\n\n  /**\n   * Initiate the application. Calling this method performs following\n   * operations.\n   *\n   * - Parses the \"adonisrc.js\" file\n   * - Validate and set environment variables\n   * - Loads the application config from the configured config dir.\n   * - Configures the logger\n   * - Instantiates the IoC container\n   */\n  async init() {\n    if (this.#state !== 'created') {\n      debug('cannot initiate app from state \"%s\"', this.#state)\n      return\n    }\n\n    debug('initiating app')\n\n    /**\n     * Metadata management is not considering part\n     * of initiating the app\n     */\n    this.#instantiateContainer()\n\n    /**\n     * Notify we are about to initiate the app\n     */\n    await this.#hooks.runner('initiating').run(this)\n\n    /**\n     * Initiate essentials\n     */\n    await this.#rcFileManager.process()\n\n    /**\n     * Cleanup registered hooks\n     */\n    this.#hooks.clear('initiating')\n    this.#state = 'initiated'\n  }\n\n  /**\n   * Register hooks that are called before the app boot\n   * process starts\n   */\n  booting(\n    handler: HookHandler<[Application<ContainerBindings>], [Application<ContainerBindings>]>\n  ): this {\n    this.#hooks.add('booting', handler)\n    return this\n  }\n\n  /**\n   * Boot the application. Calling this method performs the following\n   * operations.\n   *\n   * - Resolve providers and call the \"register\" method on them.\n   * - Call the \"boot\" method on providers\n   * - Run the \"booted\" hooks\n   */\n  async boot() {\n    if (this.#state !== 'initiated') {\n      debug('cannot boot app from state \"%s\"', this.#state)\n      return\n    }\n\n    debug('booting app')\n\n    /**\n     * Execute booting hooks\n     */\n    await this.#hooks.runner('booting').run(this)\n    this.#hooks.clear('booting')\n\n    /**\n     * Process node env and config files\n     */\n    this.#nodeEnvManager.process()\n    await this.#configManager.process(this.rcFile.directories.config)\n\n    /**\n     * Boot providers\n     */\n    this.#providersManager.use(this.rcFile.providers)\n    await this.#providersManager.register()\n    await this.#providersManager.boot()\n\n    /**\n     * Notify the app is booted\n     */\n    await this.#hooks.runner('booted').run(this)\n    this.#hooks.clear('booted')\n    this.#state = 'booted'\n  }\n\n  /**\n   * Register a hook to get notified when the application has\n   * been booted.\n   *\n   * The hook will be called immediately if the app has already\n   * been booted.\n   */\n  async booted(\n    handler: HookHandler<[Application<ContainerBindings>], [Application<ContainerBindings>]>\n  ): Promise<void> {\n    if (this.isBooted) {\n      await handler(this)\n    } else {\n      this.#hooks.add('booted', handler)\n    }\n  }\n\n  /**\n   * Register hooks that are called when the app is starting\n   */\n  starting(\n    handler: HookHandler<[Application<ContainerBindings>], [Application<ContainerBindings>]>\n  ): this {\n    this.#hooks.add('starting', handler)\n    return this\n  }\n\n  /**\n   * Start the application. Calling this method performs the following\n   * operations.\n   *\n   * - Run the \"start\" lifecycle hooks on all the providers\n   * - Start the application by invoking the supplied callback\n   * - Run the \"ready\" lifecycle hooks on all the providers\n   * - Run the \"ready\" application hooks\n   */\n  async start(callback: (app: this) => void | Promise<void>) {\n    if (this.#state !== 'booted') {\n      debug('cannot start app from state \"%s\"', this.#state)\n      return\n    }\n\n    debug('starting app')\n\n    /**\n     * Pre start phase\n     */\n    await this.#providersManager.start()\n    await this.#hooks.runner('starting').run(this)\n    this.#hooks.clear('starting')\n\n    await this.#preloadsManager.use(this.rcFile.preloads).import()\n\n    /**\n     * Callback to perform start of the application\n     */\n    await callback(this)\n\n    /**\n     * Post start phase\n     */\n    await this.#providersManager.ready()\n    await this.#hooks.runner('ready').run(this)\n    this.#hooks.clear('ready')\n\n    /**\n     * App ready\n     */\n    this.#state = 'ready'\n\n    /**\n     * Notify process is ready\n     */\n    debug('application ready')\n    this.notify('ready')\n  }\n\n  /**\n   * Register hooks that are called when the app is\n   * ready\n   */\n  async ready(\n    handler: HookHandler<[Application<ContainerBindings>], [Application<ContainerBindings>]>\n  ): Promise<void> {\n    if (this.isReady) {\n      await handler(this)\n    } else {\n      this.#hooks.add('ready', handler)\n    }\n  }\n\n  /**\n   * Register hooks that are called before the app is\n   * terminated.\n   */\n  terminating(\n    handler: HookHandler<[Application<ContainerBindings>], [Application<ContainerBindings>]>\n  ): this {\n    this.#hooks.add('terminating', handler)\n    return this\n  }\n\n  /**\n   * Terminate application gracefully. Calling this method performs\n   * the following operations.\n   *\n   * - Run \"shutdown\" hooks on all the providers\n   * - Run \"terminating\" app lifecycle hooks\n   */\n  async terminate() {\n    if (this.#state === 'created' || this.#state === 'terminated') {\n      debug('cannot terminate app from state \"%s\"', this.#state)\n      return\n    }\n\n    debug('terminating app')\n    this.#terminating = true\n    await this.#hooks.runner('terminating').run(this)\n    await this.#providersManager.shutdown()\n    this.#hooks.clear('terminating')\n    this.#state = 'terminated'\n  }\n\n  /**\n   * Returns relative path to a file from the app root\n   */\n  relativePath(absolutePath: string) {\n    return relative(fileURLToPath(this.appRoot), absolutePath)\n  }\n\n  /**\n   * Returns URL to a path from the application root.\n   */\n  makeURL(...paths: string[]): URL {\n    return new URL(join(...paths), this.#appRoot)\n  }\n\n  /**\n   * Returns file system path from the application root.\n   */\n  makePath(...paths: string[]): string {\n    return fileURLToPath(this.makeURL(...paths))\n  }\n\n  /**\n   * Makes path to the config directory\n   */\n  configPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.config, ...paths)\n  }\n\n  /**\n   * Makes path to the public directory\n   */\n  publicPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.public, ...paths)\n  }\n\n  /**\n   * Makes path to the providers directory\n   */\n  providersPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.providers, ...paths)\n  }\n\n  /**\n   * Makes path to the factories directory\n   */\n  factoriesPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.factories, ...paths)\n  }\n\n  /**\n   * Makes path to the migrations directory\n   */\n  migrationsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.migrations, ...paths)\n  }\n\n  /**\n   * Makes path to the seeders directory\n   */\n  seedersPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.seeders, ...paths)\n  }\n\n  /**\n   * Makes path to the language files directory\n   */\n  languageFilesPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.languageFiles, ...paths)\n  }\n\n  /**\n   * Makes path to the views directory\n   */\n  viewsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.views, ...paths)\n  }\n\n  /**\n   * Makes path to the start directory\n   */\n  startPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.start, ...paths)\n  }\n\n  /**\n   * Makes path to the tmp directory\n   */\n  tmpPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.tmp, ...paths)\n  }\n\n  /**\n   * Makes path to the contracts directory\n   * @deprecated\n   */\n  contractsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.contracts, ...paths)\n  }\n\n  /**\n   * Makes path to the http controllers directory\n   */\n  httpControllersPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.httpControllers, ...paths)\n  }\n\n  /**\n   * Makes path to the models directory\n   */\n  modelsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.models, ...paths)\n  }\n\n  /**\n   * Makes path to the services directory\n   */\n  servicesPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.services, ...paths)\n  }\n\n  /**\n   * Makes path to the exceptions directory\n   */\n  exceptionsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.exceptions, ...paths)\n  }\n\n  /**\n   * Makes path to the mailers directory\n   */\n  mailersPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.mailers, ...paths)\n  }\n\n  /**\n   * Makes path to the mails directory\n   */\n  mailsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.mails, ...paths)\n  }\n\n  /**\n   * Makes path to the middleware directory\n   */\n  middlewarePath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.middleware, ...paths)\n  }\n\n  /**\n   * Makes path to the policies directory\n   */\n  policiesPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.policies, ...paths)\n  }\n\n  /**\n   * Makes path to the validators directory\n   */\n  validatorsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.validators, ...paths)\n  }\n\n  /**\n   * Makes path to the commands directory\n   */\n  commandsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.commands, ...paths)\n  }\n\n  /**\n   * Makes path to the events directory\n   */\n  eventsPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.events, ...paths)\n  }\n\n  /**\n   * Makes path to the listeners directory\n   */\n  listenersPath(...paths: string[]): string {\n    return this.makePath(this.rcFile.directories.listeners, ...paths)\n  }\n\n  /**\n   * Import a module by identifier. This method uses the importer function\n   * defined at the time of creating the application instance and throws\n   * an error if no importer was defined.\n   */\n  import(moduleIdentifier: string) {\n    if (!this.#importer) {\n      throw new RuntimeException(\n        `Cannot import \"${moduleIdentifier}\". Register a module importer with the application first.`\n      )\n    }\n    return this.#importer(moduleIdentifier)\n  }\n\n  /**\n   * Import a module by identifier. This method uses the importer function\n   * defined at the time of creating the application instance and throws\n   * an error if no importer was defined.\n   */\n  importDefault<T extends object>(moduleIdentifier: string) {\n    if (!this.#importer) {\n      throw new RuntimeException(\n        `Cannot import \"${moduleIdentifier}\". Register a module importer with the application first.`\n      )\n    }\n\n    return importDefault<T>(() => this.#importer!(moduleIdentifier))\n  }\n\n  /**\n   * JSON representation of the application\n   */\n  toJSON() {\n    return {\n      isReady: this.isReady,\n      isTerminating: this.isTerminating,\n      environment: this.#environment,\n      nodeEnvironment: this.nodeEnvironment,\n      appName: this.appName,\n      version: this.version ? this.version.toString() : null,\n      adonisVersion: this.adonisVersion ? this.adonisVersion.toString() : null,\n    }\n  }\n}\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Config, ConfigLoader } from '@adonisjs/config'\nimport debug from '../debug.js'\n\n/**\n * Env manager is used to load, parse, validate and set environment\n * variables.\n */\nexport class ConfigManager {\n  #appRoot: URL\n\n  /**\n   * Config tree set explicitly\n   */\n  #configValues?: Record<any, any>\n\n  /**\n   * Reference to the config class. The value is defined\n   * after the \"init\" method call\n   */\n  config!: Config\n\n  constructor(appRoot: URL) {\n    this.#appRoot = appRoot\n  }\n\n  /**\n   * Define the config values to use when booting the\n   * config provider. Calling this method disables\n   * reading files from the config directory.\n   */\n  useConfig(values: Record<any, any>): this {\n    this.#configValues = values\n    return this\n  }\n\n  /**\n   * Process config values.\n   */\n  async process(configDirectory: string) {\n    if (this.#configValues) {\n      this.config = new Config(this.#configValues)\n    } else {\n      const loader = new ConfigLoader(new URL(configDirectory, this.#appRoot))\n      debug('loading config from directory \"%s\"', configDirectory)\n      this.config = new Config(await loader.load())\n    }\n\n    this.#configValues = undefined\n  }\n}\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport debug from '../debug.js'\nimport type { RcFile } from '../types.js'\nimport { RcFileParser } from '../rc_file/parser.js'\n\n/**\n * RcFileManager is used to process the raw contents or the contents\n * of \"adonisrc.js\" file.\n */\nexport class RcFileManager {\n  #appRoot: URL\n\n  /**\n   * RcFile contents set explicitly\n   */\n  #rcContents?: Record<string, any>\n\n  /**\n   * Reference to the parsed rc file. The value is defined\n   * after the \"init\" method call\n   */\n  rcFile!: RcFile\n\n  constructor(appRoot: URL) {\n    this.#appRoot = appRoot\n  }\n\n  /**\n   * Specify the contents of the \"adonisrc.js\" file as\n   * an object. Calling this method will disable loading\n   * the \"adonisrc.js\" file from the disk.\n   */\n  rcContents(value: Record<string, any>): this {\n    this.#rcContents = value\n    return this\n  }\n\n  /**\n   * Process the contents for the rcFile\n   */\n  async process() {\n    if (!this.#rcContents) {\n      const rcTSFile = new URL('adonisrc.js', this.#appRoot)\n\n      try {\n        const rcExports = await import(rcTSFile.href)\n        this.#rcContents = rcExports.default\n        debug('adonisrc.ts file contents: %O', this.#rcContents)\n      } catch (error) {\n        if (!/Cannot find module/.test(error.message)) {\n          throw error\n        }\n      }\n    }\n\n    this.rcFile = new RcFileParser(this.#rcContents!).parse()\n    this.#rcContents = undefined\n  }\n}\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Aliases for different environments\n */\nconst TEST_ENVS = ['test', 'testing']\nconst PROD_ENVS = ['prod', 'production']\nconst DEV_ENVS = ['dev', 'develop', 'development']\n\n/**\n * NodeEnvManager is used to extract a normalized node environment by\n * inspect the \"process.env.NODE_ENV\".\n *\n * - The \"test\" and \"testing\" envs are normalized to \"test\"\n * - The \"prod\" and \"production\" envs are normalized to \"production\"\n * - The \"dev\", \"develop\", and \"development\" envs are normalized to \"development\"\n */\nexport class NodeEnvManager {\n  nodeEnvironment: 'unknown' | 'development' | 'production' | 'test' | string = 'unknown'\n\n  /**\n   * Normalizes node env\n   */\n  #normalizeNodeEnv(env?: string) {\n    if (!env || typeof env !== 'string') {\n      return 'unknown'\n    }\n\n    env = env.toLowerCase()\n    if (DEV_ENVS.includes(env)) {\n      return 'development'\n    }\n\n    if (PROD_ENVS.includes(env)) {\n      return 'production'\n    }\n\n    if (TEST_ENVS.includes(env)) {\n      return 'test'\n    }\n\n    return env\n  }\n\n  /**\n   * Capture the current node env\n   */\n  process() {\n    this.nodeEnvironment = this.#normalizeNodeEnv(process.env.NODE_ENV)\n  }\n}\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport debug from '../debug.js'\nimport type { AppEnvironments, PreloadNode } from '../types.js'\n\n/**\n * The PreloadsManager class is used to resolve and import preload modules.\n *\n * The class relies on \"import.meta.resolve\" to resolve the provider modules from\n * the root of the application.\n */\nexport class PreloadsManager {\n  /**\n   * List of registered preloads\n   */\n  #list: PreloadNode[] = []\n\n  /**\n   * The options accepted by the manager.\n   */\n  #options: {\n    environment: AppEnvironments\n  }\n\n  constructor(options: { environment: AppEnvironments }) {\n    this.#options = options\n  }\n\n  /**\n   * Filters the preload modules by the current environment.\n   */\n  #filterByEnvironment(provider: PreloadNode) {\n    if (this.#options.environment === 'unknown') {\n      return false\n    }\n\n    return provider.environment.includes(this.#options.environment)\n  }\n\n  /**\n   * Pass an array of preload modules to import\n   */\n  use(list: PreloadNode[]): this {\n    this.#list = list\n    return this\n  }\n\n  /**\n   * Switch the environment in which the app is running.\n   */\n  setEnvironment(environment: AppEnvironments): this {\n    debug(\n      'switching environment for preloads { from:\"%s\", to: \"%s\" }',\n      this.#options.environment,\n      environment\n    )\n    this.#options.environment = environment\n    return this\n  }\n\n  /**\n   * Import preload files\n   */\n  async import() {\n    const preloads = this.#list.filter((preload) => this.#filterByEnvironment(preload))\n    debug('preloading modules %O', preloads)\n\n    await Promise.all(preloads.map((preload) => preload.file()))\n\n    this.#list = []\n  }\n}\n","/*\n * @adonisjs/application\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { RuntimeException } from '@poppinss/utils'\n\nimport debug from '../debug.js'\nimport type { ProviderNode, AppEnvironments, ContainerProviderContract } from '../types.js'\n\n/**\n * The ProvidersManager class is used to resolve, import and execute lifecycle\n * methods on registered providers.\n *\n * The class relies on \"import.meta.resolve\" to resolve the provider modules from\n * the root of the application.\n *\n * Also, a single instance of the provider is used to executed all the hooks.\n */\nexport class ProvidersManager {\n  /**\n   * An array of collected providers\n   */\n  #providers: ContainerProviderContract[] = []\n\n  /**\n   * An array of providers with the `shutdown` method. We release the\n   * values from the providers array and only keep the once with\n   * shutdown method\n   */\n  #providersWithShutdownListeners: ContainerProviderContract[] = []\n\n  /**\n   * An array of providers modules picked from the \".adonisrc.ts\"\n   * file.\n   */\n  #list: ProviderNode[] = []\n\n  /**\n   * The options accepted by the manager\n   */\n  #options: {\n    environment: AppEnvironments\n    providersState: any[]\n  }\n\n  constructor(options: { environment: AppEnvironments; providersState: any[] }) {\n    this.#options = options\n  }\n\n  /**\n   * Filters the providers by the current environment.\n   */\n  #filterByEnvironment(provider: ProviderNode) {\n    if (this.#options.environment === 'unknown') {\n      return false\n    }\n\n    return provider.environment.includes(this.#options.environment)\n  }\n\n  /**\n   * Check if value is a class\n   */\n  #isAClass(providerClass: any) {\n    return typeof providerClass === 'function' && providerClass.toString().startsWith('class ')\n  }\n\n  /**\n   * Imports all providers from the registered module path. The method relies\n   * on --experimental-import-meta-resolve flag to resolve paths from\n   * the app root.\n   */\n  async #resolveProvider(provider: ProviderNode): Promise<{\n    new (...args: any[]): ContainerProviderContract\n  } | null> {\n    const providerExports = await provider.file()\n    const exportsLength = Object.keys(providerExports).length\n\n    /**\n     * Return null when there are no exports\n     */\n    if (exportsLength === 0) {\n      return null\n    }\n\n    /**\n     * If there are exports and not a default export, then we consider\n     * it to be an invalid provider\n     */\n    if (!providerExports.default) {\n      throw new RuntimeException(\n        `Invalid exports from \"${provider.file.toString()}\" provider. It must have a default export`\n      )\n    }\n\n    /**\n     * If the default export is not a class, then also we consider it\n     * to be an invalid provider\n     */\n    if (!this.#isAClass(providerExports.default)) {\n      throw new RuntimeException(\n        `Default export from module \"${provider.file.toString()}\" is not a class`\n      )\n    }\n\n    return providerExports.default\n  }\n\n  /**\n   * Resolves all providers from the supplied list of module paths.\n   */\n  #resolve() {\n    const providers = this.#list.filter((provider) => this.#filterByEnvironment(provider))\n    debug('loading providers %O', providers)\n\n    return Promise.all(providers.map((provider) => this.#resolveProvider(provider)))\n  }\n\n  /**\n   * Pass an array of providers to use\n   */\n  use(list: ProviderNode[]): this {\n    this.#list = list\n    return this\n  }\n\n  /**\n   * Switch the environment in which the app is running.\n   */\n  setEnvironment(environment: AppEnvironments): this {\n    debug(\n      'switching environment for providers { from:\"%s\", to: \"%s\" }',\n      this.#options.environment,\n      environment\n    )\n    this.#options.environment = environment\n    return this\n  }\n\n  /**\n   * Invoke register method on the providers.\n   */\n  async register() {\n    const providers = await this.#resolve()\n    this.#list = []\n\n    providers.forEach((provider) => {\n      if (provider) {\n        const providerInstance = new provider(...this.#options.providersState)\n        this.#providers.push(providerInstance)\n\n        if (providerInstance.shutdown) {\n          this.#providersWithShutdownListeners.push(providerInstance)\n        }\n\n        if (providerInstance.register) {\n          providerInstance.register()\n        }\n      }\n    })\n  }\n\n  /**\n   * Invoke boot method on the providers. The existing providers\n   * instances are used.\n   */\n  async boot() {\n    for (let provider of this.#providers) {\n      if (provider.boot) {\n        await provider.boot()\n      }\n    }\n  }\n\n  /**\n   * Invoke start method on all the providers\n   */\n  async start() {\n    for (let provider of this.#providers) {\n      if (provider.start) {\n        await provider.start()\n      }\n    }\n  }\n\n  /**\n   * Invoke ready method on all the providers\n   */\n  async ready() {\n    for (let provider of this.#providers) {\n      if (provider.ready) {\n        await provider.ready()\n      }\n    }\n\n    this.#providers = []\n  }\n\n  /**\n   * Invoke shutdown method on all the providers\n   */\n  async shutdown() {\n    for (let provider of this.#providersWithShutdownListeners) {\n      if (provider.shutdown) {\n        await provider.shutdown()\n      }\n    }\n\n    this.#providersWithShutdownListeners = []\n  }\n}\n"],"mappings":"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","names":["join","RuntimeException","RuntimeException","join"]}