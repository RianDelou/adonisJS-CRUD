{"version":3,"sources":["../../factories/hash_manager.ts"],"sourcesContent":["/*\n * @adonisjs/hash\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { HashManager } from '../index.js'\nimport { Scrypt } from '../src/drivers/scrypt.js'\nimport { ManagerDriverFactory } from '../src/types.js'\n\ntype Config<KnownHashers extends Record<string, ManagerDriverFactory>> = {\n  default?: keyof KnownHashers\n  list: KnownHashers\n}\n\n/**\n * Hash manager factory is used to create an instance of hash manager\n * for testing\n */\nexport class HashManagerFactory<\n  KnownHashers extends Record<string, ManagerDriverFactory> = {\n    scrypt: () => Scrypt\n  },\n> {\n  /**\n   * Config accepted by hash manager\n   */\n  readonly #config: Config<KnownHashers>\n\n  constructor(config?: { default?: keyof KnownHashers; list: KnownHashers }) {\n    this.#config =\n      config ||\n      ({\n        default: 'scrypt',\n        list: {\n          scrypt: () => new Scrypt({}),\n        },\n      } as unknown as Config<KnownHashers>)\n  }\n\n  /**\n   * Merge factory parameters\n   */\n  merge<Hashers extends Record<string, ManagerDriverFactory>>(\n    config: Config<Hashers>\n  ): HashManagerFactory<Hashers> {\n    return new HashManagerFactory(config)\n  }\n\n  /**\n   * Create hash manager instance\n   */\n  create() {\n    return new HashManager<KnownHashers>(this.#config)\n  }\n}\n"],"mappings":";;;;;;;;;;;AAsBO,IAAM,qBAAN,MAAM,oBAIX;AAAA;AAAA;AAAA;AAAA,EAIS;AAAA,EAET,YAAY,QAA+D;AACzE,SAAK,UACH,UACC;AAAA,MACC,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,QAAQ,MAAM,IAAI,OAAO,CAAC,CAAC;AAAA,MAC7B;AAAA,IACF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MACE,QAC6B;AAC7B,WAAO,IAAI,oBAAmB,MAAM;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,WAAO,IAAI,YAA0B,KAAK,OAAO;AAAA,EACnD;AACF;","names":[]}