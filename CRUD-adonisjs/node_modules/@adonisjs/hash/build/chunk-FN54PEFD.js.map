{"version":3,"sources":["../src/hash.ts","../src/hash_manager.ts","../src/debug.ts","../src/drivers/fake.ts"],"sourcesContent":["/*\n * @adonisjs/hash\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { AssertionError } from 'node:assert'\nimport type { HashDriverContract } from './types.js'\n\n/**\n * Hash and verify values using a dedicated hash driver. The Hash\n * works as an adapter across different drivers.\n *\n * ```ts\n * const hash = new Hash(new Argon())\n * const hashedPassword = await hash.make('secret')\n *\n * const isValid = await hash.verify(hashedPassword, 'secret')\n * console.log(isValid)\n * ```\n */\nexport class Hash implements HashDriverContract {\n  #driver: HashDriverContract\n  constructor(driver: HashDriverContract) {\n    this.#driver = driver\n  }\n\n  /**\n   * Check if the value is a valid hash. This method just checks\n   * for the formatting of the hash\n   */\n  isValidHash(value: string): boolean {\n    return this.#driver.isValidHash(value)\n  }\n\n  /**\n   * Hash plain text value\n   */\n  make(value: string): Promise<string> {\n    return this.#driver.make(value)\n  }\n\n  /**\n   * Verify the plain text value against an existing hash\n   */\n  verify(hashedValue: string, plainValue: string): Promise<boolean> {\n    return this.#driver.verify(hashedValue, plainValue)\n  }\n\n  /**\n   * Find if the hash value needs a rehash or not.\n   */\n  needsReHash(hashedValue: string): boolean {\n    return this.#driver.needsReHash(hashedValue)\n  }\n\n  /**\n   * Assert the plain value passes the hash verification\n   */\n  async assertEquals(hashedValue: string, plainValue: string): Promise<void> {\n    const isEqual = await this.#driver.verify(hashedValue, plainValue)\n    if (!isEqual) {\n      throw new AssertionError({\n        message: `Expected \"${plainValue}\" to pass hash verification`,\n        expected: true,\n        actual: false,\n        operator: 'strictEqual',\n        stackStartFn: this.assertEquals,\n      })\n    }\n  }\n\n  /**\n   * Assert the plain value fails the hash verification\n   */\n  async assertNotEquals(hashedValue: string, plainValue: string): Promise<void> {\n    const isEqual = await this.#driver.verify(hashedValue, plainValue)\n    if (isEqual) {\n      throw new AssertionError({\n        message: `Expected \"${plainValue}\" to fail hash verification`,\n        expected: false,\n        actual: true,\n        operator: 'strictEqual',\n        stackStartFn: this.assertNotEquals,\n      })\n    }\n  }\n}\n","/*\n * @adonisjs/hash\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { RuntimeException } from '@poppinss/utils'\n\nimport debug from './debug.js'\nimport { Hash } from './hash.js'\nimport { Fake } from './drivers/fake.js'\nimport type { HashDriverContract, ManagerDriverFactory } from './types.js'\n\n/**\n * HashManager implements the manager/builder pattern to create a use multiple\n * hashing algorithm without self managing hash instance.\n *\n * ```ts\n * const manager = new HashManager({\n *   default: 'argon',\n *   list: {\n *     argon: () => new ArgonDriver(),\n *     bcrypt: () => new BcryptDriver(),\n *   }\n * })\n * ```\n */\nexport class HashManager<KnownHashers extends Record<string, ManagerDriverFactory>>\n  implements HashDriverContract\n{\n  /**\n   * Fake hasher\n   */\n  #fakeHasher?: Hash\n\n  /**\n   * Cache of hashers\n   */\n  #hashersCache: Partial<Record<keyof KnownHashers, Hash>> = {}\n\n  constructor(public config: { default?: keyof KnownHashers; list: KnownHashers }) {\n    debug('creating hash manager. config: %O', this.config)\n  }\n\n  /**\n   * Use one of the registered hashers to hash values.\n   *\n   * ```ts\n   * manager.use() // returns default hasher\n   * manager.use('argon')\n   * ```\n   */\n  use<Hasher extends keyof KnownHashers>(hasher?: Hasher): Hash {\n    let hasherToUse: keyof KnownHashers | undefined = hasher || this.config.default\n    if (!hasherToUse) {\n      throw new RuntimeException(\n        'Cannot create hash instance. No default hasher is defined in the config'\n      )\n    }\n\n    /**\n     * Use fake hasher if exists\n     */\n    if (this.#fakeHasher) {\n      return this.#fakeHasher\n    }\n\n    /**\n     * Use cached copy if exists\n     */\n    const cachedHasher = this.#hashersCache[hasherToUse]\n    if (cachedHasher) {\n      debug('using hasher from cache. name: \"%s\"', hasherToUse)\n      return cachedHasher\n    }\n\n    const driverFactory = this.config.list[hasherToUse]\n\n    /**\n     * Create a new instance of Hash class with the selected\n     * driver and cache it\n     */\n    debug('creating hash driver. name: \"%s\"', hasherToUse)\n    const hash = new Hash(driverFactory())\n    this.#hashersCache[hasherToUse] = hash\n    return hash\n  }\n\n  /**\n   * Fake hash drivers to disable hashing values\n   */\n  fake(): void {\n    debug('enabling fakes')\n\n    if (!this.#fakeHasher) {\n      this.#fakeHasher = new Hash(new Fake())\n    }\n  }\n\n  /**\n   * Restore fake\n   */\n  restore() {\n    debug('restoring fakes')\n    this.#fakeHasher = undefined\n  }\n\n  /**\n   * Check if the value is a valid hash. This method just checks\n   * for the formatting of the hash\n   */\n  isValidHash(value: string): boolean {\n    return this.use().isValidHash(value)\n  }\n\n  /**\n   * Hash plain text value\n   */\n  make(value: string): Promise<string> {\n    return this.use().make(value)\n  }\n\n  /**\n   * Verify the plain text value against an existing hash\n   */\n  verify(hashedValue: string, plainValue: string): Promise<boolean> {\n    return this.use().verify(hashedValue, plainValue)\n  }\n\n  /**\n   * Find if the hash value needs a rehash or not.\n   */\n  needsReHash(hashedValue: string): boolean {\n    return this.use().needsReHash(hashedValue)\n  }\n\n  /**\n   * Assert the plain value passes the hash verification\n   */\n  async assertEquals(hashedValue: string, plainValue: string): Promise<void> {\n    return this.use().assertEquals(hashedValue, plainValue)\n  }\n\n  /**\n   * Assert the plain value fails the hash verification\n   */\n  async assertNotEquals(hashedValue: string, plainValue: string): Promise<void> {\n    return this.use().assertNotEquals(hashedValue, plainValue)\n  }\n}\n","/*\n * @adonisjs/hash\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\nexport default debuglog('adonisjs:hash')\n","/*\n * @adonisjs/hash\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HashDriverContract } from '../types.js'\n\n/**\n * The fake implementation does not generate any hash and\n * performs verification using the plain text equality\n * check.\n *\n * The fake driver is useful for testing.\n */\nexport class Fake implements HashDriverContract {\n  /**\n   * Always returns true\n   */\n  isValidHash(_: string): boolean {\n    return true\n  }\n\n  /**\n   * Returns the value as it is\n   */\n  async make(value: string) {\n    return value\n  }\n\n  /**\n   * Checks the hash and the plain text value using\n   * equality check\n   */\n  async verify(hashedValue: string, plainValue: string): Promise<boolean> {\n    return hashedValue === plainValue\n  }\n\n  /**\n   * Always returns false\n   */\n  needsReHash(_: string): boolean {\n    return false\n  }\n}\n"],"mappings":"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","names":[]}