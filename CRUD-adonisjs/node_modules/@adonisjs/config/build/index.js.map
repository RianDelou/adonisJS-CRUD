{"version":3,"sources":["../src/config.ts","../src/loader.ts"],"sourcesContent":["/*\n * @adonisjs/config\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport lodash from '@poppinss/utils/lodash'\n\n/**\n * Config module eases the process of using configuration inside your AdonisJS\n * applications.\n *\n * The config files are stored inside a dedicated directory, which are loaded and cached\n * on application boot. Later you can access the values using the `dot` syntax.\n *\n * ## Access values\n *\n * 1. **Given the config file is stored as `config/app.ts` with following content**\n *\n * ```js\n * module.exports = {\n *  appKey: ''\n * }\n * ```\n *\n * 2. **You access the appKey as follows**\n *\n * ```js\n * const config = new Config(configTree)\n * config.get('app.appKey')\n * ```\n */\nexport class Config {\n  #config: Record<any, any>\n\n  constructor(config: Record<any, any> = {}) {\n    this.#config = config\n  }\n\n  /**\n   * Get a tree of config imported from the config directory\n   */\n  all() {\n    return this.#config\n  }\n\n  /**\n   * Check if config value exists for a given key\n   *\n   * ```ts\n   * config.has('database.mysql')\n   * ```\n   */\n  has(key: string): boolean {\n    return lodash.has(this.#config, key)\n  }\n\n  /**\n   * Read value from the config. Make use of the `dot notation`\n   * syntax to read nested values.\n   *\n   * The `defaultValue` is returned when the original value\n   * is `undefined`.\n   *\n   * ```ts\n   * config.get('database.mysql')\n   * ```\n   */\n  get<T>(key: string, defaultValue?: any): T {\n    return lodash.get(this.#config, key, defaultValue)\n  }\n\n  /**\n   * Define defaults for a config key. The defaults are merged\n   * with the value of the config key.\n   */\n  defaults(key: string, value: any): void {\n    const existingValue = this.get(key)\n    if (existingValue !== undefined) {\n      lodash.mergeWith(value, existingValue)\n    }\n\n    this.set(key, value)\n  }\n\n  /**\n   * Update value for a key. No changes are made on the disk\n   *\n   * ```ts\n   * config.set('database.host', '127.0.0.1')\n   * ```\n   */\n  set(key: string, value: any): void {\n    lodash.set(this.#config, key, value)\n  }\n}\n","/*\n * @adonisjs/config\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { fsImportAll } from '@poppinss/utils'\n\n/**\n * The config loader imports all the script files from a given directory\n * and returns their exports as a tree of objects.\n *\n * Following file extensions are considered script files.\n *\n * - .js\n * - .ts (without .d.ts)\n * - .json\n * - .cjs\n * - .mjs\n */\nexport class ConfigLoader {\n  #appRoot: string | URL\n\n  constructor(appRoot: string | URL) {\n    this.#appRoot = appRoot\n  }\n\n  /**\n   * Load config files as a tree from a given path.\n   */\n  load() {\n    return fsImportAll(this.#appRoot, {\n      ignoreMissingRoot: true,\n    })\n  }\n}\n"],"mappings":";AASA,OAAO,YAAY;AA0BZ,IAAM,SAAN,MAAa;AAAA,EAClB;AAAA,EAEA,YAAY,SAA2B,CAAC,GAAG;AACzC,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM;AACJ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,KAAsB;AACxB,WAAO,OAAO,IAAI,KAAK,SAAS,GAAG;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,IAAO,KAAa,cAAuB;AACzC,WAAO,OAAO,IAAI,KAAK,SAAS,KAAK,YAAY;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,KAAa,OAAkB;AACtC,UAAM,gBAAgB,KAAK,IAAI,GAAG;AAClC,QAAI,kBAAkB,QAAW;AAC/B,aAAO,UAAU,OAAO,aAAa;AAAA,IACvC;AAEA,SAAK,IAAI,KAAK,KAAK;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,KAAa,OAAkB;AACjC,WAAO,IAAI,KAAK,SAAS,KAAK,KAAK;AAAA,EACrC;AACF;;;ACzFA,SAAS,mBAAmB;AAcrB,IAAM,eAAN,MAAmB;AAAA,EACxB;AAAA,EAEA,YAAY,SAAuB;AACjC,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO;AACL,WAAO,YAAY,KAAK,UAAU;AAAA,MAChC,mBAAmB;AAAA,IACrB,CAAC;AAAA,EACH;AACF;","names":[]}