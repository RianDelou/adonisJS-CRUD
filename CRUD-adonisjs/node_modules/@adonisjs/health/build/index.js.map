{"version":3,"sources":["../src/result.ts","../src/base_check.ts","../src/debug.ts","../src/health_checks.ts","../src/checks/rss.ts","../src/checks/heap.ts","../src/checks/disk_space.ts"],"sourcesContent":["/*\n * @adonisjs/health\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HealthCheckResult } from './types.js'\n\n/**\n * The result class offers a chainable API to create\n * HealthCheckResult\n */\nexport class Result implements HealthCheckResult {\n  /**\n   * Create result for success status\n   */\n  static ok(message: string): Result {\n    return new Result(message, 'ok', new Date())\n  }\n\n  /**\n   * Create result for failed status\n   */\n  static failed(message: string, error?: Error): Result\n  static failed(error: Error): Result\n  static failed(message: string | Error, error?: Error): Result {\n    const result = new Result(\n      typeof message === 'string' ? message : message.message,\n      'error',\n      new Date()\n    )\n\n    if (error) {\n      result.setMetaData({ error })\n    }\n\n    if (typeof message !== 'string') {\n      result.setMetaData({ error: message })\n    }\n\n    return result\n  }\n\n  /**\n   * Create result for warning status\n   */\n  static warning(message: string) {\n    return new Result(message, 'warning', new Date())\n  }\n\n  declare meta?: HealthCheckResult['meta']\n\n  constructor(\n    public message: string,\n    public status: HealthCheckResult['status'],\n    public finishedAt: Date\n  ) {}\n\n  /**\n   * Update the finished at timestamp for the result\n   */\n  setFinishedAt(finishedAt: Date) {\n    this.finishedAt = finishedAt\n    return this\n  }\n\n  /**\n   * Define custom meta-data for the result. Calling this method will\n   * override the existing meta-data\n   */\n  setMetaData(metaData: Record<string, any>) {\n    this.meta = metaData\n    return this\n  }\n\n  /**\n   * Merge custom meta-data with the existing meta-data. A shallow\n   * merge is performed\n   */\n  mergeMetaData(metaData: Record<string, any>) {\n    this.meta = { ...this.meta, ...metaData }\n    return this\n  }\n\n  toJSON(): HealthCheckResult {\n    return {\n      finishedAt: this.finishedAt,\n      message: this.message,\n      status: this.status,\n      ...(this.meta ? { meta: this.meta } : {}),\n    }\n  }\n}\n","/*\n * @adonisjs/health\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport stringHelpers from '@poppinss/utils/string'\nimport type { HealthCheckContract, HealthCheckResult } from './types.js'\n\n/**\n * BaseCheck with shared affordances to define a custom health\n * check\n */\nexport abstract class BaseCheck implements HealthCheckContract {\n  declare abstract name: string\n  declare cacheDuration?: number\n\n  /**\n   * Define a custom unique name for the check\n   */\n  as(name: string): this {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Specify the duration for which the check should be\n   * cached for\n   */\n  cacheFor(duration: string | number) {\n    this.cacheDuration = stringHelpers.seconds.parse(duration)\n    return this\n  }\n\n  abstract run(): Promise<HealthCheckResult>\n}\n","/*\n * @adonisjs/health\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\n\nexport default debuglog('adonisjs:health')\n","/*\n * @adonisjs/health\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport debug from './debug.js'\nimport { HealthCheckContract, HealthCheckReport, HealthCheckResult } from './types.js'\n\n/**\n * The HealthChecks acts as a repository and a runner to register/execute\n * health checks.\n */\nexport class HealthChecks {\n  /**\n   * Registered health checks\n   */\n  #checks: HealthCheckContract[] = []\n\n  /**\n   * The cachedResults map is used to keep the results of a given\n   * health check (only if caching for that check is enabled).\n   */\n  #cachedResults: Map<string, HealthCheckResult> = new Map()\n\n  /**\n   * Executes the check and respects the caching layer as well\n   */\n  async #runCheck(\n    check: HealthCheckContract\n  ): Promise<HealthCheckResult & { name: string; isCached: boolean }> {\n    if (check.cacheDuration) {\n      const cachedResult = this.#cachedResults.get(check.name)\n      const cacheMilliseconds = Math.floor(check.cacheDuration * 1000)\n\n      /**\n       * Return cached result when cache is fresh\n       */\n      if (cachedResult && Date.now() < cachedResult.finishedAt.getTime() + cacheMilliseconds) {\n        debug('returning cached results for \"%s\" check', check.name, cachedResult)\n        return {\n          name: check.name,\n          isCached: true,\n          ...cachedResult,\n        }\n      }\n\n      /**\n       * Run check and cache result\n       */\n      const result = await check.run()\n      debug('executed \"%s\" check', check.name, result)\n      this.#cachedResults.set(check.name, result)\n\n      return {\n        name: check.name,\n        isCached: false,\n        ...result,\n      }\n    }\n\n    /**\n     * Execute the check without caching it.\n     */\n    const result = await check.run()\n    debug('executed \"%s\" check', check.name, result)\n    return {\n      name: check.name,\n      isCached: false,\n      ...result,\n    }\n  }\n\n  /**\n   * Register health checks. Existing health checks will be\n   * removed during the register method call\n   */\n  register(checks: HealthCheckContract[]) {\n    this.#checks = checks\n    return this\n  }\n\n  /**\n   * Append new set of health checks\n   */\n  append(checks: HealthCheckContract[]) {\n    this.#checks = this.#checks.concat(checks)\n    return this\n  }\n\n  /**\n   * Executes all the checks in parallel and returns the\n   * health check report\n   */\n  async run(): Promise<HealthCheckReport> {\n    let isHealthy: boolean = true\n    let status: HealthCheckReport['status'] = 'ok'\n\n    const checks = await Promise.all(\n      this.#checks.map(async (check) => {\n        const result = await this.#runCheck(check)\n        if (result.status === 'error') {\n          status = 'error'\n          isHealthy = false\n        } else if (status === 'ok' && result.status === 'warning') {\n          status = 'warning'\n        }\n\n        return result\n      })\n    )\n\n    const finishedAt = new Date()\n    return {\n      isHealthy,\n      status,\n      finishedAt,\n      checks,\n    }\n  }\n}\n","/*\n * @adonisjs/health\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport stringHelpers from '@poppinss/utils/string'\n\nimport { Result } from '../result.js'\nimport { BaseCheck } from '../base_check.js'\nimport type { HealthCheckResult } from '../types.js'\n\n/**\n * Checks for the memory RSS size and report warning and errors after a\n * certain threshold is exceeded.\n */\nexport class MemoryRSSHealthCheck extends BaseCheck {\n  #warnThreshold: number = stringHelpers.bytes.parse('200 mb')\n  #failThreshold: number = stringHelpers.bytes.parse('350 mb')\n  #computeFn: () => NodeJS.MemoryUsage = () => {\n    return process.memoryUsage()\n  }\n\n  name: string = 'Memory RSS check'\n\n  /**\n   * Define the RSS threshold after which a warning\n   * should be created.\n   *\n   * - The value should be either a number in bytes\n   * - Or it should be a value expression in string.\n   *\n   * ```\n   * .warnWhenExceeds('200 mb')\n   * ```\n   */\n  warnWhenExceeds(value: string | number) {\n    this.#warnThreshold = stringHelpers.bytes.parse(value)\n    return this\n  }\n\n  /**\n   * Define the RSS threshold after which an error\n   * should be created.\n   *\n   * - The value should be either a number in bytes\n   * - Or it should be a value expression in string.\n   *\n   * ```\n   * .failWhenExceeds('500 mb')\n   * ```\n   */\n  failWhenExceeds(value: string | number) {\n    this.#failThreshold = stringHelpers.bytes.parse(value)\n    return this\n  }\n\n  /**\n   * Define a custom callback to compute the RSS size. Defaults to\n   * using \"process.memoryUsage()\" method call\n   */\n  compute(callback: () => NodeJS.MemoryUsage): this {\n    this.#computeFn = callback\n    return this\n  }\n\n  async run(): Promise<HealthCheckResult> {\n    const { rss } = this.#computeFn()\n\n    if (rss > this.#failThreshold) {\n      return Result.failed(\n        `RSS usage exceeded the \"${stringHelpers.bytes.format(this.#failThreshold)}\" threshold`\n      ).mergeMetaData({\n        bytes: {\n          used: rss,\n          threshold: this.#failThreshold,\n        },\n      })\n    }\n\n    if (rss > this.#warnThreshold) {\n      return Result.warning(\n        `RSS usage exceeded the \"${stringHelpers.bytes.format(this.#warnThreshold)}\" threshold`\n      ).mergeMetaData({\n        bytes: {\n          used: rss,\n          threshold: this.#warnThreshold,\n        },\n      })\n    }\n\n    return Result.ok('RSS usage is under defined thresholds').mergeMetaData({\n      bytes: {\n        used: rss,\n      },\n    })\n  }\n}\n","/*\n * @adonisjs/health\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport stringHelpers from '@poppinss/utils/string'\n\nimport { Result } from '../result.js'\nimport { BaseCheck } from '../base_check.js'\nimport type { HealthCheckResult } from '../types.js'\n\n/**\n * Checks for the memory heap size and report warning and errors after a\n * certain threshold is exceeded.\n */\nexport class MemoryHeapHealthCheck extends BaseCheck {\n  #warnThreshold: number = stringHelpers.bytes.parse('150 mb')\n  #failThreshold: number = stringHelpers.bytes.parse('300 mb')\n  #computeFn: () => NodeJS.MemoryUsage = () => {\n    return process.memoryUsage()\n  }\n\n  name: string = 'Memory heap check'\n\n  /**\n   * Define the heap threshold after which a warning\n   * should be created.\n   *\n   * - The value should be either a number in bytes\n   * - Or it should be a value expression in string.\n   *\n   * ```\n   * .warnWhenExceeds('200 mb')\n   * ```\n   */\n  warnWhenExceeds(value: string | number) {\n    this.#warnThreshold = stringHelpers.bytes.parse(value)\n    return this\n  }\n\n  /**\n   * Define the heap threshold after which an error\n   * should be created.\n   *\n   * - The value should be either a number in bytes\n   * - Or it should be a value expression in string.\n   *\n   * ```\n   * .failWhenExceeds('500 mb')\n   * ```\n   */\n  failWhenExceeds(value: string | number) {\n    this.#failThreshold = stringHelpers.bytes.parse(value)\n    return this\n  }\n\n  /**\n   * Define a custom callback to compute the heap size. Defaults to\n   * using \"process.memoryUsage()\" method call\n   */\n  compute(callback: () => NodeJS.MemoryUsage): this {\n    this.#computeFn = callback\n    return this\n  }\n\n  async run(): Promise<HealthCheckResult> {\n    const { heapUsed } = this.#computeFn()\n\n    if (heapUsed > this.#failThreshold) {\n      return Result.failed(\n        `Heap usage exceeded the \"${stringHelpers.bytes.format(this.#failThreshold)}\" threshold`\n      ).mergeMetaData({\n        bytes: {\n          used: heapUsed,\n          threshold: this.#failThreshold,\n        },\n      })\n    }\n\n    if (heapUsed > this.#warnThreshold) {\n      return Result.warning(\n        `Heap usage exceeded the \"${stringHelpers.bytes.format(this.#warnThreshold)}\" threshold`\n      ).mergeMetaData({\n        bytes: {\n          used: heapUsed,\n          threshold: this.#warnThreshold,\n        },\n      })\n    }\n\n    return Result.ok('Heap usage is under defined thresholds').mergeMetaData({\n      bytes: {\n        used: heapUsed,\n      },\n    })\n  }\n}\n","/*\n * @adonisjs/health\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport checkDiskSpace from 'check-disk-space'\n\nimport { Result } from '../result.js'\nimport { BaseCheck } from '../base_check.js'\nimport type { HealthCheckResult } from '../types.js'\n\n/**\n * Checks for the disk space and report warning and errors after a\n * certain threshold is exceeded.\n */\nexport class DiskSpaceHealthCheck extends BaseCheck {\n  #warnThreshold: number = 60\n  #failThreshold: number = 80\n  #computeFn: () => Promise<{ free: number; size: number }> = () => {\n    // @ts-expect-error \"Broken typings\"\n    return checkDiskSpace(this.diskPath)\n  }\n\n  name: string = 'Disk space check'\n  diskPath = process.platform === 'win32' ? 'C:\\\\' : '/'\n\n  /**\n   * Define the percentage threshold after which a\n   * warning should be created\n   */\n  warnWhenExceeds(valueInPercentage: number) {\n    this.#warnThreshold = valueInPercentage\n    return this\n  }\n\n  /**\n   * Define the percentage threshold after which an\n   * error should be created\n   */\n  failWhenExceeds(valueInPercentage: number) {\n    this.#failThreshold = valueInPercentage\n    return this\n  }\n\n  /**\n   * Define a custom callback to compute the disk space. Defaults to\n   * using \"check-disk-space\" package\n   */\n  compute(callback: () => Promise<{ free: number; size: number }>): this {\n    this.#computeFn = callback\n    return this\n  }\n\n  async run(): Promise<HealthCheckResult> {\n    const { free, size } = await this.#computeFn()\n    const usedPercentage = ((size - free) / size) * 100\n\n    if (usedPercentage >= this.#failThreshold) {\n      return Result.failed(\n        `Disk usage exceeded the \"${this.#failThreshold}%\" threshold`\n      ).mergeMetaData({\n        percentages: {\n          used: usedPercentage,\n          threshold: this.#failThreshold,\n        },\n      })\n    }\n\n    if (usedPercentage >= this.#warnThreshold) {\n      return Result.warning(\n        `Disk usage exceeded the \"${this.#warnThreshold}%\" threshold`\n      ).mergeMetaData({\n        percentages: {\n          used: usedPercentage,\n          threshold: this.#warnThreshold,\n        },\n      })\n    }\n\n    return Result.ok('Disk usage is under defined thresholds').mergeMetaData({\n      percentages: {\n        used: usedPercentage,\n      },\n    })\n  }\n}\n"],"mappings":"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","names":["result","stringHelpers","stringHelpers","stringHelpers","stringHelpers"]}