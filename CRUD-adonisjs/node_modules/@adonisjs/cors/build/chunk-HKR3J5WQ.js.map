{"version":3,"sources":["../src/cors_middleware.ts"],"sourcesContent":["/*\n * @adonisjs/cors\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { HttpContext } from '@adonisjs/core/http'\nimport type { NextFn } from '@adonisjs/core/types/http'\nimport type { CorsConfig } from './types.js'\n\n/**\n * List of default exposed headers.\n */\nconst SIMPLE_EXPOSE_HEADERS = [\n  'cache-control',\n  'content-language',\n  'content-type',\n  'expires',\n  'last-modified',\n  'pragma',\n]\n\n/**\n * The Cors middleware class to handle preflight request as per the CORS\n * RFC https://www.w3.org/TR/cors/.\n *\n * This is a functional middleware and shared among all requests. So make\n * sure not to set request specific instance properties.\n */\nexport default class CorsMiddleware {\n  #config: CorsConfig\n  #isEnabled: (ctx: HttpContext) => boolean\n\n  constructor(config: CorsConfig) {\n    this.#config = this.#normalizeConfig(config)\n    this.#isEnabled = this.#computeIsEnabled()\n  }\n\n  /**\n   * Normlizes config object\n   */\n  #normalizeConfig(config: CorsConfig) {\n    config.exposeHeaders = config.exposeHeaders.map((header) => header.toLowerCase())\n\n    /**\n     * If expose headers doesn't have extra headers, then empty the list\n     */\n    const hasExtraHeaders = config.exposeHeaders.find((header) => {\n      return SIMPLE_EXPOSE_HEADERS.indexOf(header) === -1\n    })\n    if (!hasExtraHeaders) {\n      config.exposeHeaders = []\n    }\n\n    return config\n  }\n\n  /**\n   * Computes the isEnabled callback\n   */\n  #computeIsEnabled() {\n    return typeof this.#config.enabled === 'function'\n      ? this.#config.enabled\n      : () => this.#config.enabled as boolean\n  }\n\n  /**\n   * Computes the origin for the current request based upon the\n   * user config.\n   *\n   * Origin match is always case sensitive\n   */\n  #computeResponseOrigin(origin: string, ctx: HttpContext): string | null {\n    let allowedOrigins = this.#config.origin\n\n    /**\n     * If the `origin` value inside user config is a function, we\n     * call that function and use the return value as the\n     * new config value.\n     */\n    if (typeof allowedOrigins === 'function') {\n      allowedOrigins = allowedOrigins(origin, ctx)\n    }\n\n    /**\n     * If true, then allow the current origin\n     */\n    if (allowedOrigins === true) {\n      return origin\n    }\n\n    /**\n     * False, disallows all origins\n     */\n    if (allowedOrigins === false) {\n      return null\n    }\n\n    /**\n     * Wildcard allows the current origin. However, it also indicates\n     * the browser that all origins are allowed.\n     *\n     * Fundamentaly `*` and `true` are not same, even though they both allows\n     * the same origin.\n     */\n    if (allowedOrigins === '*') {\n      /**\n       * Setting `Access-Control-Allow-Origin=*` along with `Access-Control-Allow-Credentials=true`\n       * isn't allowed. So in that case, we return the value of the current origin and not the\n       * wildcard identifier.\n       */\n      return this.#config.credentials === true ? origin : '*'\n    }\n\n    /**\n     * Find the matching origin, if value is an array\n     */\n    if (Array.isArray(allowedOrigins)) {\n      if (allowedOrigins.find((allowedOrigin) => allowedOrigin === origin)) {\n        return origin\n      }\n      return null\n    }\n\n    /**\n     * Find the matching origin, if value is a comma seperated string\n     */\n    if (allowedOrigins.split(',').find((allowedOrigin) => allowedOrigin === origin)) {\n      return origin\n    }\n\n    /**\n     * Nothing is allowed\n     */\n    return null\n  }\n\n  /**\n   * Returns an array of headers allowed based upon user config\n   * and request headers.\n   *\n   * The array items are casted to lowercase for case insensitive\n   * match.\n   */\n  #computedAllowedHeaders(headers: string[], ctx: HttpContext): string[] {\n    let allowedHeaders = this.#config.headers\n\n    /**\n     * Compute allowed headers by calling the config function.\n     */\n    if (typeof allowedHeaders === 'function') {\n      allowedHeaders = allowedHeaders(headers, ctx)\n    }\n\n    /**\n     * Allow current set of headers, when `allowedHeaders = true`\n     */\n    if (allowedHeaders === true) {\n      return headers.map((header) => header.toLowerCase())\n    }\n\n    /**\n     * Disallow all headers\n     */\n    if (allowedHeaders === false) {\n      return []\n    }\n\n    /**\n     * Allow explicitly define headers as an array of comma seperated\n     * string literal.\n     */\n    if (Array.isArray(allowedHeaders)) {\n      return allowedHeaders.map((header) => header.toLowerCase())\n    }\n\n    return allowedHeaders.split(',').map((header) => header.toLowerCase())\n  }\n\n  /**\n   * Sets the `Access-Control-Allow-Origin` header\n   */\n  #setOrigin(response: HttpContext['response'], allowedOrigin: string) {\n    response.header('Access-Control-Allow-Origin', allowedOrigin)\n  }\n\n  /**\n   * Setting `Access-Control-Expose-Headers` headers, when custom headers\n   * are defined. If no custom headers are defined, then simple response\n   * headers are used instead.\n   */\n  #setExposedHeaders(response: HttpContext['response']) {\n    if (this.#config.exposeHeaders.length) {\n      response.header('Access-Control-Expose-Headers', this.#config.exposeHeaders.join(','))\n    }\n  }\n\n  /**\n   * Allows `Access-Control-Allow-Credentials` when enabled inside the user\n   * config.\n   */\n  #setCredentials(response: HttpContext['response']) {\n    if (this.#config.credentials === true) {\n      response.header('Access-Control-Allow-Credentials', 'true')\n    }\n  }\n\n  /**\n   * Set `Access-Control-Allow-Methods` header.\n   */\n  #setAllowMethods(response: HttpContext['response']) {\n    response.header('Access-Control-Allow-Methods', this.#config.methods.join(','))\n  }\n\n  /**\n   * Set `Access-Control-Allow-Headers` header.\n   */\n  #setAllowHeaders(response: HttpContext['response'], allowedHeaders: string[]) {\n    response.header('Access-Control-Allow-Headers', allowedHeaders.join(','))\n  }\n\n  /**\n   * Set `Access-Control-Max-Age` header.\n   */\n  #setMaxAge(response: HttpContext['response']) {\n    if (this.#config.maxAge) {\n      response.header('Access-Control-Max-Age', this.#config.maxAge)\n    }\n  }\n\n  /**\n   * Ends the preflight request with 204 status code\n   */\n  #endPreFlight(response: HttpContext['response']) {\n    response.status(204).send(null)\n  }\n\n  /**\n   * Handle HTTP request for CORS. This method is binded as a before hook\n   * to the HTTP server.\n   */\n  async handle(ctx: HttpContext, next: NextFn) {\n    /**\n     * Return early when CORS is not enabled for the current request\n     */\n    if (!this.#isEnabled(ctx)) {\n      return next()\n    }\n\n    const origin = ctx.request.header('origin')\n\n    /**\n     * If there is no origin header present, then let the user-agent handle\n     * this situation, since the request is outside the scope of CORS.\n     */\n    if (!origin) {\n      return next()\n    }\n\n    const allowedOrigin = this.#computeResponseOrigin(origin, ctx)\n\n    if (ctx.request.method() === 'OPTIONS') {\n      /**\n       * If origin is not allowed, then we don't set any of the cors headers\n       */\n      if (!allowedOrigin) {\n        this.#endPreFlight(ctx.response)\n        return\n      }\n\n      /**\n       * End the request, when `Access-Control-Request-Method` is missing or isn't\n       * part of allowed methods.\n       * https://www.w3.org/TR/cors/#http-access-control-request-method\n       */\n      const requestMethod = ctx.request.header('Access-Control-Request-Method')\n      if (!requestMethod || this.#config.methods.indexOf(requestMethod) === -1) {\n        this.#endPreFlight(ctx.response)\n        return\n      }\n\n      /**\n       * When `Access-Control-Request-Headers` header is missing or is empty, then\n       * we subsitute that with an empty list.\n       * https://www.w3.org/TR/cors/#http-access-control-request-headers\n       */\n      let requestHeaders: unknown = ctx.request.header('Access-Control-Request-Headers')\n      if (requestHeaders && requestHeaders !== '') {\n        requestHeaders = (requestHeaders as string).split(',')\n      } else {\n        requestHeaders = []\n      }\n\n      /**\n       * Computing allowed headers array from the user config\n       */\n      const allowedHeaders = this.#computedAllowedHeaders(requestHeaders as string[], ctx)\n\n      /**\n       * Finding if all request `Access-Control-Request-Headers` falls under the\n       * list of allowed headers inside user config\n       */\n      const headersMatches = (requestHeaders as string[]).every((header) => {\n        if (header === 'origin') {\n          return true\n        }\n\n        /**\n         * Doing case insenstive match\n         */\n        return allowedHeaders.indexOf(header.toLowerCase()) > -1\n      })\n\n      /**\n       * If headers test fails, then we need to end the request without setting\n       * any headers (part of spec).\n       * https://www.w3.org/TR/cors/#http-access-control-request-headers\n       */\n      if (headersMatches === false) {\n        this.#endPreFlight(ctx.response)\n        return\n      }\n\n      this.#setOrigin(ctx.response, allowedOrigin)\n      this.#setCredentials(ctx.response)\n      this.#setExposedHeaders(ctx.response)\n      this.#setAllowMethods(ctx.response)\n      this.#setAllowHeaders(ctx.response, allowedHeaders)\n      this.#setMaxAge(ctx.response)\n      this.#endPreFlight(ctx.response)\n    } else {\n      if (allowedOrigin) {\n        this.#setOrigin(ctx.response, allowedOrigin)\n        this.#setCredentials(ctx.response)\n        this.#setExposedHeaders(ctx.response)\n      }\n      return next()\n    }\n  }\n}\n"],"mappings":"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","names":[]}