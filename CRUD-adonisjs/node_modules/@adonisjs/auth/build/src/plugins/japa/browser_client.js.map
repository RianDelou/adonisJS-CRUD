{"version":3,"sources":["../../../../src/plugins/japa/browser_client.ts"],"sourcesContent":["/*\n * @adoniss/auth\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/// <reference types=\"@japa/plugin-adonisjs\" />\n/// <reference types=\"@adonisjs/session/plugins/browser_client\" />\n\nimport type { PluginFn } from '@japa/runner/types'\nimport { decoratorsCollection } from '@japa/browser-client'\nimport { RuntimeException } from '@adonisjs/core/exceptions'\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nimport debug from '../../debug.js'\nimport type { Authenticators, GuardContract, GuardFactory } from '../../types.js'\n\ndeclare module 'playwright' {\n  export interface BrowserContext {\n    /**\n     * Login a user using the default authentication guard when\n     * using the browser context to make page visits\n     */\n    loginAs(\n      ...args: {\n        [K in keyof Authenticators]: Authenticators[K] extends GuardFactory\n          ? ReturnType<Authenticators[K]> extends GuardContract<unknown>\n            ? Parameters<ReturnType<Authenticators[K]>['authenticateAsClient']>\n            : never\n          : never\n      }[keyof Authenticators]\n    ): Promise<void>\n\n    /**\n     * Define the authentication guard for login\n     */\n    withGuard<K extends keyof Authenticators>(\n      guard: K\n    ): {\n      /**\n       * Login a user using a specific auth guard\n       */\n      loginAs(\n        ...args: ReturnType<Authenticators[K]> extends GuardContract<unknown>\n          ? Parameters<ReturnType<Authenticators[K]>['authenticateAsClient']>\n          : never\n      ): Promise<void>\n    }\n  }\n}\n\n/**\n * Browser API client to authenticate users when making\n * HTTP requests using the Japa Browser client.\n */\nexport const authBrowserClient = (app: ApplicationService) => {\n  const pluginFn: PluginFn = async function () {\n    debug('installing auth browser client plugin')\n\n    const auth = await app.container.make('auth.manager')\n\n    decoratorsCollection.register({\n      context(context) {\n        /**\n         * Define the authentication guard for login and perform\n         * login\n         */\n        context.withGuard = function (guardName) {\n          return {\n            async loginAs(...args) {\n              const client = auth.createAuthenticatorClient()\n              const guard = client.use(guardName) as GuardContract<unknown>\n              const requestData = await guard.authenticateAsClient(\n                ...(args as [user: unknown, ...any[]])\n              )\n\n              /* c8 ignore next 17 */\n              if (requestData.headers) {\n                throw new RuntimeException(\n                  `Cannot use \"${guard.driverName}\" guard with browser client`\n                )\n              }\n\n              if (requestData.cookies) {\n                debug('defining cookies with browser context %O', requestData.cookies)\n                Object.keys(requestData.cookies).forEach((cookie) => {\n                  context.setCookie(cookie, requestData.cookies![cookie])\n                })\n              }\n\n              if (requestData.session) {\n                debug('defining session with browser context %O', requestData.session)\n                context.setSession(requestData.session)\n              }\n            },\n          }\n        }\n\n        /**\n         * Login a user using the default authentication guard when\n         * using the browser context to make page visits\n         */\n        context.loginAs = async function (user, ...args) {\n          const client = auth.createAuthenticatorClient()\n          const guard = client.use() as GuardContract<unknown>\n          const requestData = await guard.authenticateAsClient(user, ...args)\n\n          /* c8 ignore next 15 */\n          if (requestData.headers) {\n            throw new RuntimeException(`Cannot use \"${guard.driverName}\" guard with browser client`)\n          }\n\n          if (requestData.cookies) {\n            debug('defining cookies with browser context %O', requestData.cookies)\n            Object.keys(requestData.cookies).forEach((cookie) => {\n              context.setCookie(cookie, requestData.cookies![cookie])\n            })\n          }\n\n          if (requestData.session) {\n            debug('defining session with browser context %O', requestData.session)\n            context.setSession(requestData.session)\n          }\n        }\n      },\n    })\n  }\n\n  return pluginFn\n}\n"],"mappings":";;;;;;AAaA,SAAS,4BAA4B;AACrC,SAAS,wBAAwB;AA4C1B,IAAM,oBAAoB,CAAC,QAA4B;AAC5D,QAAM,WAAqB,iBAAkB;AAC3C,kBAAM,uCAAuC;AAE7C,UAAM,OAAO,MAAM,IAAI,UAAU,KAAK,cAAc;AAEpD,yBAAqB,SAAS;AAAA,MAC5B,QAAQ,SAAS;AAKf,gBAAQ,YAAY,SAAU,WAAW;AACvC,iBAAO;AAAA,YACL,MAAM,WAAW,MAAM;AACrB,oBAAM,SAAS,KAAK,0BAA0B;AAC9C,oBAAM,QAAQ,OAAO,IAAI,SAAS;AAClC,oBAAM,cAAc,MAAM,MAAM;AAAA,gBAC9B,GAAI;AAAA,cACN;AAGA,kBAAI,YAAY,SAAS;AACvB,sBAAM,IAAI;AAAA,kBACR,eAAe,MAAM,UAAU;AAAA,gBACjC;AAAA,cACF;AAEA,kBAAI,YAAY,SAAS;AACvB,8BAAM,4CAA4C,YAAY,OAAO;AACrE,uBAAO,KAAK,YAAY,OAAO,EAAE,QAAQ,CAAC,WAAW;AACnD,0BAAQ,UAAU,QAAQ,YAAY,QAAS,MAAM,CAAC;AAAA,gBACxD,CAAC;AAAA,cACH;AAEA,kBAAI,YAAY,SAAS;AACvB,8BAAM,4CAA4C,YAAY,OAAO;AACrE,wBAAQ,WAAW,YAAY,OAAO;AAAA,cACxC;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAMA,gBAAQ,UAAU,eAAgB,SAAS,MAAM;AAC/C,gBAAM,SAAS,KAAK,0BAA0B;AAC9C,gBAAM,QAAQ,OAAO,IAAI;AACzB,gBAAM,cAAc,MAAM,MAAM,qBAAqB,MAAM,GAAG,IAAI;AAGlE,cAAI,YAAY,SAAS;AACvB,kBAAM,IAAI,iBAAiB,eAAe,MAAM,UAAU,6BAA6B;AAAA,UACzF;AAEA,cAAI,YAAY,SAAS;AACvB,0BAAM,4CAA4C,YAAY,OAAO;AACrE,mBAAO,KAAK,YAAY,OAAO,EAAE,QAAQ,CAAC,WAAW;AACnD,sBAAQ,UAAU,QAAQ,YAAY,QAAS,MAAM,CAAC;AAAA,YACxD,CAAC;AAAA,UACH;AAEA,cAAI,YAAY,SAAS;AACvB,0BAAM,4CAA4C,YAAY,OAAO;AACrE,oBAAQ,WAAW,YAAY,OAAO;AAAA,UACxC;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO;AACT;","names":[]}