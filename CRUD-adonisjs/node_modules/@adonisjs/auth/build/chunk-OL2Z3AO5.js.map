{"version":3,"sources":["../src/authenticator.ts","../src/authenticator_client.ts","../src/auth_manager.ts"],"sourcesContent":["/*\n * @adonisjs/auth\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\nimport { RuntimeException } from '@adonisjs/core/exceptions'\n\nimport debug from './debug.js'\nimport type { GuardFactory } from './types.js'\nimport { E_UNAUTHORIZED_ACCESS } from './errors.js'\n\n/**\n * Authenticator is used to authenticate incoming HTTP requests\n * using one or more known guards.\n */\nexport class Authenticator<KnownGuards extends Record<string, GuardFactory>> {\n  /**\n   * Registered guards\n   */\n  #config: {\n    default: keyof KnownGuards\n    guards: KnownGuards\n  }\n\n  /**\n   * Cache of guards created during the HTTP request\n   */\n  #guardsCache: Partial<Record<keyof KnownGuards, unknown>> = {}\n\n  /**\n   * Last guard that was used to perform the authentication via\n   * the \"authenticateUsing\" method.\n   *\n   * @note\n   * Reset on every call made to \"authenticate\", \"check\" and\n   * \"authenticateUsing\" method.\n   */\n  #authenticationAttemptedViaGuard?: keyof KnownGuards\n\n  /**\n   * Name of the guard using which the request has\n   * been authenticated successfully.\n   *\n   * @note\n   * Reset on every call made to \"authenticate\", \"check\" and\n   * \"authenticateUsing\" method.\n   */\n  #authenticatedViaGuard?: keyof KnownGuards\n\n  /**\n   * Reference to HTTP context\n   */\n  #ctx: HttpContext\n\n  /**\n   * Name of the default guard\n   */\n  get defaultGuard(): keyof KnownGuards {\n    return this.#config.default\n  }\n\n  /**\n   * Reference to the guard using which the current\n   * request has been authenticated.\n   */\n  get authenticatedViaGuard(): keyof KnownGuards | undefined {\n    return this.#authenticatedViaGuard\n  }\n\n  /**\n   * A boolean to know if the current request has been authenticated. The\n   * property returns false when \"authenticate\" or \"authenticateUsing\"\n   * methods are not used.\n   */\n  get isAuthenticated(): boolean {\n    if (!this.#authenticationAttemptedViaGuard) {\n      return false\n    }\n\n    return this.use(this.#authenticationAttemptedViaGuard).isAuthenticated\n  }\n\n  /**\n   * Reference to the currently authenticated user. The property returns\n   * undefined when \"authenticate\" or \"authenticateUsing\" methods are\n   * not used.\n   */\n  get user(): {\n    [K in keyof KnownGuards]: ReturnType<KnownGuards[K]>['user']\n  }[keyof KnownGuards] {\n    if (!this.#authenticationAttemptedViaGuard) {\n      return undefined\n    }\n\n    return this.use(this.#authenticationAttemptedViaGuard).user\n  }\n\n  /**\n   * Whether or not the authentication has been attempted during\n   * the current request. The property returns false when the\n   * \"authenticate\" or \"authenticateUsing\" methods are not\n   * used.\n   */\n  get authenticationAttempted(): boolean {\n    if (!this.#authenticationAttemptedViaGuard) {\n      return false\n    }\n\n    return this.use(this.#authenticationAttemptedViaGuard).authenticationAttempted\n  }\n\n  constructor(ctx: HttpContext, config: { default: keyof KnownGuards; guards: KnownGuards }) {\n    this.#ctx = ctx\n    this.#config = config\n    debug('creating authenticator. config %O', this.#config)\n  }\n\n  /**\n   * Returns an instance of the logged-in user or throws an\n   * exception\n   */\n  getUserOrFail(): {\n    [K in keyof KnownGuards]: ReturnType<ReturnType<KnownGuards[K]>['getUserOrFail']>\n  }[keyof KnownGuards] {\n    if (!this.#authenticationAttemptedViaGuard) {\n      throw new RuntimeException(\n        'Cannot access authenticated user. Please call \"auth.authenticate\" method first.'\n      )\n    }\n\n    return this.use(this.#authenticationAttemptedViaGuard).getUserOrFail() as {\n      [K in keyof KnownGuards]: ReturnType<ReturnType<KnownGuards[K]>['getUserOrFail']>\n    }[keyof KnownGuards]\n  }\n\n  /**\n   * Returns an instance of a known guard. Guards instances are\n   * cached during the lifecycle of an HTTP request.\n   */\n  use<Guard extends keyof KnownGuards>(guard?: Guard): ReturnType<KnownGuards[Guard]> {\n    const guardToUse = guard || this.#config.default\n\n    /**\n     * Use cached copy if exists\n     */\n    const cachedGuard = this.#guardsCache[guardToUse]\n    if (cachedGuard) {\n      debug('authenticator: using guard from cache. name: \"%s\"', guardToUse)\n      return cachedGuard as ReturnType<KnownGuards[Guard]>\n    }\n\n    const guardFactory = this.#config.guards[guardToUse]\n\n    /**\n     * Construct guard and cache it\n     */\n    debug('authenticator: creating guard. name: \"%s\"', guardToUse)\n    const guardInstance = guardFactory(this.#ctx)\n    this.#guardsCache[guardToUse] = guardInstance\n\n    return guardInstance as ReturnType<KnownGuards[Guard]>\n  }\n\n  /**\n   * Authenticate current request using the default guard. Calling this\n   * method multiple times triggers multiple authentication with the\n   * guard.\n   */\n  async authenticate() {\n    await this.authenticateUsing()\n    return this.getUserOrFail()\n  }\n\n  /**\n   * Silently attempt to authenticate the request using the default\n   * guard. Calling this method multiple times triggers multiple\n   * authentication with the guard.\n   */\n  async check() {\n    this.#authenticationAttemptedViaGuard = this.defaultGuard\n    const isAuthenticated = await this.use().check()\n    if (isAuthenticated) {\n      this.#authenticatedViaGuard = this.defaultGuard\n    }\n\n    return isAuthenticated\n  }\n\n  /**\n   * Authenticate the request using all of the mentioned guards\n   * or the default guard.\n   *\n   * The authentication process will stop after any of the mentioned\n   * guards is able to authenticate the request successfully.\n   *\n   * Otherwise, \"E_UNAUTHORIZED_ACCESS\" will be raised.\n   */\n  async authenticateUsing(\n    guards?: (keyof KnownGuards)[],\n    options?: { loginRoute?: string }\n  ): Promise<\n    {\n      [K in keyof KnownGuards]: ReturnType<ReturnType<KnownGuards[K]>['getUserOrFail']>\n    }[keyof KnownGuards]\n  > {\n    const guardsToUse = guards || [this.defaultGuard]\n    let lastUsedDriver: string | undefined\n\n    for (let guardName of guardsToUse) {\n      debug('attempting to authenticate using guard \"%s\"', guardName)\n\n      this.#authenticationAttemptedViaGuard = guardName\n      const guard = this.use(guardName)\n      lastUsedDriver = guard.driverName\n\n      if (await guard.check()) {\n        this.#authenticatedViaGuard = guardName\n        return this.getUserOrFail()\n      }\n    }\n\n    throw new E_UNAUTHORIZED_ACCESS('Unauthorized access', {\n      guardDriverName: lastUsedDriver!,\n      redirectTo: options?.loginRoute,\n    })\n  }\n}\n","/*\n * @adonisjs/auth\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport debug from './debug.js'\nimport type { GuardFactory } from './types.js'\nimport { HttpContextFactory } from '@adonisjs/core/factories/http'\n\n/**\n * Authenticator client is used to create guard instances for testing.\n * It passes a fake HTTPContext to the guards, so make sure to not\n * call server side APIs that might be relying on a real\n * HTTPContext instance.\n */\nexport class AuthenticatorClient<KnownGuards extends Record<string, GuardFactory>> {\n  /**\n   * Registered guards\n   */\n  #config: {\n    default: keyof KnownGuards\n    guards: KnownGuards\n  }\n\n  /**\n   * Cache of guards\n   */\n  #guardsCache: Partial<Record<keyof KnownGuards, unknown>> = {}\n\n  /**\n   * Name of the default guard\n   */\n  get defaultGuard(): keyof KnownGuards {\n    return this.#config.default\n  }\n\n  constructor(config: { default: keyof KnownGuards; guards: KnownGuards }) {\n    this.#config = config\n    debug('creating authenticator client. config %O', this.#config)\n  }\n\n  /**\n   * Returns an instance of a known guard. Guards instances are\n   * cached during the lifecycle of an HTTP request.\n   */\n  use<Guard extends keyof KnownGuards>(guard?: Guard): ReturnType<KnownGuards[Guard]> {\n    const guardToUse = guard || this.#config.default\n\n    /**\n     * Use cached copy if exists\n     */\n    const cachedGuard = this.#guardsCache[guardToUse]\n    if (cachedGuard) {\n      debug('authenticator client: using guard from cache. name: \"%s\"', guardToUse)\n      return cachedGuard as ReturnType<KnownGuards[Guard]>\n    }\n\n    const guardFactory = this.#config.guards[guardToUse]\n\n    /**\n     * Construct guard and cache it\n     */\n    debug('authenticator client: creating guard. name: \"%s\"', guardToUse)\n    const guardInstance = guardFactory(new HttpContextFactory().create())\n    this.#guardsCache[guardToUse] = guardInstance\n\n    return guardInstance as ReturnType<KnownGuards[Guard]>\n  }\n}\n","/*\n * @adonisjs/auth\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\n\nimport type { GuardFactory } from './types.js'\nimport { Authenticator } from './authenticator.js'\nimport { AuthenticatorClient } from './authenticator_client.js'\n\n/**\n * Auth manager exposes the API to register and manage authentication\n * guards from the config\n */\nexport class AuthManager<KnownGuards extends Record<string, GuardFactory>> {\n  /**\n   * Name of the default guard\n   */\n  get defaultGuard() {\n    return this.config.default\n  }\n\n  constructor(public config: { default: keyof KnownGuards; guards: KnownGuards }) {\n    this.config = config\n  }\n\n  /**\n   * Create an authenticator for a given HTTP request. The authenticator\n   * is used to authenticated in incoming HTTP request\n   */\n  createAuthenticator(ctx: HttpContext) {\n    return new Authenticator<KnownGuards>(ctx, this.config)\n  }\n\n  /**\n   * Creates an instance of the authenticator client. The client is\n   * used to setup authentication state during testing.\n   */\n  createAuthenticatorClient() {\n    return new AuthenticatorClient<KnownGuards>(this.config)\n  }\n}\n"],"mappings":"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","names":[]}