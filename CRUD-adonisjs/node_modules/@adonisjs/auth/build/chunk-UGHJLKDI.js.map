{"version":3,"sources":["../src/errors.ts"],"sourcesContent":["/*\n * @adonisjs/auth\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { I18n } from '@adonisjs/i18n'\nimport { Exception } from '@adonisjs/core/exceptions'\nimport type { HttpContext } from '@adonisjs/core/http'\n\n/**\n * The \"E_UNAUTHORIZED_ACCESS\" exception is raised when unable to\n * authenticate an incoming HTTP request.\n *\n * The \"error.guardDriverName\" can be used to know the driver which\n * raised the error.\n */\nexport const E_UNAUTHORIZED_ACCESS = class extends Exception {\n  static status: number = 401\n  static code: string = 'E_UNAUTHORIZED_ACCESS'\n\n  /**\n   * Endpoint to redirect to. Only used by \"session\" driver\n   * renderer\n   */\n  redirectTo?: string\n\n  /**\n   * Translation identifier. Can be customized\n   */\n  identifier: string = 'errors.E_UNAUTHORIZED_ACCESS'\n\n  /**\n   * The guard name reference that raised the exception. It allows\n   * us to customize the logic of handling the exception.\n   */\n  guardDriverName: string\n\n  /**\n   * A collection of renderers to render the exception to a\n   * response.\n   *\n   * The collection is a key-value pair, where the key is\n   * the guard driver name and value is a factory function\n   * to respond to the request.\n   */\n  renderers: Record<\n    string,\n    (message: string, error: this, ctx: HttpContext) => Promise<void> | void\n  > = {\n    /**\n     * Response when session driver is used\n     */\n    session: (message, error, ctx) => {\n      switch (ctx.request.accepts(['html', 'application/vnd.api+json', 'json'])) {\n        case 'html':\n        case null:\n          ctx.session.flashExcept(['_csrf'])\n          ctx.session.flashErrors({ [error.code!]: message })\n          ctx.response.redirect(error.redirectTo || '/', true)\n          break\n        case 'json':\n          ctx.response.status(error.status).send({\n            errors: [\n              {\n                message,\n              },\n            ],\n          })\n          break\n        case 'application/vnd.api+json':\n          ctx.response.status(error.status).send({\n            errors: [\n              {\n                code: error.code,\n                title: message,\n              },\n            ],\n          })\n          break\n      }\n    },\n\n    /**\n     * Response when basic auth driver is used\n     */\n    basic_auth: (message, _, ctx) => {\n      ctx.response\n        .status(this.status)\n        .header('WWW-Authenticate', `Basic realm=\"Authenticate\", charset=\"UTF-8\"`)\n        .send(message)\n    },\n\n    /**\n     * Response when access tokens driver is used\n     */\n    access_tokens: (message, error, ctx) => {\n      switch (ctx.request.accepts(['html', 'application/vnd.api+json', 'json'])) {\n        case 'html':\n        case null:\n          ctx.response.status(error.status).send(message)\n          break\n        case 'json':\n          ctx.response.status(error.status).send({\n            errors: [\n              {\n                message,\n              },\n            ],\n          })\n          break\n        case 'application/vnd.api+json':\n          ctx.response.status(error.status).send({\n            errors: [\n              {\n                code: error.code,\n                title: message,\n              },\n            ],\n          })\n          break\n      }\n    },\n  }\n\n  /**\n   * Returns the message to be sent in the HTTP response.\n   * Feel free to override this method and return a custom\n   * response.\n   */\n  getResponseMessage(error: this, ctx: HttpContext) {\n    if ('i18n' in ctx) {\n      return (ctx.i18n as I18n).t(error.identifier, {}, error.message)\n    }\n    return error.message\n  }\n\n  constructor(\n    message: string,\n    options: {\n      redirectTo?: string\n      guardDriverName: string\n    }\n  ) {\n    super(message, {})\n    this.guardDriverName = options.guardDriverName\n    this.redirectTo = options.redirectTo\n  }\n\n  /**\n   * Converts exception to an HTTP response\n   */\n  async handle(error: this, ctx: HttpContext) {\n    const renderer = this.renderers[this.guardDriverName]\n    const message = error.getResponseMessage(error, ctx)\n\n    if (!renderer) {\n      return ctx.response.status(error.status).send(message)\n    }\n\n    return renderer(message, error, ctx)\n  }\n}\n\n/**\n * Exception is raised when user credentials are invalid\n */\nexport const E_INVALID_CREDENTIALS = class extends Exception {\n  static status: number = 400\n  static code: string = 'E_INVALID_CREDENTIALS'\n\n  /**\n   * Translation identifier. Can be customized\n   */\n  identifier: string = 'errors.E_INVALID_CREDENTIALS'\n\n  /**\n   * Returns the message to be sent in the HTTP response.\n   * Feel free to override this method and return a custom\n   * response.\n   */\n  getResponseMessage(error: this, ctx: HttpContext) {\n    if ('i18n' in ctx) {\n      return (ctx.i18n as I18n).t(error.identifier, {}, error.message)\n    }\n    return error.message\n  }\n\n  /**\n   * Converts exception to an HTTP response\n   */\n  async handle(error: this, ctx: HttpContext) {\n    const message = this.getResponseMessage(error, ctx)\n\n    switch (ctx.request.accepts(['html', 'application/vnd.api+json', 'json'])) {\n      case 'html':\n      case null:\n        if (ctx.session) {\n          ctx.session.flashExcept(['_csrf', '_method', 'password', 'password_confirmation'])\n          ctx.session.flashErrors({ [error.code!]: message })\n          ctx.response.redirect('back', true)\n        } else {\n          ctx.response.status(error.status).send(message)\n        }\n        break\n      case 'json':\n        ctx.response.status(error.status).send({\n          errors: [\n            {\n              message,\n            },\n          ],\n        })\n        break\n      case 'application/vnd.api+json':\n        ctx.response.status(error.status).send({\n          errors: [\n            {\n              code: error.code,\n              title: message,\n            },\n          ],\n        })\n        break\n    }\n  }\n}\n"],"mappings":"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","names":[]}