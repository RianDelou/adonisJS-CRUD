{"version":3,"sources":["../../factories/logger.ts"],"sourcesContent":["/*\n * @adonisjs/logger\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Writable } from 'node:stream'\nimport { Logger } from '../src/logger.js'\nimport type { LoggerConfig } from '../src/types.js'\n\nexport function getFakeStream(fn: (line: string) => boolean) {\n  const stream = new Writable()\n  stream.write = fn\n  return stream\n}\n\n/**\n * Logger factory is used to generate logger class instances for\n * testing\n */\nexport class LoggerFactory {\n  #options: LoggerConfig = {}\n  #logsCollection?: string[]\n\n  /**\n   * Define an array that will be used to writing\n   * logs\n   */\n  pushLogsTo(collection: string[]) {\n    this.#logsCollection = collection\n    return this\n  }\n\n  /**\n   * Merge encryption factory options\n   */\n  merge(options: LoggerConfig) {\n    Object.assign(this.#options, options)\n    return this\n  }\n\n  /**\n   * Create instance of the logger class\n   */\n  create() {\n    if (this.#logsCollection) {\n      this.#options.desination = getFakeStream((message) => {\n        this.#logsCollection!.push(message.trim())\n        return true\n      })\n    }\n\n    return new Logger(this.#options)\n  }\n}\n"],"mappings":";;;;;AASA,SAAS,gBAAgB;AAIlB,SAAS,cAAc,IAA+B;AAC3D,QAAM,SAAS,IAAI,SAAS;AAC5B,SAAO,QAAQ;AACf,SAAO;AACT;AAMO,IAAM,gBAAN,MAAoB;AAAA,EACzB,WAAyB,CAAC;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,YAAsB;AAC/B,SAAK,kBAAkB;AACvB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAuB;AAC3B,WAAO,OAAO,KAAK,UAAU,OAAO;AACpC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,QAAI,KAAK,iBAAiB;AACxB,WAAK,SAAS,aAAa,cAAc,CAAC,YAAY;AACpD,aAAK,gBAAiB,KAAK,QAAQ,KAAK,CAAC;AACzC,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,OAAO,KAAK,QAAQ;AAAA,EACjC;AACF;","names":[]}