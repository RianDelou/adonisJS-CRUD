{"version":3,"sources":["../../../src/lucid/main.ts"],"sourcesContent":["/*\n * @adonisjs/presets\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { mkdir } from 'node:fs/promises'\nimport { joinToURL } from '@poppinss/utils'\nimport type { Application } from '@adonisjs/core/app'\nimport type { Codemods } from '@adonisjs/core/ace/codemods'\n\nconst STUBS_ROOT = joinToURL(import.meta.url, './stubs')\n\n/**\n * Collection of dialects that can be configured\n */\nexport const DIALECTS: {\n  [K in 'sqlite' | 'mysql' | 'postgres' | 'mssql']: {\n    envVars?: Record<string, number | string>\n    envValidations?: Record<string, string>\n    name: string\n    pkg: string\n  }\n} = {\n  sqlite: {\n    name: 'SQLite',\n    pkg: 'better-sqlite3',\n  },\n  mysql: {\n    name: 'MySQL',\n    pkg: 'mysql2',\n    envVars: {\n      DB_HOST: '127.0.0.1',\n      DB_PORT: 3306,\n      DB_USER: 'root',\n      DB_PASSWORD: '',\n      DB_DATABASE: '',\n    },\n    envValidations: {\n      DB_HOST: `Env.schema.string({ format: 'host' })`,\n      DB_PORT: `Env.schema.number()`,\n      DB_USER: 'Env.schema.string()',\n      DB_PASSWORD: 'Env.schema.string.optional()',\n      DB_DATABASE: 'Env.schema.string()',\n    },\n  },\n  postgres: {\n    name: 'PostgreSQL',\n    pkg: 'pg',\n    envVars: {\n      DB_HOST: '127.0.0.1',\n      DB_PORT: 5432,\n      DB_USER: 'postgres',\n      DB_PASSWORD: '',\n      DB_DATABASE: '',\n    },\n    envValidations: {\n      DB_HOST: `Env.schema.string({ format: 'host' })`,\n      DB_PORT: `Env.schema.number()`,\n      DB_USER: 'Env.schema.string()',\n      DB_PASSWORD: 'Env.schema.string.optional()',\n      DB_DATABASE: 'Env.schema.string()',\n    },\n  },\n  mssql: {\n    name: 'MS SQL',\n    pkg: 'tedious',\n    envVars: {\n      DB_HOST: '127.0.0.1',\n      DB_PORT: 1433,\n      DB_USER: 'sa',\n      DB_PASSWORD: '',\n      DB_DATABASE: '',\n    },\n    envValidations: {\n      DB_HOST: `Env.schema.string({ format: 'host' })`,\n      DB_PORT: `Env.schema.number()`,\n      DB_USER: 'Env.schema.string()',\n      DB_PASSWORD: 'Env.schema.string.optional()',\n      DB_DATABASE: 'Env.schema.string()',\n    },\n  },\n}\n\n/**\n * Configures @adonisjs/lucid package by performing following\n * steps.\n *\n * - Creates config/database.ts file.\n * - Registers lucid commands and provider.\n * - Define env variables and their validations (if any)\n * - Creates tmp directory to store sqlite database file\n * - Installs required packages if(options.installPackages === true)\n */\nexport async function presetLucid(\n  codemods: Codemods,\n  app: Application<any>,\n  options: {\n    dialect: keyof typeof DIALECTS\n    installPackages: boolean\n  }\n) {\n  const { pkg, envVars, envValidations } = DIALECTS[options.dialect]\n  const packagesToInstall = [\n    { name: pkg, isDevDependency: false },\n    { name: 'luxon', isDevDependency: false },\n    { name: '@types/luxon', isDevDependency: true },\n  ]\n\n  /**\n   * Publish config file\n   */\n  await codemods.makeUsingStub(STUBS_ROOT, `config/database/${options.dialect}.stub`, {})\n\n  /**\n   * Create the \"tmp\" directory when using sqlite\n   */\n  if (options.dialect === 'sqlite') {\n    try {\n      await mkdir(app.tmpPath(), { recursive: true })\n    } catch {}\n  }\n\n  /**\n   * Register commands and provider to the rcfile\n   */\n  await codemods.updateRcFile((rcFile) => {\n    rcFile.addCommand('@adonisjs/lucid/commands')\n    rcFile.addProvider('@adonisjs/lucid/database_provider')\n  })\n\n  /**\n   * Define env variables when selected dialect config\n   * needs them\n   */\n  if (envVars) {\n    await codemods.defineEnvVariables(envVars)\n  }\n\n  /**\n   * Define env variables validations when selected\n   * dialect config needs them\n   */\n  if (envValidations) {\n    await codemods.defineEnvValidations({\n      variables: envValidations,\n      leadingComment: 'Variables for configuring database connection',\n    })\n  }\n\n  /**\n   * Install packages or share instructions to install them\n   */\n  if (options.installPackages) {\n    await codemods.installPackages(packagesToInstall)\n  } else {\n    await codemods.listPackagesToInstall(packagesToInstall)\n  }\n}\n"],"mappings":";AASA,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAI1B,IAAM,aAAa,UAAU,YAAY,KAAK,SAAS;AAKhD,IAAM,WAOT;AAAA,EACF,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,KAAK;AAAA,EACP;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,KAAK;AAAA,IACL,SAAS;AAAA,MACP,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,IACA,gBAAgB;AAAA,MACd,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,KAAK;AAAA,IACL,SAAS;AAAA,MACP,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,IACA,gBAAgB;AAAA,MACd,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,KAAK;AAAA,IACL,SAAS;AAAA,MACP,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,IACA,gBAAgB;AAAA,MACd,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,EACF;AACF;AAYA,eAAsB,YACpB,UACA,KACA,SAIA;AACA,QAAM,EAAE,KAAK,SAAS,eAAe,IAAI,SAAS,QAAQ,OAAO;AACjE,QAAM,oBAAoB;AAAA,IACxB,EAAE,MAAM,KAAK,iBAAiB,MAAM;AAAA,IACpC,EAAE,MAAM,SAAS,iBAAiB,MAAM;AAAA,IACxC,EAAE,MAAM,gBAAgB,iBAAiB,KAAK;AAAA,EAChD;AAKA,QAAM,SAAS,cAAc,YAAY,mBAAmB,QAAQ,OAAO,SAAS,CAAC,CAAC;AAKtF,MAAI,QAAQ,YAAY,UAAU;AAChC,QAAI;AACF,YAAM,MAAM,IAAI,QAAQ,GAAG,EAAE,WAAW,KAAK,CAAC;AAAA,IAChD,QAAQ;AAAA,IAAC;AAAA,EACX;AAKA,QAAM,SAAS,aAAa,CAAC,WAAW;AACtC,WAAO,WAAW,0BAA0B;AAC5C,WAAO,YAAY,mCAAmC;AAAA,EACxD,CAAC;AAMD,MAAI,SAAS;AACX,UAAM,SAAS,mBAAmB,OAAO;AAAA,EAC3C;AAMA,MAAI,gBAAgB;AAClB,UAAM,SAAS,qBAAqB;AAAA,MAClC,WAAW;AAAA,MACX,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AAKA,MAAI,QAAQ,iBAAiB;AAC3B,UAAM,SAAS,gBAAgB,iBAAiB;AAAA,EAClD,OAAO;AACL,UAAM,SAAS,sBAAsB,iBAAiB;AAAA,EACxD;AACF;","names":[]}