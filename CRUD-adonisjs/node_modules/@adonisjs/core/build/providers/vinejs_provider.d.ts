import { BaseLiteralType } from '@vinejs/vine';
import type { Validation, FieldContext, FieldOptions } from '@vinejs/vine/types';
import type { MultipartFile, FileValidationOptions } from '@adonisjs/bodyparser/types';
import type { ApplicationService } from '../src/types.js';
import { RequestValidator } from '../modules/http/main.js';
/**
 * Validation options accepted by the "file" rule
 */
export type FileRuleValidationOptions = Partial<FileValidationOptions> | ((field: FieldContext) => Partial<FileValidationOptions>);
/**
 * Extend VineJS
 */
declare module '@vinejs/vine' {
    interface Vine {
        file(options?: FileRuleValidationOptions): VineMultipartFile;
    }
}
/**
 * Extend HTTP request class
 */
declare module '@adonisjs/core/http' {
    interface Request extends RequestValidator {
    }
}
/**
 * Represents a multipart file uploaded via multipart/form-data HTTP
 * request.
 */
declare class VineMultipartFile extends BaseLiteralType<MultipartFile, MultipartFile, MultipartFile> {
    #private;
    constructor(validationOptions?: FileRuleValidationOptions, options?: FieldOptions, validations?: Validation<any>[]);
    clone(): this;
}
/**
 * The Edge service provider configures Edge to work within
 * an AdonisJS application environment
 */
export default class VineJSServiceProvider {
    protected app: ApplicationService;
    constructor(app: ApplicationService);
    boot(): void;
}
export {};
