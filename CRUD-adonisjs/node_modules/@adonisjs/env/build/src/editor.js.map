{"version":3,"sources":["../../src/editor.ts"],"sourcesContent":["/*\n * @adonisjs/env\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport splitLines from 'split-lines'\nimport lodash from '@poppinss/utils/lodash'\nimport { writeFile } from 'node:fs/promises'\n\nimport { EnvLoader } from './loader.js'\n\nexport class EnvEditor {\n  #appRoot: URL\n  #loader: EnvLoader\n  #files: { contents: string[]; path: string }[] = []\n\n  /**\n   * Creates an instance of env editor and loads .env files\n   * contents.\n   */\n  static async create(appRoot: URL) {\n    const editor = new EnvEditor(appRoot)\n    await editor.load()\n\n    return editor\n  }\n\n  constructor(appRoot: URL) {\n    this.#appRoot = appRoot\n    this.#loader = new EnvLoader(this.#appRoot, true)\n  }\n\n  /**\n   * Loads .env files for editing. Only \".env\" and \".env.example\"\n   * files are picked for editing.\n   */\n  async load() {\n    const envFiles = await this.#loader.load()\n\n    this.#files = envFiles\n      .filter(\n        (envFile) =>\n          envFile.fileExists &&\n          (envFile.path.endsWith('.env') || envFile.path.endsWith('.env.example'))\n      )\n      .map((envFile) => {\n        return {\n          contents: splitLines(envFile.contents.trim()),\n          path: envFile.path,\n        }\n      })\n  }\n\n  /**\n   * Add key-value pair to the dot-env files.\n   * If `withEmptyExampleValue` is true then the key will be added with an empty value\n   * to the `.env.example` file.\n   */\n  add(key: string, value: string | number | boolean, withEmptyExampleValue = false) {\n    this.#files.forEach((file) => {\n      let entryIndex = file.contents.findIndex((line) => line.startsWith(`${key}=`))\n\n      entryIndex = entryIndex === -1 ? file.contents.length : entryIndex\n\n      if (withEmptyExampleValue && file.path.endsWith('.env.example')) {\n        lodash.set(file.contents, entryIndex, `${key}=`)\n      } else {\n        lodash.set(file.contents, entryIndex, `${key}=${value}`)\n      }\n    })\n  }\n\n  toJSON() {\n    return this.#files\n  }\n\n  /**\n   * Save changes to the disk\n   */\n  async save() {\n    await Promise.all(\n      this.#files.map((file) => {\n        return writeFile(file.path, file.contents.join('\\n'))\n      })\n    )\n  }\n}\n"],"mappings":";;;;;AASA,OAAO,gBAAgB;AACvB,OAAO,YAAY;AACnB,SAAS,iBAAiB;AAInB,IAAM,YAAN,MAAM,WAAU;AAAA,EACrB;AAAA,EACA;AAAA,EACA,SAAiD,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlD,aAAa,OAAO,SAAc;AAChC,UAAM,SAAS,IAAI,WAAU,OAAO;AACpC,UAAM,OAAO,KAAK;AAElB,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,SAAc;AACxB,SAAK,WAAW;AAChB,SAAK,UAAU,IAAI,UAAU,KAAK,UAAU,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,OAAO;AACX,UAAM,WAAW,MAAM,KAAK,QAAQ,KAAK;AAEzC,SAAK,SAAS,SACX;AAAA,MACC,CAAC,YACC,QAAQ,eACP,QAAQ,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,SAAS,cAAc;AAAA,IAC1E,EACC,IAAI,CAAC,YAAY;AAChB,aAAO;AAAA,QACL,UAAU,WAAW,QAAQ,SAAS,KAAK,CAAC;AAAA,QAC5C,MAAM,QAAQ;AAAA,MAChB;AAAA,IACF,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,KAAa,OAAkC,wBAAwB,OAAO;AAChF,SAAK,OAAO,QAAQ,CAAC,SAAS;AAC5B,UAAI,aAAa,KAAK,SAAS,UAAU,CAAC,SAAS,KAAK,WAAW,GAAG,GAAG,GAAG,CAAC;AAE7E,mBAAa,eAAe,KAAK,KAAK,SAAS,SAAS;AAExD,UAAI,yBAAyB,KAAK,KAAK,SAAS,cAAc,GAAG;AAC/D,eAAO,IAAI,KAAK,UAAU,YAAY,GAAG,GAAG,GAAG;AAAA,MACjD,OAAO;AACL,eAAO,IAAI,KAAK,UAAU,YAAY,GAAG,GAAG,IAAI,KAAK,EAAE;AAAA,MACzD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,SAAS;AACP,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO;AACX,UAAM,QAAQ;AAAA,MACZ,KAAK,OAAO,IAAI,CAAC,SAAS;AACxB,eAAO,UAAU,KAAK,MAAM,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,MACtD,CAAC;AAAA,IACH;AAAA,EACF;AACF;","names":[]}