{"version":3,"sources":["../src/loader.ts","../src/debug.ts"],"sourcesContent":["/*\n * @adonisjs/env\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { fileURLToPath } from 'node:url'\nimport { readFile } from 'node:fs/promises'\nimport { isAbsolute, join } from 'node:path'\n\nimport debug from './debug.js'\n\n/**\n * Read the contents of one or more dot-env files. Following is how the files\n * are read.\n *\n * - Load file from the \"ENV_PATH\" environment file.\n *    (Raise error if file is missing)\n *\n * - If \"ENV_PATH\" is not defined, then find \".env\" file in the app root.\n *    (Ignore if file is missing)\n *\n * - Find \".env.[NODE_ENV]\" file in the app root.\n *    (Ignore if file is missing)\n *\n * ```ts\n * const loader = new EnvLoader(new URL('./', import.meta.url))\n *\n * const { envContents, currentEnvContents } = await loader.load()\n *\n * // envContents: Contents of .env or file specified via ENV_PATH\n * // currentEnvContents: Contents of .env.[NODE_ENV] file\n * ```\n */\nexport class EnvLoader {\n  #appRoot: string\n  #loadExampleFile: boolean\n\n  constructor(appRoot: string | URL, loadExampleFile: boolean = false) {\n    this.#appRoot = typeof appRoot === 'string' ? appRoot : fileURLToPath(appRoot)\n    this.#loadExampleFile = loadExampleFile\n  }\n\n  /**\n   * Optionally read a file from the disk\n   */\n  async #loadFile(filePath: string | URL): Promise<{ fileExists: boolean; contents: string }> {\n    try {\n      const contents = await readFile(filePath, 'utf-8')\n      return { contents, fileExists: true }\n    } catch (error) {\n      /* c8 ignore next 3 */\n      if (error.code !== 'ENOENT') {\n        throw error\n      }\n\n      return { contents: '', fileExists: false }\n    }\n  }\n\n  /**\n   * Load contents of the main dot-env file and the current\n   * environment dot-env file\n   */\n  async load(): Promise<{ contents: string; path: string; fileExists: boolean }[]> {\n    const ENV_PATH = process.env.ENV_PATH\n    const NODE_ENV = process.env.NODE_ENV\n    const envFiles: { path: string; contents: string; fileExists: boolean }[] = []\n\n    if (debug.enabled) {\n      debug('ENV_PATH variable is %s', ENV_PATH ? 'set' : 'not set')\n      debug('NODE_ENV variable is %s', NODE_ENV ? 'set' : 'not set')\n    }\n\n    /**\n     * Base path to load .env files from\n     */\n    const baseEnvPath = ENV_PATH\n      ? isAbsolute(ENV_PATH)\n        ? ENV_PATH\n        : join(this.#appRoot, ENV_PATH)\n      : this.#appRoot\n\n    if (debug.enabled) {\n      debug('dot-env files base path \"%s\"', baseEnvPath)\n    }\n\n    /**\n     * 1st\n     * The top most priority is given to the \".env.[NODE_ENV].local\" file\n     */\n    if (NODE_ENV) {\n      const nodeEnvLocalFile = join(baseEnvPath, `.env.${NODE_ENV}.local`)\n      envFiles.push({\n        path: nodeEnvLocalFile,\n        ...(await this.#loadFile(nodeEnvLocalFile)),\n      })\n    }\n\n    /**\n     * 2nd\n     * Next, we give priority to the \".env.local\" file\n     */\n    if (!NODE_ENV || !['test', 'testing'].includes(NODE_ENV)) {\n      const envLocalFile = join(baseEnvPath, '.env.local')\n      envFiles.push({\n        path: envLocalFile,\n        ...(await this.#loadFile(envLocalFile)),\n      })\n    }\n\n    /**\n     * 3rd\n     * Next, we give priority to the \".env.[NODE_ENV]\" file\n     */\n    if (NODE_ENV) {\n      const nodeEnvFile = join(baseEnvPath, `.env.${NODE_ENV}`)\n      envFiles.push({\n        path: nodeEnvFile,\n        ...(await this.#loadFile(nodeEnvFile)),\n      })\n    }\n\n    /**\n     * Finally, we push the contents of the \".env\" file.\n     */\n    const envFile = join(baseEnvPath, '.env')\n    envFiles.push({\n      path: envFile,\n      ...(await this.#loadFile(envFile)),\n    })\n\n    /**\n     * Load example file\n     */\n    if (this.#loadExampleFile) {\n      const envExampleFile = join(baseEnvPath, '.env.example')\n      envFiles.push({\n        path: envExampleFile,\n        ...(await this.#loadFile(envExampleFile)),\n      })\n    }\n\n    return envFiles\n  }\n}\n","/*\n * @adonisjs/env\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\nexport default debuglog('adonisjs:env')\n"],"mappings":";;;;;;;AASA,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AACzB,SAAS,YAAY,YAAY;;;ACFjC,SAAS,gBAAgB;AACzB,IAAO,gBAAQ,SAAS,cAAc;;;AD2B/B,IAAM,YAAN,MAAgB;AAAA,EACrB;AAAA,EACA;AAAA,EAEA,YAAY,SAAuB,kBAA2B,OAAO;AACnE,SAAK,WAAW,OAAO,YAAY,WAAW,UAAU,cAAc,OAAO;AAC7E,SAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU,UAA4E;AAC1F,QAAI;AACF,YAAM,WAAW,MAAM,SAAS,UAAU,OAAO;AACjD,aAAO,EAAE,UAAU,YAAY,KAAK;AAAA,IACtC,SAAS,OAAO;AAEd,UAAI,MAAM,SAAS,UAAU;AAC3B,cAAM;AAAA,MACR;AAEA,aAAO,EAAE,UAAU,IAAI,YAAY,MAAM;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,OAA2E;AAC/E,UAAM,WAAW,QAAQ,IAAI;AAC7B,UAAM,WAAW,QAAQ,IAAI;AAC7B,UAAM,WAAsE,CAAC;AAE7E,QAAI,cAAM,SAAS;AACjB,oBAAM,2BAA2B,WAAW,QAAQ,SAAS;AAC7D,oBAAM,2BAA2B,WAAW,QAAQ,SAAS;AAAA,IAC/D;AAKA,UAAM,cAAc,WAChB,WAAW,QAAQ,IACjB,WACA,KAAK,KAAK,UAAU,QAAQ,IAC9B,KAAK;AAET,QAAI,cAAM,SAAS;AACjB,oBAAM,gCAAgC,WAAW;AAAA,IACnD;AAMA,QAAI,UAAU;AACZ,YAAM,mBAAmB,KAAK,aAAa,QAAQ,QAAQ,QAAQ;AACnE,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,GAAI,MAAM,KAAK,UAAU,gBAAgB;AAAA,MAC3C,CAAC;AAAA,IACH;AAMA,QAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,SAAS,EAAE,SAAS,QAAQ,GAAG;AACxD,YAAM,eAAe,KAAK,aAAa,YAAY;AACnD,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,GAAI,MAAM,KAAK,UAAU,YAAY;AAAA,MACvC,CAAC;AAAA,IACH;AAMA,QAAI,UAAU;AACZ,YAAM,cAAc,KAAK,aAAa,QAAQ,QAAQ,EAAE;AACxD,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,GAAI,MAAM,KAAK,UAAU,WAAW;AAAA,MACtC,CAAC;AAAA,IACH;AAKA,UAAM,UAAU,KAAK,aAAa,MAAM;AACxC,aAAS,KAAK;AAAA,MACZ,MAAM;AAAA,MACN,GAAI,MAAM,KAAK,UAAU,OAAO;AAAA,IAClC,CAAC;AAKD,QAAI,KAAK,kBAAkB;AACzB,YAAM,iBAAiB,KAAK,aAAa,cAAc;AACvD,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,GAAI,MAAM,KAAK,UAAU,cAAc;AAAA,MACzC,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AACF;","names":[]}