{"version":3,"sources":["../src/repl.ts"],"sourcesContent":["/*\n * @adonisjs/repl\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport stringWidth from 'string-width'\nimport useColors from '@poppinss/colors'\nimport type { Colors } from '@poppinss/colors/types'\nimport { inspect, promisify as utilPromisify } from 'node:util'\nimport { type REPLServer, Recoverable, type ReplOptions, start as startRepl } from 'node:repl'\n\nimport type { MethodCallback, MethodOptions, Compiler } from './types.js'\n\n/**\n * List of node global properties to remove from the\n * ls inspect\n */\nconst GLOBAL_NODE_PROPERTIES = [\n  'performance',\n  'global',\n  'clearInterval',\n  'clearTimeout',\n  'setInterval',\n  'setTimeout',\n  'queueMicrotask',\n  'clearImmediate',\n  'setImmediate',\n  'structuredClone',\n  'atob',\n  'btoa',\n  'fetch',\n  'crypto',\n  'navigator',\n]\n\nconst TS_UTILS_HELPERS = [\n  '__extends',\n  '__assign',\n  '__rest',\n  '__decorate',\n  '__param',\n  '__esDecorate',\n  '__runInitializers',\n  '__propKey',\n  '__setFunctionName',\n  '__metadata',\n  '__awaiter',\n  '__generator',\n  '__exportStar',\n  '__createBinding',\n  '__values',\n  '__read',\n  '__spread',\n  '__spreadArrays',\n  '__spreadArray',\n  '__await',\n  '__asyncGenerator',\n  '__asyncDelegator',\n  '__asyncValues',\n  '__makeTemplateObject',\n  '__importStar',\n  '__importDefault',\n  '__classPrivateFieldGet',\n  '__classPrivateFieldSet',\n  '__classPrivateFieldIn',\n]\n\nexport class Repl {\n  #replOptions: ReplOptions\n\n  /**\n   * Length of the longest custom method name. We need to show a\n   * symmetric view of custom methods and their description\n   */\n  #longestCustomMethodName = 0\n\n  /**\n   * Reference to the original `eval` method of the repl server.\n   * Since we are monkey patching it, we need a reference to it\n   * to call it after our custom logic\n   */\n  #originalEval?: Function\n\n  /**\n   * Compiler that will transform the user input just\n   * before evaluation\n   */\n  #compiler?: Compiler\n\n  /**\n   * Path to the history file\n   */\n  #historyFilePath?: string\n\n  /**\n   * Set of registered ready callbacks\n   */\n  #onReadyCallbacks: ((repl: Repl) => void)[] = []\n\n  /**\n   * A set of registered custom methods\n   */\n  #customMethods: {\n    [name: string]: { handler: MethodCallback; options: MethodOptions & { width: number } }\n  } = {}\n\n  /**\n   * Colors reference\n   */\n  colors: Colors = useColors.ansi()\n\n  /**\n   * Reference to the repl server. Available after the `start` method\n   * is invoked\n   */\n  server?: REPLServer\n\n  constructor(options?: { compiler?: Compiler; historyFilePath?: string } & ReplOptions) {\n    const { compiler, historyFilePath, ...rest } = options || {}\n    this.#compiler = compiler\n    this.#historyFilePath = historyFilePath\n    this.#replOptions = rest\n  }\n\n  /**\n   * Registering custom methods with the server context by wrapping\n   * them inside a function and passes the REPL server instance\n   * to the method\n   */\n  #registerCustomMethodWithContext(name: string) {\n    const customMethod = this.#customMethods[name]\n    if (!customMethod) {\n      return\n    }\n\n    /**\n     * Wrap handler\n     */\n    const handler = (...args: any[]) => customMethod.handler(this, ...args)\n\n    /**\n     * Re-define the function name to be more description\n     */\n    Object.defineProperty(handler, 'name', { value: customMethod.handler.name })\n\n    /**\n     * Register with the context\n     */\n    this.server!.context[name] = handler\n  }\n\n  /**\n   * Setup context with default globals\n   */\n  #setupContext() {\n    /**\n     * Register \"clear\" method\n     */\n    this.addMethod(\n      'clear',\n      function clear(repl: Repl, key: string) {\n        if (!key) {\n          console.log(repl.colors.red('Define a property name to remove from the context'))\n        } else {\n          delete repl.server!.context[key]\n        }\n        repl.server!.displayPrompt()\n      },\n      {\n        description: 'Clear a property from the REPL context',\n        usage: `clear ${this.colors.gray('(propertyName)')}`,\n      }\n    )\n\n    /**\n     * Register \"p\" method\n     */\n    this.addMethod(\n      'p',\n      function promisify(_: Repl, fn: Function) {\n        return utilPromisify(fn)\n      },\n      {\n        description: 'Promisify a function. Similar to Node.js \"util.promisify\"',\n        usage: `p ${this.colors.gray('(function)')}`,\n      }\n    )\n\n    /**\n     * Register all custom methods with the context\n     */\n    Object.keys(this.#customMethods).forEach((name) => {\n      this.#registerCustomMethodWithContext(name)\n    })\n  }\n\n  /**\n   * Find if the error is recoverable or not\n   */\n  #isRecoverableError(error: any) {\n    return /^(Unexpected end of input|Unexpected token|' expected)/.test(error.message)\n  }\n\n  /**\n   * Custom eval method to execute the user code\n   *\n   * Basically we are monkey patching the original eval method, because\n   * we want to:\n   * - Compile the user code before executing it\n   * - And also benefit from the original eval method that supports\n   *   cool features like top level await\n   */\n  #eval(\n    code: string,\n    context: any,\n    filename: string,\n    callback: (err: Error | null, result?: any) => void\n  ) {\n    try {\n      const compiled = this.#compiler ? this.#compiler!.compile(code, filename) : code\n      return this.#originalEval!(compiled, context, filename, callback)\n    } catch (error) {\n      if (this.#isRecoverableError(error)) {\n        callback(new Recoverable(error), null)\n        return\n      }\n\n      callback(error, null)\n    }\n  }\n\n  /**\n   * Setup history file\n   */\n  #setupHistory() {\n    if (!this.#historyFilePath) {\n      return\n    }\n\n    this.server!.setupHistory(this.#historyFilePath, (error) => {\n      if (!error) {\n        return\n      }\n\n      console.log(this.colors.red('Unable to write to the history file. Exiting'))\n      console.error(error)\n      process.exit(1)\n    })\n  }\n\n  /**\n   * Prints the help for the context properties\n   */\n  #printContextHelp() {\n    /**\n     * Print context properties\n     */\n    console.log('')\n    console.log(this.colors.green('CONTEXT PROPERTIES/METHODS:'))\n\n    const context = Object.keys(this.server!.context).reduce(\n      (result, key) => {\n        if (\n          !this.#customMethods[key] &&\n          !GLOBAL_NODE_PROPERTIES.includes(key) &&\n          !TS_UTILS_HELPERS.includes(key)\n        ) {\n          result[key] = this.server!.context[key]\n        }\n\n        return result\n      },\n      {} as Record<string, any>\n    )\n\n    console.log(inspect(context, false, 1, true))\n  }\n\n  /**\n   * Prints the help for the custom methods\n   */\n  #printCustomMethodsHelp() {\n    /**\n     * Print loader methods\n     */\n    console.log('')\n    console.log(this.colors.green('GLOBAL METHODS:'))\n\n    Object.keys(this.#customMethods).forEach((method) => {\n      const { options } = this.#customMethods[method]\n\n      const usage = this.colors.yellow(options.usage || method)\n      const spaces = ' '.repeat(this.#longestCustomMethodName - options.width + 2)\n      const description = this.colors.dim(options.description || '')\n\n      console.log(`${usage}${spaces}${description}`)\n    })\n  }\n\n  /**\n   * Prints the context to the console\n   */\n  #ls() {\n    this.#printCustomMethodsHelp()\n    this.#printContextHelp()\n    this.server!.displayPrompt()\n  }\n\n  /**\n   * Notify by writing to the console\n   */\n  notify(message: string) {\n    console.log(this.colors.yellow().italic(message))\n    if (this.server) {\n      this.server.displayPrompt()\n    }\n  }\n\n  /**\n   * Register a callback to be invoked once the server is ready\n   */\n  ready(callback: (repl: Repl) => void): this {\n    this.#onReadyCallbacks.push(callback)\n    return this\n  }\n\n  /**\n   * Register a custom loader function to be added to the context\n   */\n  addMethod(name: string, handler: MethodCallback, options?: MethodOptions): this {\n    const width = stringWidth(options?.usage || name)\n    if (width > this.#longestCustomMethodName) {\n      this.#longestCustomMethodName = width\n    }\n\n    this.#customMethods[name] = { handler, options: Object.assign({ width }, options) }\n\n    /**\n     * Register method right away when server has been started\n     */\n    if (this.server) {\n      this.#registerCustomMethodWithContext(name)\n    }\n\n    return this\n  }\n\n  /**\n   * Returns the collection of registered methods\n   */\n  getMethods() {\n    return this.#customMethods\n  }\n\n  /**\n   * Register a compiler. Make sure register the compiler before\n   * calling the start method\n   */\n  useCompiler(compiler: Compiler): this {\n    this.#compiler = compiler\n    return this\n  }\n\n  /**\n   * Start the REPL server\n   */\n  start() {\n    console.log('')\n    this.notify('Type \".ls\" to a view list of available context methods/properties')\n\n    this.server = startRepl({\n      prompt: `> ${this.#compiler?.supportsTypescript ? '(ts) ' : '(js) '}`,\n      input: process.stdin,\n      output: process.stdout,\n      terminal: process.stdout.isTTY && !Number.parseInt(process.env.NODE_NO_READLINE!, 10),\n      useGlobal: true,\n      ...this.#replOptions,\n    })\n\n    /**\n     * Define the `ls` command\n     */\n    this.server!.defineCommand('ls', {\n      help: 'View list of available context methods/properties',\n      action: this.#ls.bind(this),\n    })\n\n    /**\n     * Setup context and history\n     */\n    this.#setupContext()\n    this.#setupHistory()\n\n    /**\n     * Monkey patch the eval method\n     */\n    this.#originalEval = this.server.eval\n    // @ts-ignore\n    this.server.eval = this.#eval.bind(this)\n\n    /**\n     * Display prompt\n     */\n    this.server.displayPrompt()\n\n    /**\n     * Execute onReady callbacks\n     */\n    this.#onReadyCallbacks.forEach((callback) => callback(this))\n\n    return this\n  }\n}\n"],"mappings":"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","names":[]}