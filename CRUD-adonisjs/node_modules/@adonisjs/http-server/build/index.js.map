{"version":3,"sources":["../src/exception_handler.ts"],"sourcesContent":["/*\n * @adonisjs/http-server\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport is from '@sindresorhus/is'\nimport Macroable from '@poppinss/macroable'\nimport type { Level } from '@adonisjs/logger/types'\n\nimport { parseRange } from './helpers.js'\nimport * as errors from './exceptions.js'\nimport type { HttpContext } from './http_context/main.js'\nimport type { HttpError, StatusPageRange, StatusPageRenderer } from './types/server.js'\n\n/**\n * The base HTTP exception handler one can inherit from to handle\n * HTTP exceptions.\n *\n * The HTTP exception handler has support for\n *\n * - Ability to render exceptions by calling the render method on the exception.\n * - Rendering status pages\n * - Pretty printing errors during development\n * - Transforming errors to JSON or HTML using content negotiation\n * - Reporting errors\n */\nexport class ExceptionHandler extends Macroable {\n  /**\n   * Computed from the status pages property\n   */\n  #expandedStatusPages?: Record<number, StatusPageRenderer>\n\n  /**\n   * Whether or not to render debug info. When set to true, the errors\n   * will have the complete error stack.\n   */\n  protected debug: boolean = process.env.NODE_ENV !== 'production'\n\n  /**\n   * Whether or not to render status pages. When set to true, the unhandled\n   * errors with matching status codes will be rendered using a status\n   * page.\n   */\n  protected renderStatusPages: boolean = process.env.NODE_ENV === 'production'\n\n  /**\n   * A collection of error status code range and the view to render.\n   */\n  protected statusPages: Record<StatusPageRange, StatusPageRenderer> = {}\n\n  /**\n   * Enable/disable errors reporting\n   */\n  protected reportErrors: boolean = true\n\n  /**\n   * An array of exception classes to ignore when\n   * reporting an error\n   */\n  protected ignoreExceptions: any[] = [\n    errors.E_HTTP_EXCEPTION,\n    errors.E_ROUTE_NOT_FOUND,\n    errors.E_CANNOT_LOOKUP_ROUTE,\n    errors.E_HTTP_REQUEST_ABORTED,\n  ]\n\n  /**\n   * An array of HTTP status codes to ignore when reporting\n   * an error\n   */\n  protected ignoreStatuses: number[] = [400, 422, 401]\n\n  /**\n   * An array of error codes to ignore when reporting\n   * an error\n   */\n  protected ignoreCodes: string[] = []\n\n  /**\n   * Expands status pages\n   */\n  #expandStatusPages() {\n    if (!this.#expandedStatusPages) {\n      this.#expandedStatusPages = Object.keys(this.statusPages).reduce(\n        (result, range) => {\n          const renderer = this.statusPages[range as StatusPageRange]\n          result = Object.assign(result, parseRange(range, renderer))\n          return result\n        },\n        {} as Record<number, StatusPageRenderer>\n      )\n    }\n\n    return this.#expandedStatusPages\n  }\n\n  /**\n   * Forcefully tweaking the type of the error object to\n   * have known properties.\n   */\n  #toHttpError(error: unknown): HttpError {\n    const httpError: any = is.object(error) ? error : new Error(String(error))\n    if (!httpError.message) {\n      httpError.message = 'Internal server error'\n    }\n    if (!httpError.status) {\n      httpError.status = 500\n    }\n    return httpError\n  }\n\n  /**\n   * Error reporting context\n   */\n  protected context(ctx: HttpContext): any {\n    const requestId = ctx.request.id()\n    return requestId\n      ? {\n          'x-request-id': requestId,\n        }\n      : {}\n  }\n\n  /**\n   * Returns the log level for an error based upon the error\n   * status code.\n   */\n  protected getErrorLogLevel(error: HttpError): Level {\n    if (error.status >= 500) {\n      return 'error'\n    }\n\n    if (error.status >= 400) {\n      return 'warn'\n    }\n\n    return 'info'\n  }\n\n  /**\n   * A boolean to control if errors should be rendered with\n   * all the available debugging info.\n   */\n  protected isDebuggingEnabled(_: HttpContext): boolean {\n    return this.debug\n  }\n\n  /**\n   * Returns a boolean by checking if an error should be reported.\n   */\n  protected shouldReport(error: HttpError): boolean {\n    if (this.reportErrors === false) {\n      return false\n    }\n\n    if (this.ignoreStatuses.includes(error.status)) {\n      return false\n    }\n\n    if (error.code && this.ignoreCodes.includes(error.code)) {\n      return false\n    }\n\n    if (this.ignoreExceptions.find((exception) => error instanceof exception)) {\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Renders an error to JSON response\n   */\n  async renderErrorAsJSON(error: HttpError, ctx: HttpContext) {\n    if (this.isDebuggingEnabled(ctx)) {\n      const { default: Youch } = await import('youch')\n      const json = await new Youch(error, ctx.request.request).toJSON()\n      ctx.response.status(error.status).send(json.error)\n      return\n    }\n\n    ctx.response.status(error.status).send({ message: error.message })\n  }\n\n  /**\n   * Renders an error to JSON API response\n   */\n  async renderErrorAsJSONAPI(error: HttpError, ctx: HttpContext) {\n    if (this.isDebuggingEnabled(ctx)) {\n      const { default: Youch } = await import('youch')\n      const json = await new Youch(error, ctx.request.request).toJSON()\n      ctx.response.status(error.status).send(json.error)\n      return\n    }\n\n    ctx.response.status(error.status).send({\n      errors: [\n        {\n          title: error.message,\n          code: error.code,\n          status: error.status,\n        },\n      ],\n    })\n  }\n\n  /**\n   * Renders an error to HTML response\n   */\n  async renderErrorAsHTML(error: HttpError, ctx: HttpContext) {\n    if (this.isDebuggingEnabled(ctx)) {\n      const { default: Youch } = await import('youch')\n      const html = await new Youch(error, ctx.request.request).toHTML({\n        cspNonce: 'nonce' in ctx.response ? ctx.response.nonce : undefined,\n      })\n      ctx.response.status(error.status).send(html)\n      return\n    }\n\n    ctx.response.status(error.status).send(`<p> ${error.message} </p>`)\n  }\n\n  /**\n   * Renders the validation error message to a JSON\n   * response\n   */\n  async renderValidationErrorAsJSON(error: HttpError, ctx: HttpContext) {\n    ctx.response.status(error.status).send({\n      errors: error.messages,\n    })\n  }\n\n  /**\n   * Renders the validation error message as per JSON API\n   * spec\n   */\n  async renderValidationErrorAsJSONAPI(error: HttpError, ctx: HttpContext) {\n    ctx.response.status(error.status).send({\n      errors: error.messages.map((message: any) => {\n        return {\n          title: message.message,\n          code: message.rule,\n          source: {\n            pointer: message.field,\n          },\n          meta: message.meta,\n        }\n      }),\n    })\n  }\n\n  /**\n   * Renders the validation error as an HTML string\n   */\n  async renderValidationErrorAsHTML(error: HttpError, ctx: HttpContext) {\n    ctx.response\n      .status(error.status)\n      .type('html')\n      .send(\n        error.messages\n          .map((message: any) => {\n            return `${message.field} - ${message.message}`\n          })\n          .join('<br />')\n      )\n  }\n\n  /**\n   * Renders the error to response\n   */\n  renderError(error: HttpError, ctx: HttpContext) {\n    switch (ctx.request.accepts(['html', 'application/vnd.api+json', 'json'])) {\n      case 'application/vnd.api+json':\n        return this.renderErrorAsJSONAPI(error, ctx)\n      case 'json':\n        return this.renderErrorAsJSON(error, ctx)\n      case 'html':\n      default:\n        return this.renderErrorAsHTML(error, ctx)\n    }\n  }\n\n  /**\n   * Renders the validation error to response\n   */\n  renderValidationError(error: HttpError, ctx: HttpContext) {\n    switch (ctx.request.accepts(['html', 'application/vnd.api+json', 'json'])) {\n      case 'application/vnd.api+json':\n        return this.renderValidationErrorAsJSONAPI(error, ctx)\n      case 'json':\n        return this.renderValidationErrorAsJSON(error, ctx)\n      case 'html':\n      default:\n        return this.renderValidationErrorAsHTML(error, ctx)\n    }\n  }\n\n  /**\n   * Reports an error during an HTTP request\n   */\n  async report(error: unknown, ctx: HttpContext) {\n    const httpError = this.#toHttpError(error)\n    if (!this.shouldReport(httpError)) {\n      return\n    }\n\n    if (typeof httpError.report === 'function') {\n      httpError.report(httpError, ctx)\n      return\n    }\n\n    /**\n     * Log the error using the logger\n     */\n    const level = this.getErrorLogLevel(httpError)\n    ctx.logger.log(\n      level,\n      {\n        ...(level === 'error' || level === 'fatal' ? { err: httpError } : {}),\n        ...this.context(ctx),\n      },\n      httpError.message\n    )\n  }\n\n  /**\n   * Handles the error during the HTTP request.\n   */\n  async handle(error: unknown, ctx: HttpContext) {\n    const httpError = this.#toHttpError(error)\n\n    /**\n     * Self handle exception\n     */\n    if (typeof httpError.handle === 'function') {\n      return httpError.handle(httpError, ctx)\n    }\n\n    /**\n     * Handle validation error using the validation error\n     * renderers\n     */\n    if (httpError.code === 'E_VALIDATION_ERROR' && 'messages' in httpError) {\n      return this.renderValidationError(httpError, ctx)\n    }\n\n    /**\n     * Render status page\n     */\n    const statusPages = this.#expandStatusPages()\n    if (this.renderStatusPages && statusPages[httpError.status]) {\n      const statusPageResponse = await statusPages[httpError.status](httpError, ctx)\n\n      /**\n       * Use return value and convert it into a response\n       */\n      if (\n        statusPageResponse !== undefined && // Return value is explicitly defined\n        !ctx.response.hasLazyBody && // Lazy body is not set\n        statusPageResponse !== ctx.response // Return value is not the instance of response object\n      ) {\n        return ctx.response.safeStatus(httpError.status).send(statusPageResponse)\n      }\n      return statusPageResponse\n    }\n\n    /**\n     * Use the format renderers.\n     */\n    return this.renderError(httpError, ctx)\n  }\n}\n"],"mappings":"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","names":[]}