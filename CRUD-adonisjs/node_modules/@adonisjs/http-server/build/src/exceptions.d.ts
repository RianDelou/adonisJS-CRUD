/// <reference types="node" resolution-mode="require"/>
import { Exception } from '@poppinss/utils';
import type { HttpContext } from './http_context/main.js';
export declare const E_ROUTE_NOT_FOUND: new (args: [method: string, url: string], options?: ErrorOptions | undefined) => Exception;
export declare const E_CANNOT_LOOKUP_ROUTE: new (args: [routeIdentifier: string], options?: ErrorOptions | undefined) => Exception;
export declare const E_HTTP_EXCEPTION: {
    new (message?: string | undefined, options?: (ErrorOptions & {
        code?: string | undefined;
        status?: number | undefined;
    }) | undefined): {
        body: any;
        name: string;
        help?: string | undefined;
        code?: string | undefined;
        status: number;
        toString(): string;
        readonly [Symbol.toStringTag]: string;
        message: string;
        stack?: string | undefined;
        cause?: unknown;
    };
    code: string;
    /**
     * This method returns an instance of the exception class
     */
    invoke(body: any, status: number, code?: string): {
        body: any;
        name: string;
        help?: string | undefined;
        code?: string | undefined;
        status: number;
        toString(): string;
        readonly [Symbol.toStringTag]: string;
        message: string;
        stack?: string | undefined;
        cause?: unknown;
    };
    help?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    captureStackTrace(targetObject: object, constructorOpt?: Function | undefined): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
export declare const E_HTTP_REQUEST_ABORTED: {
    new (message?: string | undefined, options?: (ErrorOptions & {
        code?: string | undefined;
        status?: number | undefined;
    }) | undefined): {
        handle(error: any, ctx: HttpContext): void;
        body: any;
        name: string;
        help?: string | undefined;
        code?: string | undefined;
        status: number;
        toString(): string;
        readonly [Symbol.toStringTag]: string;
        message: string;
        stack?: string | undefined;
        cause?: unknown;
    };
    code: string;
    /**
     * This method returns an instance of the exception class
     */
    invoke(body: any, status: number, code?: string): {
        body: any;
        name: string;
        help?: string | undefined;
        code?: string | undefined;
        status: number;
        toString(): string;
        readonly [Symbol.toStringTag]: string;
        message: string;
        stack?: string | undefined;
        cause?: unknown;
    };
    help?: string | undefined;
    status?: number | undefined;
    message?: string | undefined;
    captureStackTrace(targetObject: object, constructorOpt?: Function | undefined): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
