"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const runner_1 = require("@japa/runner");
const ts_eslint_1 = require("@typescript-eslint/utils/ts-eslint");
const prefer_lazy_controller_import_1 = __importDefault(require("../src/rules/prefer_lazy_controller_import"));
const valids = [
    `
  import router from "@adonisjs/core/services/router"
  const lazyController = () => import("./controller")

  router.get("/", "HomeController.index")
  router.get("/test", [lazyController, 'index'])
  `,
    `
  import router from "@adonisjs/core/services/router"
  import middleware from '#start/middleware'

  const lazyController = () => import("./controller")

  router.get("/", "HomeController.index").middleware(middleware.auth())
  router.get("/test", [lazyController, 'index']).middleware(middleware.auth())
  `,
];
const invalids = [
    [
        `
    import router from "@adonisjs/core/services/router"
    import HomeController from "./controller"

    router.group(() => {
      router.get("/", [HomeController, 'index'])
    })
    `,
        `
    import router from "@adonisjs/core/services/router"
    const HomeController = () => import("./controller")

    router.group(() => {
      router.get("/", [HomeController, 'index'])
    })
    `,
    ],
    /**
     * When used with route.resource
     */
    [
        `
    import router from "@adonisjs/core/services/router"
    import ProjectThreadsController from "./controller"

    router.resource("project/:id/threads", ProjectThreadsController)
    `,
        `
    import router from "@adonisjs/core/services/router"
    const ProjectThreadsController = () => import("./controller")

    router.resource("project/:id/threads", ProjectThreadsController)
    `,
    ],
];
(0, runner_1.test)('Prefer lazy controller import', ({ assert }) => {
    const ruleTester = new ts_eslint_1.RuleTester({
        parser: require.resolve('@typescript-eslint/parser'),
    });
    ruleTester.run('prefer-lazy-controller-import', prefer_lazy_controller_import_1.default, {
        valid: valids,
        invalid: invalids.map((invalid) => ({
            code: invalid[0],
            output: invalid[1],
            errors: [{ messageId: 'preferLazyControllerImport' }],
        })),
    });
});
