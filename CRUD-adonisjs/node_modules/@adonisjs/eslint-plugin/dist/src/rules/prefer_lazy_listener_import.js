"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@typescript-eslint/utils");
const utils_2 = require("../utils");
exports.default = (0, utils_2.createEslintRule)({
    name: 'prefer-lazy-listener-import',
    defaultOptions: [],
    meta: {
        type: 'problem',
        fixable: 'code',
        docs: {
            description: 'Prefer lazy listener import over standard import',
            recommended: 'recommended',
        },
        schema: [],
        messages: {
            preferLazyListenerImport: 'Replace standard import with lazy listener import',
        },
    },
    create: function (context) {
        let importIdentifiers = [];
        let emitterIdentifier = '';
        let importNodes = [];
        function isEmitterOnCallExpression(node, routerIdentifier) {
            return (node.callee.type === utils_1.AST_NODE_TYPES.MemberExpression &&
                node.callee.object.type === utils_1.AST_NODE_TYPES.Identifier &&
                node.callee.object.name === routerIdentifier &&
                node.callee.property.type === utils_1.AST_NODE_TYPES.Identifier &&
                node.callee.property.name === 'on');
        }
        return {
            /**
             * Track all imported identifiers
             * Also get the local name of the emitter import
             */
            ImportDeclaration(node) {
                for (const specifier of node.specifiers) {
                    if (specifier.type === 'ImportDefaultSpecifier' || specifier.type === 'ImportSpecifier') {
                        importIdentifiers.push(specifier.local.name);
                        importNodes[specifier.local.name] = node;
                    }
                }
                if (node.source.value === '@adonisjs/core/services/emitter') {
                    if (node.specifiers[0] && node.specifiers[0].type === 'ImportDefaultSpecifier') {
                        emitterIdentifier = node.specifiers[0].local.name;
                    }
                }
            },
            CallExpression(node) {
                /**
                 * Check if we are calling emitter.on()
                 */
                if (!isEmitterOnCallExpression(node, emitterIdentifier)) {
                    return;
                }
                /**
                 * Ensure the second argument is an array
                 */
                const secondArgument = node.arguments[1];
                if (secondArgument.type !== utils_1.AST_NODE_TYPES.ArrayExpression) {
                    return;
                }
                for (const element of secondArgument.elements) {
                    /**
                     * If we are dealing with an Identifier that was imported
                     * through a standard import, then report it as an error
                     */
                    if (element.type !== 'Identifier' || !importIdentifiers.includes(element.name)) {
                        continue;
                    }
                    context.report({
                        node: importNodes[element.name],
                        messageId: 'preferLazyListenerImport',
                        fix(fixer) {
                            const importPath = importNodes[element.name].source.raw;
                            const newImportDeclaration = `const ${element.name} = () => import(${importPath})`;
                            return fixer.replaceText(importNodes[element.name], newImportDeclaration);
                        },
                    });
                }
            },
        };
    },
});
