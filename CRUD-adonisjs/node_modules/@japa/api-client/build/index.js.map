{"version":3,"sources":["../src/client.ts","../src/request.ts","../src/response.ts","../src/utils.ts","../index.ts"],"sourcesContent":["/*\n * @japa/api-client\n *\n * (c) Japa.dev\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Macroable from '@poppinss/macroable'\nimport type { Assert } from '@japa/assert'\n\nimport { ApiRequest } from './request.js'\nimport { SetupHandler, TeardownHandler, CookiesSerializer } from './types.js'\n\n/**\n * ApiClient exposes the API to make HTTP requests in context of\n * testing.\n */\nexport class ApiClient extends Macroable {\n  /**\n   * Invoked when a new instance of request is created\n   */\n  static #onRequestHandlers: ((request: ApiRequest) => void)[] = []\n\n  /**\n   * Hooks handlers to pass onto the request\n   */\n  static #hooksHandlers: {\n    setup: SetupHandler[]\n    teardown: TeardownHandler[]\n  } = {\n    setup: [],\n    teardown: [],\n  }\n\n  static #customCookiesSerializer?: CookiesSerializer\n\n  #baseUrl?: string\n  #assert?: Assert\n\n  constructor(baseUrl?: string, assert?: Assert) {\n    super()\n\n    this.#baseUrl = baseUrl\n    this.#assert = assert\n  }\n\n  /**\n   * Remove all globally registered setup hooks\n   */\n  static clearSetupHooks() {\n    this.#hooksHandlers.setup = []\n    return this\n  }\n\n  /**\n   * Remove all globally registered teardown hooks\n   */\n  static clearTeardownHooks() {\n    this.#hooksHandlers.teardown = []\n    return this\n  }\n\n  /**\n   * Clear on request handlers registered using \"onRequest\"\n   * method\n   */\n  static clearRequestHandlers() {\n    this.#onRequestHandlers = []\n    return this\n  }\n\n  /**\n   * Register a handler to be invoked everytime a new request\n   * instance is created\n   */\n  static onRequest(handler: (request: ApiRequest) => void) {\n    this.#onRequestHandlers.push(handler)\n    return this\n  }\n\n  /**\n   * Register setup hooks. Setup hooks are called before the request\n   */\n  static setup(handler: SetupHandler) {\n    this.#hooksHandlers.setup.push(handler)\n    return this\n  }\n\n  /**\n   * Register teardown hooks. Teardown hooks are called before the request\n   */\n  static teardown(handler: TeardownHandler) {\n    this.#hooksHandlers.teardown.push(handler)\n    return this\n  }\n\n  /**\n   * Register a custom cookies serializer\n   */\n  static cookiesSerializer(serailizer: CookiesSerializer) {\n    this.#customCookiesSerializer = serailizer\n    return this\n  }\n\n  /**\n   * Create an instance of the request\n   */\n  request(endpoint: string, method: string) {\n    const hooks = (this.constructor as typeof ApiClient).#hooksHandlers\n    const requestHandlers = (this.constructor as typeof ApiClient).#onRequestHandlers\n    const cookiesSerializer = (this.constructor as typeof ApiClient).#customCookiesSerializer\n\n    let baseUrl = this.#baseUrl\n    const envHost = process.env.HOST\n    const envPort = process.env.PORT\n\n    /**\n     * Compute baseUrl from the HOST and the PORT env variables\n     * when no baseUrl is provided\n     */\n    if (!baseUrl && envHost && envPort) {\n      baseUrl = `http://${envHost}:${envPort}`\n    }\n\n    const request = new ApiRequest(\n      {\n        baseUrl,\n        method,\n        endpoint,\n        hooks,\n        serializers: { cookie: cookiesSerializer },\n      },\n      this.#assert\n    )\n\n    requestHandlers.forEach((handler) => handler(request))\n    return request\n  }\n\n  /**\n   * Create an instance of the request for GET method\n   */\n  get(endpoint: string) {\n    return this.request(endpoint, 'GET')\n  }\n\n  /**\n   * Create an instance of the request for POST method\n   */\n  post(endpoint: string) {\n    return this.request(endpoint, 'POST')\n  }\n\n  /**\n   * Create an instance of the request for PUT method\n   */\n  put(endpoint: string) {\n    return this.request(endpoint, 'PUT')\n  }\n\n  /**\n   * Create an instance of the request for PATCH method\n   */\n  patch(endpoint: string) {\n    return this.request(endpoint, 'PATCH')\n  }\n\n  /**\n   * Create an instance of the request for DELETE method\n   */\n  delete(endpoint: string) {\n    return this.request(endpoint, 'DELETE')\n  }\n\n  /**\n   * Create an instance of the request for HEAD method\n   */\n  head(endpoint: string) {\n    return this.request(endpoint, 'HEAD')\n  }\n\n  /**\n   * Create an instance of the request for OPTIONS method\n   */\n  options(endpoint: string) {\n    return this.request(endpoint, 'OPTIONS')\n  }\n}\n","/*\n * @japa/api-client\n *\n * (c) Japa.dev\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport cookie from 'cookie'\nimport Hooks from '@poppinss/hooks'\nimport type { Assert } from '@japa/assert'\nimport Macroable from '@poppinss/macroable'\nimport superagent, { Response, SuperAgentRequest } from 'superagent'\n\nimport { ApiResponse } from './response.js'\nimport {\n  SetupHandler,\n  RequestConfig,\n  MultipartValue,\n  RequestCookies,\n  TeardownHandler,\n  SuperAgentParser,\n  SuperAgentSerializer,\n  ApiRequestHooks,\n} from './types.js'\nimport {\n  dumpRequest,\n  dumpRequestBody,\n  dumpRequestCookies,\n  dumpRequestHeaders,\n  stackToError,\n} from './utils.js'\n\nconst DUMP_CALLS = {\n  request: dumpRequest,\n  body: dumpRequestBody,\n  cookies: dumpRequestCookies,\n  headers: dumpRequestHeaders,\n}\n\nexport class ApiRequest extends Macroable {\n  /**\n   * Register/remove custom superagent parser\n   */\n  static addParser = (contentType: string, parser: SuperAgentParser) => {\n    superagent.parse[contentType] = parser\n  }\n  static removeParser = (contentType: string) => {\n    delete superagent.parse[contentType]\n  }\n\n  /**\n   * Register/remove custom superagent serializers\n   */\n  static addSerializer = (contentType: string, serializer: SuperAgentSerializer) => {\n    superagent.serialize[contentType] = serializer\n  }\n  static removeSerializer = (contentType: string) => {\n    delete superagent.serialize[contentType]\n  }\n\n  /**\n   * Reference to registered hooks\n   */\n  hooks = new Hooks<ApiRequestHooks>()\n  #setupRunner!: ReturnType<Hooks<ApiRequestHooks>['runner']>\n  #teardownRunner!: ReturnType<Hooks<ApiRequestHooks>['runner']>\n\n  /**\n   * Reference to Assert module\n   */\n  #assert?: Assert\n\n  /**\n   * Dump calls\n   */\n  #valuesToDump: Set<'cookies' | 'body' | 'headers' | 'request'> = new Set()\n\n  /**\n   * The underlying super agent request\n   */\n  request: SuperAgentRequest\n\n  /**\n   * Cookies to be sent with the request\n   */\n  cookiesJar: RequestCookies = {}\n\n  constructor(\n    public config: RequestConfig,\n    assert?: Assert\n  ) {\n    super()\n    this.#assert = assert\n    this.request = this.#createRequest()\n    this.config.hooks?.setup.forEach((handler) => this.setup(handler))\n    this.config.hooks?.teardown.forEach((handler) => this.teardown(handler))\n  }\n\n  /**\n   * Set cookies header\n   */\n  #setCookiesHeader() {\n    const prepareMethod = this.config.serializers?.cookie?.prepare\n\n    const cookies = Object.keys(this.cookiesJar).map((key) => {\n      let { name, value } = this.cookiesJar[key]\n      if (prepareMethod) {\n        value = prepareMethod(name, value, this)\n      }\n      return cookie.serialize(name, value)\n    })\n\n    if (!cookies.length) {\n      return\n    }\n\n    this.header('Cookie', cookies)\n  }\n\n  /**\n   * Instantiate hooks runner\n   */\n  #instantiateHooksRunners() {\n    this.#setupRunner = this.hooks.runner('setup')\n    this.#teardownRunner = this.hooks.runner('teardown')\n  }\n\n  /**\n   * Run setup hooks\n   */\n  async #runSetupHooks() {\n    try {\n      await this.#setupRunner.run(this)\n    } catch (error) {\n      await this.#setupRunner.cleanup(error, this)\n      throw error\n    }\n  }\n\n  /**\n   * Run teardown hooks\n   */\n  async #runTeardownHooks(response: ApiResponse) {\n    try {\n      await this.#teardownRunner.run(response)\n    } catch (error) {\n      await this.#teardownRunner.cleanup(error, response)\n      throw error\n    }\n\n    await this.#teardownRunner.cleanup(null, response)\n  }\n\n  /**\n   * Send HTTP request to the server. Errors except the client errors\n   * are tured into a response object.\n   */\n  async #sendRequest() {\n    let response: Response\n\n    try {\n      this.#setCookiesHeader()\n      this.#dumpValues()\n      response = await this.request.buffer(true)\n    } catch (error) {\n      this.request.abort()\n\n      /**\n       * Call cleanup hooks\n       */\n      if (!error.response) {\n        await this.#setupRunner.cleanup(error, this)\n        throw error\n      }\n\n      /**\n       * Raise exception when received 500 status code from the server\n       */\n      if (error.response.status >= 500) {\n        await this.#setupRunner.cleanup(error, this)\n        throw stackToError(error.response.text)\n      }\n\n      response = error.response\n    }\n\n    await this.#setupRunner.cleanup(null, this)\n    return new ApiResponse(this, response, this.config, this.#assert)\n  }\n\n  /**\n   * Invoke calls calls\n   */\n  #dumpValues() {\n    if (!this.#valuesToDump.size) {\n      return\n    }\n\n    try {\n      this.#valuesToDump.forEach((key) => {\n        DUMP_CALLS[key](this)\n      })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * Is endpoint a fully qualified URL or not\n   */\n  #isUrl(url: string) {\n    return url.startsWith('http://') || url.startsWith('https://')\n  }\n\n  /**\n   * Prepend baseUrl to the endpoint\n   */\n  #prependBaseUrl(url: string) {\n    if (!this.config.baseUrl) {\n      return url\n    }\n\n    return `${this.config.baseUrl}/${url.replace(/^\\//, '')}`\n  }\n\n  /**\n   * Creates the request instance for the given HTTP method\n   */\n  #createRequest() {\n    let url = this.config.endpoint\n    if (!this.#isUrl(url)) {\n      url = this.#prependBaseUrl(url)\n    }\n\n    return superagent(this.config.method, url)\n  }\n\n  /**\n   * Register a setup hook. Setup hooks are called before\n   * making the request\n   */\n  setup(handler: SetupHandler): this {\n    this.hooks.add('setup', handler)\n    return this\n  }\n\n  /**\n   * Register a teardown hook. Teardown hooks are called after\n   * making the request\n   */\n  teardown(handler: TeardownHandler): this {\n    this.hooks.add('teardown', handler)\n    return this\n  }\n\n  /**\n   * Set cookie as a key-value pair to be sent to the server\n   */\n  cookie(key: string, value: any): this {\n    this.cookiesJar[key] = { name: key, value }\n    return this\n  }\n\n  /**\n   * Set cookies as an object to be sent to the server\n   */\n  cookies(cookies: Record<string, any>): this {\n    Object.keys(cookies).forEach((key) => this.cookie(key, cookies[key]))\n    return this\n  }\n\n  /**\n   * Define request header as a key-value pair.\n   *\n   * @example\n   * request.header('x-foo', 'bar')\n   * request.header('x-foo', ['bar', 'baz'])\n   */\n  header(key: string, value: string | string[]) {\n    this.headers({ [key]: value })\n    return this\n  }\n\n  /**\n   * Define request headers as an object.\n   *\n   * @example\n   * request.headers({ 'x-foo': 'bar' })\n   * request.headers({ 'x-foo': ['bar', 'baz'] })\n   */\n  headers(headers: Record<string, string | string[]>) {\n    this.request.set(headers)\n    return this\n  }\n\n  /**\n   * Define the field value for a multipart request.\n   *\n   * @note: This method makes a multipart request. See [[this.form]] to\n   * make HTML style form submissions.\n   *\n   * @example\n   * request.field('name', 'virk')\n   * request.field('age', 22)\n   */\n  field(name: string, value: MultipartValue | MultipartValue[]) {\n    this.request.field(name, value)\n    return this\n  }\n\n  /**\n   * Define fields as an object for a multipart request\n   *\n   * @note: This method makes a multipart request. See [[this.form]] to\n   * make HTML style form submissions.\n   *\n   * @example\n   * request.fields({'name': 'virk', age: 22})\n   */\n  fields(values: { [name: string]: MultipartValue | MultipartValue[] }) {\n    this.request.field(values)\n    return this\n  }\n\n  /**\n   * Upload file for a multipart request. Either you can pass path to a\n   * file, a readable stream, or a buffer\n   *\n   * @example\n   * request.file('avatar', 'absolute/path/to/file')\n   * request.file('avatar', createReadStream('./path/to/file'))\n   */\n  file(\n    name: string,\n    value: MultipartValue,\n    options?: string | { filename?: string | undefined; contentType?: string | undefined }\n  ) {\n    this.request.attach(name, value, options)\n    return this\n  }\n\n  /**\n   * Set form values. Calling this method will set the content type\n   * to \"application/x-www-form-urlencoded\".\n   *\n   * @example\n   * request.form({\n   *   email: 'virk@adonisjs.com',\n   *   password: 'secret'\n   * })\n   */\n  form(values: string | object) {\n    this.type('form')\n    this.request.send(values)\n    return this\n  }\n\n  /**\n   * Set JSON body for the request. Calling this method will set\n   * the content type to \"application/json\".\n   *\n   * @example\n   * request.json({\n   *   email: 'virk@adonisjs.com',\n   *   password: 'secret'\n   * })\n   */\n  json(values: string | object) {\n    this.type('json')\n    this.request.send(values)\n    return this\n  }\n\n  /**\n   * Set querystring for the request.\n   *\n   * @example\n   * request.qs('order_by', 'id')\n   * request.qs({ order_by: 'id' })\n   */\n  qs(key: string, value: any): this\n  qs(values: string | object): this\n  qs(key: string | object, value?: any): this {\n    if (!value) {\n      this.request.query(key)\n    } else {\n      this.request.query({ [key as string]: value })\n    }\n    return this\n  }\n\n  /**\n   * Set timeout for the request.\n   *\n   * @example\n   * request.timeout(5000)\n   * request.timeout({ response: 5000, deadline: 60000 })\n   */\n  timeout(ms: number | { deadline?: number | undefined; response?: number | undefined }): this {\n    this.request.timeout(ms)\n    return this\n  }\n\n  /**\n   * Set content-type for the request\n   *\n   * @example\n   * request.type('json')\n   */\n  type(value: string): this {\n    this.request.type(value)\n    return this\n  }\n\n  /**\n   * Set \"accept\" header in the request\n   *\n   * @example\n   * request.accept('json')\n   */\n  accept(type: string): this {\n    this.request.accept(type)\n    return this\n  }\n\n  /**\n   * Follow redirects from the response\n   *\n   * @example\n   * request.redirects(3)\n   */\n  redirects(count: number): this {\n    this.request.redirects(count)\n    return this\n  }\n\n  /**\n   * Set basic auth header from user and password\n   *\n   * @example\n   * request.basicAuth('foo@bar.com', 'secret')\n   */\n  basicAuth(user: string, password: string): this {\n    this.request.auth(user, password, { type: 'basic' })\n    return this\n  }\n\n  /**\n   * Pass auth bearer token as authorization header.\n   *\n   * @example\n   * request.apiToken('tokenValue')\n   */\n  bearerToken(token: string): this {\n    this.request.auth(token, { type: 'bearer' })\n    return this\n  }\n\n  /**\n   * Set the ca certificates to trust\n   */\n  ca(certificate: string | string[] | Buffer | Buffer[]): this {\n    this.request.ca(certificate)\n    return this\n  }\n\n  /**\n   * Set the client certificates\n   */\n  cert(certificate: string | string[] | Buffer | Buffer[]): this {\n    this.request.cert(certificate)\n    return this\n  }\n\n  /**\n   * Set the client private key(s)\n   */\n  privateKey(key: string | string[] | Buffer | Buffer[]): this {\n    this.request.key(key)\n    return this\n  }\n\n  /**\n   * Set the client PFX or PKCS12 encoded private key and certificate chain\n   */\n  pfx(\n    key: string | string[] | Buffer | Buffer[] | { pfx: string | Buffer; passphrase: string }\n  ): this {\n    this.request.pfx(key)\n    return this\n  }\n\n  /**\n   * Does not reject expired or invalid TLS certs. Sets internally rejectUnauthorized=true\n   */\n  disableTLSCerts(): this {\n    this.request.disableTLSCerts()\n    return this\n  }\n\n  /**\n   * Trust broken HTTPs connections on localhost\n   */\n  trustLocalhost(trust = true): this {\n    this.request.trustLocalhost(trust)\n    return this\n  }\n\n  /**\n   * Dump request headers\n   */\n  dumpHeaders(): this {\n    this.#valuesToDump.add('headers')\n    return this\n  }\n\n  /**\n   * Dump request cookies\n   */\n  dumpCookies(): this {\n    this.#valuesToDump.add('cookies')\n    return this\n  }\n\n  /**\n   * Dump request body\n   */\n  dumpBody(): this {\n    this.#valuesToDump.add('body')\n    return this\n  }\n\n  /**\n   * Dump request\n   */\n  dump(): this {\n    this.#valuesToDump.add('request')\n    this.dumpCookies()\n    this.dumpHeaders()\n    this.dumpBody()\n    return this\n  }\n\n  /**\n   * Retry a failing request. Along with the count, you can also define\n   * a callback to decide how long the request should be retried.\n   *\n   * The max count is applied regardless of whether callback is defined\n   * or not\n   *\n   * The following response codes are considered failing.\n   * - 408\n   * - 413\n   * - 429\n   * - 500\n   * - 502\n   * - 503\n   * - 504\n   * - 521\n   * - 522\n   * - 524\n   *\n   * The following error codes are considered failing.\n   * - 'ETIMEDOUT'\n   * - 'ECONNRESET'\n   * - 'EADDRINUSE'\n   * - 'ECONNREFUSED'\n   * - 'EPIPE'\n   * - 'ENOTFOUND'\n   * - 'ENETUNREACH'\n   * - 'EAI_AGAIN'\n   */\n  retry(count: number, retryUntilCallback?: (error: any, response: ApiResponse) => boolean): this {\n    if (retryUntilCallback) {\n      this.request.retry(count, (error, response) => {\n        return retryUntilCallback(error, new ApiResponse(this, response, this.config, this.#assert))\n      })\n\n      return this\n    }\n\n    this.request.retry(count)\n    return this\n  }\n\n  /**\n   * Make the API request\n   */\n  async send() {\n    /**\n     * Step 1: Instantiate hooks runners\n     */\n    this.#instantiateHooksRunners()\n\n    /**\n     * Step 2: Run setup hooks\n     */\n    await this.#runSetupHooks()\n\n    /**\n     * Step 3: Make HTTP request\n     */\n    const response = await this.#sendRequest()\n\n    /**\n     * Step 4: Run teardown hooks\n     */\n    await this.#runTeardownHooks(response)\n\n    return response\n  }\n\n  /**\n   * Implementation of `then` for the promise API\n   */\n  then<TResult1 = ApiResponse, TResult2 = never>(\n    resolve?: ((value: ApiResponse) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    reject?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): Promise<TResult1 | TResult2> {\n    return this.send().then(resolve, reject)\n  }\n\n  /**\n   * Implementation of `catch` for the promise API\n   */\n  catch<TResult = never>(\n    reject?: ((reason: ApiResponse) => TResult | PromiseLike<TResult>) | undefined | null\n  ): Promise<ApiResponse | TResult> {\n    return this.send().catch(reject)\n  }\n\n  /**\n   * Implementation of `finally` for the promise API\n   */\n  finally(fullfilled?: (() => void) | undefined | null): Promise<ApiResponse> {\n    return this.send().finally(fullfilled)\n  }\n\n  /**\n   * Required when Promises are extended\n   */\n  get [Symbol.toStringTag]() {\n    return this.constructor.name\n  }\n}\n","/*\n * @japa/api-client\n *\n * (c) Japa.dev\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Assert } from '@japa/assert'\nimport Macroable from '@poppinss/macroable'\nimport setCookieParser from 'set-cookie-parser'\nimport { type HTTPError, Response } from 'superagent'\n\nimport { ApiRequest } from './request.js'\nimport { RequestConfig, ResponseCookie, ResponseCookies, SuperAgentResponseFile } from './types.js'\nimport {\n  dumpResponse,\n  dumpResponseBody,\n  dumpResponseError,\n  dumpResponseCookies,\n  dumpResponseHeaders,\n} from './utils.js'\n\nexport class ApiResponse extends Macroable {\n  #valuesDumped: Set<string> = new Set()\n\n  /**\n   * Parsed cookies\n   */\n  cookiesJar: ResponseCookies\n\n  constructor(\n    public request: ApiRequest,\n    public response: Response,\n    protected config: RequestConfig,\n    public assert?: Assert\n  ) {\n    super()\n    this.cookiesJar = this.#parseCookies()\n    this.#processCookies()\n  }\n\n  /**\n   * Parse response header to collect cookies\n   */\n  #parseCookies(): ResponseCookies {\n    const cookieHeader = this.header('set-cookie')\n    if (!cookieHeader) {\n      return {}\n    }\n\n    return setCookieParser.parse(cookieHeader, { map: true })\n  }\n\n  /**\n   * Process cookies using the serializer\n   */\n  #processCookies() {\n    const cookiesSerializer = this.config.serializers?.cookie\n    const processMethod = cookiesSerializer?.process\n\n    if (!processMethod) {\n      return\n    }\n\n    Object.keys(this.cookiesJar).forEach((key) => {\n      const cookie = this.cookiesJar[key]\n      const processedValue = processMethod(cookie.name, cookie.value, this)\n      if (processedValue !== undefined) {\n        cookie.value = processedValue\n      }\n    })\n  }\n\n  /**\n   * Ensure assert plugin is installed\n   */\n  ensureHasAssert() {\n    if (!this.assert) {\n      throw new Error(\n        'Response assertions are not available. Make sure to install the @japa/assert plugin'\n      )\n    }\n  }\n\n  /**\n   * Response content-type charset. Undefined if no charset\n   * is mentioned.\n   */\n  charset(): string | undefined {\n    return this.response.charset\n  }\n\n  /**\n   * Parsed files from the multipart response.\n   */\n  files<Properties extends string>(): { [K in Properties]: SuperAgentResponseFile } {\n    return this.response.files\n  }\n\n  /**\n   * Returns an object of links by parsing the \"Link\" header.\n   *\n   * @example\n   * Link: <https://one.example.com>; rel=\"preconnect\", <https://two.example.com>; rel=\"preload\"\n   * response.links()\n   * // {\n   * //   preconnect: 'https://one.example.com',\n     //   preload: 'https://two.example.com',\n   * // }\n   */\n  links(): Record<string, string> {\n    return this.response.links\n  }\n\n  /**\n   * Response status type\n   */\n  statusType(): number {\n    return this.response.statusType\n  }\n\n  /**\n   * Request raw parsed text\n   */\n  text(): string {\n    return this.response.text\n  }\n\n  /**\n   * Response body\n   */\n  body(): any {\n    return this.response.body\n  }\n\n  /**\n   * Read value for a given response header\n   */\n  header(key: string): string | undefined {\n    return this.response.headers[key]\n  }\n\n  /**\n   * Get all response headers\n   */\n  headers(): Record<string, string> {\n    return this.response.headers\n  }\n\n  /**\n   * Get response status\n   */\n  status(): number {\n    return this.response.status\n  }\n\n  /**\n   * Get response content-type\n   */\n  type() {\n    return this.response.type\n  }\n\n  /**\n   * Get redirects URLs the request has followed before\n   * getting the response\n   */\n  redirects() {\n    return this.response.redirects\n  }\n\n  /**\n   * Find if the response has parsed body. The check is performed\n   * by inspecting the response content-type and returns true\n   * when content-type is either one of the following.\n   *\n   * - application/json\n   * - application/x-www-form-urlencoded\n   * - multipart/form-data\n   *\n   * Or when the response body is a buffer.\n   */\n  hasBody(): boolean {\n    return (\n      this.type() === 'application/json' ||\n      this.type() === 'application/x-www-form-urlencoded' ||\n      this.type() === 'multipart/form-data' ||\n      Buffer.isBuffer(this.response.body)\n    )\n  }\n\n  /**\n   * Find if the response body has files\n   */\n  hasFiles(): boolean {\n    return this.files() && Object.keys(this.files()).length > 0\n  }\n\n  /**\n   * Find if response is an error\n   */\n  hasError(): boolean {\n    return this.error() ? true : false\n  }\n\n  /**\n   * Find if response is an fatal error. Response with >=500\n   * status code are concerned as fatal errors\n   */\n  hasFatalError(): boolean {\n    return this.status() >= 500\n  }\n\n  /**\n   * Find if the request client failed to make the request\n   */\n  hasClientError(): boolean {\n    return this.response.clientError\n  }\n\n  /**\n   * Find if the server responded with an error\n   */\n  hasServerError(): boolean {\n    return this.response.serverError\n  }\n\n  /**\n   * Access to response error\n   */\n  error(): false | HTTPError {\n    return this.response.error\n  }\n\n  /**\n   * Get cookie by name\n   */\n  cookie(name: string): ResponseCookie | undefined {\n    return this.cookiesJar[name]\n  }\n\n  /**\n   * Parsed response cookies\n   */\n  cookies() {\n    return this.cookiesJar\n  }\n\n  /**\n   * Dump request headers\n   */\n  dumpHeaders(): this {\n    if (this.#valuesDumped.has('headers')) {\n      return this\n    }\n\n    this.#valuesDumped.add('headers')\n    dumpResponseHeaders(this)\n    return this\n  }\n\n  /**\n   * Dump request cookies\n   */\n  dumpCookies(): this {\n    if (this.#valuesDumped.has('cookies')) {\n      return this\n    }\n\n    this.#valuesDumped.add('cookies')\n    dumpResponseCookies(this)\n    return this\n  }\n\n  /**\n   * Dump request body\n   */\n  dumpBody(): this {\n    if (this.#valuesDumped.has('body')) {\n      return this\n    }\n\n    this.#valuesDumped.add('body')\n    dumpResponseBody(this)\n    return this\n  }\n\n  /**\n   * Dump request body\n   */\n  dumpError(): this {\n    if (this.#valuesDumped.has('error')) {\n      return this\n    }\n\n    this.#valuesDumped.add('error')\n    dumpResponseError(this)\n    return this\n  }\n\n  /**\n   * Dump request\n   */\n  dump(): this {\n    if (this.#valuesDumped.has('response')) {\n      return this\n    }\n\n    this.#valuesDumped.add('response')\n    dumpResponse(this)\n    this.dumpCookies()\n    this.dumpHeaders()\n    this.dumpBody()\n    this.dumpError()\n    return this\n  }\n\n  /**\n   * Assert response status to match the expected status\n   */\n  assertStatus(expectedStatus: number) {\n    this.ensureHasAssert()\n    this.assert!.equal(this.status(), expectedStatus)\n  }\n\n  /**\n   * Assert response body to match the expected body\n   */\n  assertBody(expectedBody: any) {\n    this.ensureHasAssert()\n    this.assert!.deepEqual(this.body(), expectedBody)\n  }\n\n  /**\n   * Assert response body to match the subset from the\n   * expected body\n   */\n  assertBodyContains(expectedBody: any) {\n    this.ensureHasAssert()\n    this.assert!.containsSubset(this.body(), expectedBody)\n  }\n\n  /**\n   * Assert response body not to match the subset from the\n   * expected body\n   */\n  assertBodyNotContains(expectedBody: any) {\n    this.ensureHasAssert()\n    this.assert!.notContainsSubset(this.body(), expectedBody)\n  }\n\n  /**\n   * Assert response to contain a given cookie and optionally\n   * has the expected value\n   */\n  assertCookie(name: string, value?: any) {\n    this.ensureHasAssert()\n    this.assert!.property(this.cookies(), name)\n\n    if (value !== undefined) {\n      this.assert!.deepEqual(this.cookie(name)!.value, value)\n    }\n  }\n\n  /**\n   * Assert response to not contain a given cookie\n   */\n  assertCookieMissing(name: string) {\n    this.ensureHasAssert()\n    this.assert!.notProperty(this.cookies(), name)\n  }\n\n  /**\n   * Assert response to contain a given header and optionally\n   * has the expected value\n   */\n  assertHeader(name: string, value?: any) {\n    this.ensureHasAssert()\n    this.assert!.property(this.headers(), name)\n\n    if (value !== undefined) {\n      this.assert!.deepEqual(this.header(name), value)\n    }\n  }\n\n  /**\n   * Assert response to not contain a given header\n   */\n  assertHeaderMissing(name: string) {\n    this.ensureHasAssert()\n    this.assert!.notProperty(this.headers(), name)\n  }\n\n  /**\n   * Assert response text to include the expected value\n   */\n  assertTextIncludes(expectedSubset: string) {\n    this.ensureHasAssert()\n    this.assert!.include(this.text(), expectedSubset)\n  }\n\n  /**\n   * Assert response body is valid as per the API spec.\n   */\n  assertAgainstApiSpec() {\n    this.ensureHasAssert()\n    this.assert!.isValidApiResponse(this.response)\n  }\n\n  /**\n   * Assert there is a matching redirect\n   */\n  assertRedirectsTo(pathname: string) {\n    this.ensureHasAssert()\n    const redirects = this.redirects().map((url) => new URL(url).pathname)\n\n    this.assert!.evaluate(\n      redirects.find((one) => one === pathname),\n      `Expected #{exp} to be one of #{act}`,\n      {\n        expected: [pathname],\n        actual: redirects,\n        operator: 'includes',\n      }\n    )\n  }\n}\n","/*\n * @japa/api-client\n *\n * (c) Japa.dev\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { inspect } from 'node:util'\nimport { ApiRequest } from './request.js'\nimport { ApiResponse } from './response.js'\n\nconst INSPECT_OPTIONS = { colors: true, depth: 2, showHidden: false }\n\n/**\n * Convert error stack string to an error object.\n *\n * It is an expirement to use server error stack and convert\n * it to an actual error object.\n */\nexport function stackToError(errorStack: any): string | Error {\n  if (typeof errorStack === 'string' && /^\\s*at .*(\\S+:\\d+|\\(native\\))/m.test(errorStack)) {\n    const customError = new Error(errorStack.split('\\n')[0])\n    customError.stack = errorStack\n    return customError\n  }\n\n  return errorStack\n}\n\n/**\n * Default implementation to print request errors\n */\nexport function dumpResponseError(response: ApiResponse) {\n  /**\n   * Attempt to convert error stack to a error object when status >= 500\n   */\n  if (response.status() >= 500 && response.hasError()) {\n    console.log(`\"error\"   => ${inspect(stackToError(response.text()))}`)\n    return\n  }\n}\n\n/**\n * Default implementation to log request cookies\n */\nexport function dumpRequestCookies(request: ApiRequest) {\n  console.log(`\"cookies\"  => ${inspect(request.cookiesJar, INSPECT_OPTIONS)}`)\n}\n\n/**\n * Default implementation to log response cookies\n */\nexport function dumpResponseCookies(response: ApiResponse) {\n  console.log(`\"cookies\"   => ${inspect(response.cookies(), INSPECT_OPTIONS)}`)\n}\n\n/**\n * Default implementation to log request headers\n */\nexport function dumpRequestHeaders(request: ApiRequest) {\n  // @ts-ignore\n  console.log(`\"headers\"  => ${inspect(request.request['header'], INSPECT_OPTIONS)}`)\n}\n\n/**\n * Default implementation to log response headers\n */\nexport function dumpResponseHeaders(response: ApiResponse) {\n  console.log(`\"headers\"   => ${inspect(response.headers(), INSPECT_OPTIONS)}`)\n}\n\n/**\n * Default implementation to log request body\n */\nexport function dumpRequestBody(request: ApiRequest) {\n  // @ts-ignore\n  const data = request.request['_data']\n  if (data) {\n    console.log(`\"body\"     => ${inspect(data, INSPECT_OPTIONS)}`)\n  }\n}\n\n/**\n * Default implementation to log response body\n */\nexport function dumpResponseBody(response: ApiResponse) {\n  if (response.status() >= 500) {\n    return\n  }\n\n  if (response.hasBody()) {\n    console.log(`\"body\"     => ${inspect(response.body(), INSPECT_OPTIONS)}`)\n  } else if (response.text()) {\n    console.log(`\"text\"     => ${inspect(response.text(), INSPECT_OPTIONS)}`)\n  }\n\n  if (response.hasFiles()) {\n    const files = Object.keys(response.files()).reduce(\n      (result, fileName) => {\n        result[fileName] = response.files()[fileName].toJSON()\n        return result\n      },\n      {} as Record<string, any>\n    )\n    console.log(`\"files\"    => ${inspect(files, INSPECT_OPTIONS)}`)\n  }\n}\n\n/**\n * Default implementation to log request\n */\nexport function dumpRequest(request: ApiRequest) {\n  console.log(\n    `\"request\"  => ${inspect(\n      {\n        method: request.request.method,\n        endpoint: request.config.endpoint,\n      },\n      INSPECT_OPTIONS\n    )}`\n  )\n\n  // @ts-ignore\n  console.log(`\"qs\"       => ${inspect(request.request['qs'], INSPECT_OPTIONS)}`)\n}\n\n/**\n * Default implementation to log response\n */\nexport function dumpResponse(response: ApiResponse) {\n  console.log(\n    `\"response\"  => ${inspect(\n      {\n        status: response.status(),\n      },\n      INSPECT_OPTIONS\n    )}`\n  )\n}\n","/*\n * @japa/api-client\n *\n * (c) Japa.dev\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { PluginFn } from '@japa/runner/types'\nimport { ApiClient } from './src/client.js'\nimport { TestContext } from '@japa/runner/core'\n\nexport { ApiClient }\nexport { ApiRequest } from './src/request.js'\nexport { ApiResponse } from './src/response.js'\n\n/**\n * API client plugin registers an HTTP request client that\n * can be used for testing API endpoints.\n */\nexport function apiClient(options?: string | { baseURL?: string }): PluginFn {\n  return function () {\n    TestContext.getter(\n      'client',\n      function (this: TestContext) {\n        return new ApiClient(typeof options === 'string' ? options : options?.baseURL, this.assert)\n      },\n      true\n    )\n  }\n}\n\ndeclare module '@japa/runner/core' {\n  interface TestContext {\n    client: ApiClient\n  }\n}\n"],"mappings":"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","names":["Macroable","Macroable","cookie","Macroable","Macroable"]}