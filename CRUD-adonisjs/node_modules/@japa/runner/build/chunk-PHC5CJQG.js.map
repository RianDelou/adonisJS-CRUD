{"version":3,"sources":["../src/reporters/dot.ts","../src/reporters/spec.ts","../src/reporters/ndjson.ts","../src/reporters/main.ts"],"sourcesContent":["/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { colors, icons } from '../helpers.js'\nimport type { TestEndNode } from '../../modules/core/types.js'\nimport { BaseReporter } from '../../modules/core/reporters/base.js'\n\n/**\n * Minimal reporter that prints each test as an icon.\n */\nexport class DotReporter extends BaseReporter {\n  /**\n   * When a test ended\n   */\n  protected onTestEnd(payload: TestEndNode) {\n    let output = ''\n    if (payload.isTodo) {\n      output = colors.cyan(icons.info)\n    } else if (payload.hasError || payload.isFailing) {\n      output = payload.hasError ? colors.magenta(icons.squareSmallFilled) : colors.red(icons.cross)\n    } else if (payload.isSkipped) {\n      output = colors.yellow(icons.bullet)\n    } else {\n      output = colors.green(icons.tick)\n    }\n\n    process.stdout.write(`${output}`)\n  }\n\n  /**\n   * When test runner ended\n   */\n  protected async end() {\n    console.log('')\n    await this.printSummary(this.runner!.getSummary())\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ms from 'ms'\nimport { relative } from 'node:path'\n\nimport { colors, icons } from '../helpers.js'\nimport { BaseReporter } from '../../modules/core/main.js'\nimport { GroupStartNode, TestEndNode } from '../../modules/core/types.js'\n\n/**\n * Pretty prints the tests on the console\n */\nexport class SpecReporter extends BaseReporter {\n  /**\n   * Tracking if the first event we get is for a test without any parent group\n   * We need this to decide the display style for tests without groups.\n   */\n  #isFirstLoneTest = true\n\n  /**\n   * Returns the icon for the test\n   */\n  #getTestIcon(payload: TestEndNode) {\n    if (payload.isTodo) {\n      return colors.cyan(icons.info)\n    }\n\n    if (payload.isFailing) {\n      return payload.hasError ? colors.magenta(icons.squareSmallFilled) : colors.red(icons.cross)\n    }\n\n    if (payload.hasError) {\n      return colors.red(icons.cross)\n    }\n\n    if (payload.isSkipped) {\n      return colors.yellow(icons.bullet)\n    }\n\n    return colors.green(icons.tick)\n  }\n\n  /**\n   * Returns the test message\n   */\n  #getTestMessage(payload: TestEndNode) {\n    const message = payload.title.expanded\n\n    if (payload.isTodo) {\n      return colors.blue(message)\n    }\n\n    if (payload.isFailing) {\n      return payload.hasError ? colors.magenta(message) : colors.red(message)\n    }\n\n    if (payload.hasError) {\n      return colors.red(message)\n    }\n\n    if (payload.isSkipped) {\n      return colors.yellow(message)\n    }\n\n    return colors.grey(message)\n  }\n\n  /**\n   * Returns the subtext message for the test\n   */\n  #getSubText(payload: TestEndNode): string | undefined {\n    if (payload.isSkipped && payload.skipReason) {\n      return colors.yellow(payload.skipReason)\n    }\n\n    if (!payload.isFailing) {\n      return\n    }\n\n    if (!payload.hasError) {\n      return colors.magenta(`Test marked with \".fails()\" must finish with an error`)\n    }\n\n    if (payload.failReason) {\n      return colors.magenta(payload.failReason)\n    }\n\n    const testErrorMessage = payload.errors.find((error) => error.phase === 'test')\n    if (testErrorMessage && testErrorMessage.error) {\n      return colors.magenta(testErrorMessage.error.message)\n    }\n  }\n\n  /**\n   * Returns the filename relative from the current working dir\n   */\n  #getRelativeFilename(fileName: string) {\n    return relative(process.cwd(), fileName)\n  }\n\n  /**\n   * Prints the test details\n   */\n  #printTest(payload: TestEndNode) {\n    const icon = this.#getTestIcon(payload)\n    const message = this.#getTestMessage(payload)\n    const prefix = payload.isPinned ? colors.yellow('[PINNED] ') : ''\n    const indentation = this.currentFileName || this.currentGroupName ? '  ' : ''\n    const duration = colors.dim(`(${ms(Number(payload.duration.toFixed(2)))})`)\n    const retries =\n      payload.retryAttempt && payload.retryAttempt > 1\n        ? colors.dim(`(x${payload.retryAttempt}) `)\n        : ''\n\n    let subText = this.#getSubText(payload)\n    subText = subText ? `\\n${indentation}  ${subText}` : ''\n\n    console.log(`${indentation}${icon} ${prefix}${retries}${message} ${duration}${subText}`)\n  }\n\n  /**\n   * Prints the group name\n   */\n  #printGroup(payload: GroupStartNode) {\n    const title =\n      this.currentSuiteName !== 'default'\n        ? `${this.currentSuiteName} / ${payload.title}`\n        : payload.title\n\n    const suffix = this.currentFileName\n      ? colors.dim(` (${this.#getRelativeFilename(this.currentFileName)})`)\n      : ''\n\n    console.log(`\\n${title}${suffix}`)\n  }\n\n  protected onTestStart(): void {\n    /**\n     * Display the filename when\n     *\n     * - The filename exists\n     * - The test is not under a group\n     * - Test is first in a sequence\n     */\n    if (this.currentFileName && this.#isFirstLoneTest) {\n      console.log(`\\n${colors.dim(this.#getRelativeFilename(this.currentFileName))}`)\n    }\n    this.#isFirstLoneTest = false\n  }\n\n  protected onTestEnd(payload: TestEndNode): void {\n    this.#printTest(payload)\n  }\n\n  protected onGroupStart(payload: GroupStartNode): void {\n    /**\n     * When a group starts, we mark the upcoming test as NOT a\n     * lone test\n     */\n    this.#isFirstLoneTest = false\n    this.#printGroup(payload)\n  }\n\n  protected onGroupEnd(): void {\n    /**\n     * When the group ends we assume that the next test can\n     * be out of the group, hence a lone test.\n     *\n     * If this assumption is false, then the `onGroupStart` method\n     * will toggle the boolean\n     */\n    this.#isFirstLoneTest = true\n  }\n\n  protected async end() {\n    const summary = this.runner!.getSummary()\n    await this.printSummary(summary)\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { relative } from 'node:path'\nimport { serializeError } from 'serialize-error'\n\nimport { BaseReporter } from '../../modules/core/main.js'\nimport type {\n  TestEndNode,\n  SuiteEndNode,\n  GroupEndNode,\n  SuiteStartNode,\n  GroupStartNode,\n} from '../../modules/core/types.js'\n\n/**\n * Prints tests progress as JSON. Each event is emitted\n * independently\n */\nexport class NdJSONReporter extends BaseReporter {\n  /**\n   * Returns the filename relative from the current working dir\n   */\n  #getRelativeFilename(fileName: string) {\n    return relative(process.cwd(), fileName)\n  }\n\n  /**\n   * Serialize errors to JSON\n   */\n  #serializeErrors(errors: TestEndNode['errors']) {\n    return errors.map((error) => ({\n      phase: error.phase,\n      error: serializeError(error.error),\n    }))\n  }\n\n  protected onTestEnd(payload: TestEndNode): void {\n    console.log(\n      JSON.stringify({\n        event: 'test:end',\n        filePath: this.currentFileName,\n        relativePath: this.currentFileName\n          ? this.#getRelativeFilename(this.currentFileName)\n          : undefined,\n        title: payload.title,\n        duration: payload.duration,\n        failReason: payload.failReason,\n        isFailing: payload.isFailing,\n        skipReason: payload.skipReason,\n        isSkipped: payload.isSkipped,\n        isTodo: payload.isTodo,\n        isPinned: payload.isPinned,\n        retryAttempt: payload.retryAttempt,\n        retries: payload.retries,\n        errors: this.#serializeErrors(payload.errors),\n      })\n    )\n  }\n\n  protected onGroupStart(payload: GroupStartNode): void {\n    console.log(\n      JSON.stringify({\n        event: 'group:start',\n        title: payload.title,\n      })\n    )\n  }\n\n  protected onGroupEnd(payload: GroupEndNode): void {\n    JSON.stringify({\n      event: 'group:end',\n      title: payload.title,\n      errors: this.#serializeErrors(payload.errors),\n    })\n  }\n\n  protected onSuiteStart(payload: SuiteStartNode): void {\n    console.log(\n      JSON.stringify({\n        event: 'suite:start',\n        ...payload,\n      })\n    )\n  }\n\n  protected onSuiteEnd(payload: SuiteEndNode): void {\n    console.log(\n      JSON.stringify({\n        event: 'suite:end',\n        ...payload,\n      })\n    )\n  }\n\n  protected async end() {\n    const summary = this.runner!.getSummary()\n    console.log(\n      JSON.stringify({\n        aggregates: summary.aggregates,\n        duration: summary.duration,\n        failedTestsTitles: summary.failedTestsTitles,\n        hasError: summary.hasError,\n      })\n    )\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { DotReporter } from './dot.js'\nimport { SpecReporter } from './spec.js'\nimport { NdJSONReporter } from './ndjson.js'\nimport type { BaseReporterOptions, NamedReporterContract } from '../types.js'\n\n/**\n * Create an instance of the spec reporter\n */\nexport const spec: (options?: BaseReporterOptions) => NamedReporterContract = (options) => {\n  return {\n    name: 'spec',\n    handler: (...args) => new SpecReporter(options).boot(...args),\n  }\n}\n\n/**\n * Create an instance of the dot reporter\n */\nexport const dot: (options?: BaseReporterOptions) => NamedReporterContract = (options) => {\n  return {\n    name: 'dot',\n    handler: (...args) => new DotReporter(options).boot(...args),\n  }\n}\n\n/**\n * Create an instance of the ndjson reporter\n */\nexport const ndjson: (options?: BaseReporterOptions) => NamedReporterContract = (options) => {\n  return {\n    name: 'ndjson',\n    handler: (...args) => new NdJSONReporter(options).boot(...args),\n  }\n}\n"],"mappings":"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","names":["relative","relative"]}