{"version":3,"sources":["../../src/types.ts","../../modules/core/types.ts"],"sourcesContent":["/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HookHandler } from '@poppinss/hooks/types'\n\nimport type { Emitter, Refiner, Runner, Suite } from '../modules/core/main.js'\nimport type { FilteringOptions, NamedReporterContract } from '../modules/core/types.js'\n\nexport * from '../modules/core/types.js'\n\n/**\n * Global setup hook\n */\nexport type SetupHookState = [[runner: Runner], [error: Error | null, runner: Runner]]\nexport type SetupHookHandler = HookHandler<SetupHookState[0], SetupHookState[1]>\n\n/**\n * Global teardown hook\n */\nexport type TeardownHookState = [[runner: Runner], [error: Error | null, runner: Runner]]\nexport type TeardownHookHandler = HookHandler<TeardownHookState[0], TeardownHookState[1]>\n\n/**\n * Global set of available hooks\n */\nexport type HooksEvents = {\n  setup: SetupHookState\n  teardown: TeardownHookState\n}\n\n/**\n * Parsed command-line arguments\n */\nexport type CLIArgs = {\n  _?: string[]\n  tags?: string | string[]\n  files?: string | string[]\n  tests?: string | string[]\n  groups?: string | string[]\n  timeout?: string\n  retries?: string\n  reporters?: string | string[]\n  forceExit?: boolean\n  failed?: boolean\n  help?: boolean\n  matchAll?: boolean\n} & Record<string, string | string[] | boolean>\n\n/**\n * Set of filters you can apply to run only specific tests\n */\nexport type Filters = FilteringOptions & {\n  files?: string[]\n  suites?: string[]\n}\n\n/**\n * Plugin function receives an instance of the runner,\n * emitter, config and the hooks\n */\nexport type PluginFn = (japa: {\n  config: NormalizedConfig\n  cliArgs: CLIArgs\n  runner: Runner\n  emitter: Emitter\n}) => void | Promise<void>\n\n/**\n * Base configuration options\n */\nexport type BaseConfig = {\n  /**\n   * Current working directory. It is required to search for\n   * the test files\n   */\n  cwd?: string\n\n  /**\n   * The timeout to apply on all the tests, unless overwritten explicitly\n   */\n  timeout?: number\n\n  /**\n   * The retries to apply on all the tests, unless overwritten explicitly\n   */\n  retries?: number\n\n  /**\n   * Test filters to apply\n   */\n  filters?: Filters\n\n  /**\n   * A hook to configure suites. The callback will be called for each\n   * suite before it gets executed.\n   */\n  configureSuite?: (suite: Suite) => void\n\n  /**\n   * A collection of registered reporters. Reporters are not activated by\n   * default. Either you have to activate them using the commandline,\n   * or using the `activated` property.\n   */\n  reporters?: {\n    activated: string[]\n    list?: NamedReporterContract[]\n  }\n\n  /**\n   * A collection of registered plugins\n   */\n  plugins?: PluginFn[]\n\n  /**\n   * A custom implementation to import test files.\n   */\n  importer?: (filePath: URL) => void | Promise<void>\n\n  /**\n   * Overwrite tests refiner. Check documentation for refiner\n   * usage\n   */\n  refiner?: Refiner\n\n  /**\n   * Enable/disable force exiting.\n   */\n  forceExit?: boolean\n\n  /**\n   * Global hooks to execute before importing\n   * the test files\n   */\n  setup?: SetupHookHandler[]\n\n  /**\n   * Global hooks to execute on teardown\n   */\n  teardown?: TeardownHookHandler[]\n\n  /**\n   * An array of directories to exclude when searching\n   * for test files.\n   *\n   * For example, if you search for test files inside the entire\n   * project, you might want to exclude \"node_modules\"\n   */\n  exclude?: string[]\n}\n\n/**\n * A collection of test files defined as a glob or a callback\n * function that returns an array of URLs\n */\nexport type TestFiles = string | string[] | (() => URL[] | Promise<URL[]>)\n\n/**\n * A test suite to register tests under a named suite\n */\nexport type TestSuite = {\n  /**\n   * A unique name for the suite\n   */\n  name: string\n\n  /**\n   * Collection of files associated with the suite. Files should be\n   * defined as a glob or a callback function that returns an array of URLs\n   */\n  files: TestFiles\n\n  /**\n   * A callback functon to configure the suite. The callback is invoked only\n   * when the runner is going to run the tests for the given suite.\n   */\n  configure?: (suite: Suite) => void\n\n  /**\n   * The timeout to apply on all the tests in this suite, unless overwritten explicitly\n   */\n  timeout?: number\n\n  /**\n   * The retries to apply on all the tests in this suite, unless overwritten explicitly\n   */\n  retries?: number\n}\n\n/**\n * BaseConfig after normalized by the config manager\n */\nexport type NormalizedBaseConfig = Required<Omit<BaseConfig, 'reporters'>> & {\n  reporters: {\n    activated: string[]\n    list: NamedReporterContract[]\n  }\n}\n\n/**\n * Configuration options\n */\nexport type Config = BaseConfig &\n  (\n    | {\n        files: TestFiles\n      }\n    | {\n        suites: TestSuite[]\n      }\n  )\n\n/**\n * Config after normalized by the config manager\n */\nexport type NormalizedConfig = NormalizedBaseConfig &\n  (\n    | {\n        files: TestFiles\n      }\n    | {\n        suites: Required<TestSuite>[]\n      }\n  )\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport * from '@japa/core/types'\n\nexport type BaseReporterOptions = {\n  stackLinesCount?: number\n  framesMaxLimit?: number\n}\n"],"mappings":";;;;;AAAA,IAAAA,iBAAA;;;ACAA;AASA;AAAA,4BAAc;;;ADKd,WAAAC,gBAAc;","names":["types_exports","types_exports"]}