{"version":3,"sources":["../modules/core/main.ts","../modules/core/reporters/base.ts","../src/helpers.ts"],"sourcesContent":["/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport {\n  Emitter,\n  Refiner,\n  Test as BaseTest,\n  Suite as BaseSuite,\n  Group as BaseGroup,\n  Runner as BaseRunner,\n  TestContext as BaseTestContext,\n} from '@japa/core'\nimport { inspect } from 'node:util'\nimport { AssertionError } from 'node:assert'\nimport { BaseReporter } from './reporters/base.js'\nimport type { DataSetNode, TestHooksCleanupHandler } from './types.js'\n\ndeclare module '@japa/core' {\n  interface Test<Context extends Record<any, any>, TestData extends DataSetNode = undefined> {\n    throws(message: string | RegExp, errorConstructor?: any): this\n  }\n  interface TestContext {\n    cleanup: (cleanupCallback: TestHooksCleanupHandler<TestContext>) => void\n  }\n}\n\nexport { Emitter, Refiner, BaseReporter }\n\n/**\n * Test context carries context data for a given test.\n */\nexport class TestContext extends BaseTestContext {\n  /**\n   * Register a cleanup function that runs after the test finishes\n   * successfully or with an error.\n   */\n  declare cleanup: (cleanupCallback: TestHooksCleanupHandler<TestContext>) => void\n\n  constructor(public test: Test) {\n    super()\n    this.cleanup = (cleanupCallback: TestHooksCleanupHandler<TestContext>) => {\n      test.cleanup(cleanupCallback)\n    }\n  }\n}\n\n/**\n * Test class represents an individual test and exposes API to tweak\n * its runtime behavior.\n */\nexport class Test<TestData extends DataSetNode = undefined> extends BaseTest<\n  TestContext,\n  TestData\n> {\n  /**\n   * @inheritdoc\n   */\n  static executedCallbacks = []\n\n  /**\n   * @inheritdoc\n   */\n  static executingCallbacks = []\n\n  /**\n   * Assert the test callback throws an exception when a certain\n   * error message and optionally is an instance of a given\n   * Error class.\n   */\n  throws(message: string | RegExp, errorConstructor?: any) {\n    const errorInPoint = new AssertionError({})\n    const existingExecutor = this.options.executor\n    if (!existingExecutor) {\n      throw new Error('Cannot use \"test.throws\" method without a test callback')\n    }\n\n    /**\n     * Overwriting existing callback\n     */\n    this.options.executor = async (...args: [any, any, any]) => {\n      let raisedException: any\n      try {\n        await existingExecutor(...args)\n      } catch (error) {\n        raisedException = error\n      }\n\n      /**\n       * Notify no exception has been raised\n       */\n      if (!raisedException) {\n        errorInPoint.message = 'Expected test to throw an exception'\n        throw errorInPoint\n      }\n\n      /**\n       * Constructor mis-match\n       */\n      if (errorConstructor && !(raisedException instanceof errorConstructor)) {\n        errorInPoint.message = `Expected test to throw \"${inspect(errorConstructor)}\"`\n        throw errorInPoint\n      }\n\n      /**\n       * Error does not have a message property\n       */\n      const exceptionMessage: unknown = raisedException.message\n      if (!exceptionMessage || typeof exceptionMessage !== 'string') {\n        errorInPoint.message = 'Expected test to throw an exception with message property'\n        throw errorInPoint\n      }\n\n      /**\n       * Message does not match\n       */\n      if (typeof message === 'string') {\n        if (exceptionMessage !== message) {\n          errorInPoint.message = `Expected test to throw \"${message}\". Instead received \"${raisedException.message}\"`\n          errorInPoint.actual = raisedException.message\n          errorInPoint.expected = message\n          throw errorInPoint\n        }\n        return\n      }\n\n      if (!message.test(exceptionMessage)) {\n        errorInPoint.message = `Expected test error to match \"${message}\" regular expression`\n        throw errorInPoint\n      }\n    }\n\n    return this\n  }\n}\n\n/**\n * TestGroup is used to bulk configure a collection of tests and\n * define lifecycle hooks for them\n */\nexport class Group extends BaseGroup<TestContext> {}\n\n/**\n * A suite is a collection of tests created around a given\n * testing type. For example: A suite for unit tests, a\n * suite for functional tests and so on.\n */\nexport class Suite extends BaseSuite<TestContext> {}\n\n/**\n * Runner class is used to execute the tests\n */\nexport class Runner extends BaseRunner<TestContext> {}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport ms from 'ms'\nimport { colors } from '../../../src/helpers.js'\nimport { ErrorsPrinter } from '@japa/errors-printer'\n\nimport type {\n  TestEndNode,\n  SuiteEndNode,\n  GroupEndNode,\n  TestStartNode,\n  RunnerSummary,\n  RunnerEndNode,\n  GroupStartNode,\n  SuiteStartNode,\n  RunnerStartNode,\n  BaseReporterOptions,\n} from '../types.js'\nimport { Emitter, Runner } from '../main.js'\n\n/**\n * Base reporter to build custom reporters on top of\n */\nexport abstract class BaseReporter {\n  #options: BaseReporterOptions\n  runner?: Runner\n\n  /**\n   * Path to the file for which the tests are getting executed\n   */\n  currentFileName?: string\n\n  /**\n   * Suite for which the tests are getting executed\n   */\n  currentSuiteName?: string\n\n  /**\n   * Group for which the tests are getting executed\n   */\n  currentGroupName?: string\n\n  constructor(options: BaseReporterOptions = {}) {\n    this.#options = Object.assign({ stackLinesCount: 2 }, options)\n  }\n\n  /**\n   * Pretty prints the aggregates\n   */\n  #printAggregates(summary: RunnerSummary) {\n    const tests: string[] = []\n\n    /**\n     * Set value for tests row\n     */\n    if (summary.aggregates.passed) {\n      tests.push(colors.green(`${summary.aggregates.passed} passed`))\n    }\n    if (summary.aggregates.failed) {\n      tests.push(colors.red(`${summary.aggregates.failed} failed`))\n    }\n    if (summary.aggregates.todo) {\n      tests.push(colors.cyan(`${summary.aggregates.todo} todo`))\n    }\n    if (summary.aggregates.skipped) {\n      tests.push(colors.yellow(`${summary.aggregates.skipped} skipped`))\n    }\n    if (summary.aggregates.regression) {\n      tests.push(colors.magenta(`${summary.aggregates.regression} regression`))\n    }\n\n    this.runner!.summaryBuilder.use(() => {\n      return [\n        {\n          key: colors.dim('Tests'),\n          value: `${tests.join(', ')} ${colors.dim(`(${summary.aggregates.total})`)}`,\n        },\n        {\n          key: colors.dim('Time'),\n          value: colors.dim(ms(summary.duration)),\n        },\n      ]\n    })\n\n    console.log(this.runner!.summaryBuilder.build().join('\\n'))\n  }\n\n  /**\n   * Aggregates errors tree to a flat array\n   */\n  #aggregateErrors(summary: RunnerSummary) {\n    const errorsList: { phase: string; title: string; error: Error }[] = []\n\n    summary.failureTree.forEach((suite) => {\n      suite.errors.forEach((error) => errorsList.push({ title: suite.name, ...error }))\n\n      suite.children.forEach((testOrGroup) => {\n        /**\n         * Suite child is a test\n         */\n        if (testOrGroup.type === 'test') {\n          testOrGroup.errors.forEach((error) => {\n            errorsList.push({ title: `${suite.name} / ${testOrGroup.title}`, ...error })\n          })\n          return\n        }\n\n        /**\n         * Suite child is a group\n         */\n        testOrGroup.errors.forEach((error) => {\n          errorsList.push({ title: testOrGroup.name, ...error })\n        })\n        testOrGroup.children.forEach((test) => {\n          test.errors.forEach((error) => {\n            errorsList.push({ title: `${testOrGroup.name} / ${test.title}`, ...error })\n          })\n        })\n      })\n    })\n\n    return errorsList\n  }\n\n  /**\n   * Pretty print errors\n   */\n  async #printErrors(summary: RunnerSummary) {\n    if (!summary.failureTree.length) {\n      return\n    }\n\n    const errorPrinter = new ErrorsPrinter({\n      stackLinesCount: this.#options.stackLinesCount,\n      framesMaxLimit: this.#options.framesMaxLimit,\n    })\n\n    errorPrinter.printSectionHeader('ERRORS')\n    await errorPrinter.printErrors(this.#aggregateErrors(summary))\n  }\n\n  /**\n   * Handlers to capture events\n   */\n  protected onTestStart(_: TestStartNode): void {}\n  protected onTestEnd(_: TestEndNode) {}\n\n  protected onGroupStart(_: GroupStartNode) {}\n  protected onGroupEnd(_: GroupEndNode) {}\n\n  protected onSuiteStart(_: SuiteStartNode) {}\n  protected onSuiteEnd(_: SuiteEndNode) {}\n\n  protected async start(_: RunnerStartNode) {}\n  protected async end(_: RunnerEndNode) {}\n\n  /**\n   * Print tests summary\n   */\n  protected async printSummary(summary: RunnerSummary) {\n    await this.#printErrors(summary)\n\n    console.log('')\n    if (summary.aggregates.total === 0 && !summary.hasError) {\n      console.log(colors.bgYellow().black(' NO TESTS EXECUTED '))\n      return\n    }\n\n    if (summary.hasError) {\n      console.log(colors.bgRed().black(' FAILED '))\n    } else {\n      console.log(colors.bgGreen().black(' PASSED '))\n    }\n    console.log('')\n    this.#printAggregates(summary)\n  }\n\n  /**\n   * Invoked by the tests runner when tests are about to start\n   */\n  boot(runner: Runner, emitter: Emitter) {\n    this.runner = runner\n\n    emitter.on('test:start', (payload) => {\n      this.currentFileName = payload.meta.fileName\n      this.onTestStart(payload)\n    })\n\n    emitter.on('test:end', (payload) => {\n      this.onTestEnd(payload)\n    })\n\n    emitter.on('group:start', (payload) => {\n      this.currentGroupName = payload.title\n      this.currentFileName = payload.meta.fileName\n      this.onGroupStart(payload)\n    })\n\n    emitter.on('group:end', (payload) => {\n      this.currentGroupName = undefined\n      this.onGroupEnd(payload)\n    })\n\n    emitter.on('suite:start', (payload) => {\n      this.currentSuiteName = payload.name\n      this.onSuiteStart(payload)\n    })\n\n    emitter.on('suite:end', (payload) => {\n      this.currentSuiteName = undefined\n      this.onSuiteEnd(payload)\n    })\n\n    emitter.on('runner:start', async (payload) => {\n      await this.start(payload)\n    })\n\n    emitter.on('runner:end', async (payload) => {\n      await this.end(payload)\n    })\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport useColors from '@poppinss/colors'\nimport supportsColor from 'supports-color'\nimport { Colors } from '@poppinss/colors/types'\n\nexport const colors: Colors = supportsColor.stdout ? useColors.ansi() : useColors.silent()\n\n/**\n * A collection of platform specific icons\n */\nexport const icons =\n  process.platform === 'win32' && !process.env.WT_SESSION\n    ? {\n        tick: '√',\n        cross: '×',\n        bullet: '*',\n        nodejs: '♦',\n        pointer: '>',\n        info: 'i',\n        warning: '‼',\n        squareSmallFilled: '[█]',\n      }\n    : {\n        tick: '✔',\n        cross: '✖',\n        bullet: '●',\n        nodejs: '⬢',\n        pointer: '❯',\n        info: 'ℹ',\n        warning: '⚠',\n        squareSmallFilled: '◼',\n      }\n"],"mappings":";AASA;AAAA,EACE;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,SAAS;AAAA,EACT,UAAU;AAAA,EACV,eAAe;AAAA,OACV;AACP,SAAS,eAAe;AACxB,SAAS,sBAAsB;;;ACV/B,OAAO,QAAQ;;;ACAf,OAAO,eAAe;AACtB,OAAO,mBAAmB;AAGnB,IAAM,SAAiB,cAAc,SAAS,UAAU,KAAK,IAAI,UAAU,OAAO;AAKlF,IAAM,QACX,QAAQ,aAAa,WAAW,CAAC,QAAQ,IAAI,aACzC;AAAA,EACE,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,MAAM;AAAA,EACN,SAAS;AAAA,EACT,mBAAmB;AACrB,IACA;AAAA,EACE,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,MAAM;AAAA,EACN,SAAS;AAAA,EACT,mBAAmB;AACrB;;;AD5BN,SAAS,qBAAqB;AAmBvB,IAAe,eAAf,MAA4B;AAAA,EACjC;AAAA,EACA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,EAEA,YAAY,UAA+B,CAAC,GAAG;AAC7C,SAAK,WAAW,OAAO,OAAO,EAAE,iBAAiB,EAAE,GAAG,OAAO;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,SAAwB;AACvC,UAAM,QAAkB,CAAC;AAKzB,QAAI,QAAQ,WAAW,QAAQ;AAC7B,YAAM,KAAK,OAAO,MAAM,GAAG,QAAQ,WAAW,MAAM,SAAS,CAAC;AAAA,IAChE;AACA,QAAI,QAAQ,WAAW,QAAQ;AAC7B,YAAM,KAAK,OAAO,IAAI,GAAG,QAAQ,WAAW,MAAM,SAAS,CAAC;AAAA,IAC9D;AACA,QAAI,QAAQ,WAAW,MAAM;AAC3B,YAAM,KAAK,OAAO,KAAK,GAAG,QAAQ,WAAW,IAAI,OAAO,CAAC;AAAA,IAC3D;AACA,QAAI,QAAQ,WAAW,SAAS;AAC9B,YAAM,KAAK,OAAO,OAAO,GAAG,QAAQ,WAAW,OAAO,UAAU,CAAC;AAAA,IACnE;AACA,QAAI,QAAQ,WAAW,YAAY;AACjC,YAAM,KAAK,OAAO,QAAQ,GAAG,QAAQ,WAAW,UAAU,aAAa,CAAC;AAAA,IAC1E;AAEA,SAAK,OAAQ,eAAe,IAAI,MAAM;AACpC,aAAO;AAAA,QACL;AAAA,UACE,KAAK,OAAO,IAAI,OAAO;AAAA,UACvB,OAAO,GAAG,MAAM,KAAK,IAAI,CAAC,IAAI,OAAO,IAAI,IAAI,QAAQ,WAAW,KAAK,GAAG,CAAC;AAAA,QAC3E;AAAA,QACA;AAAA,UACE,KAAK,OAAO,IAAI,MAAM;AAAA,UACtB,OAAO,OAAO,IAAI,GAAG,QAAQ,QAAQ,CAAC;AAAA,QACxC;AAAA,MACF;AAAA,IACF,CAAC;AAED,YAAQ,IAAI,KAAK,OAAQ,eAAe,MAAM,EAAE,KAAK,IAAI,CAAC;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,SAAwB;AACvC,UAAM,aAA+D,CAAC;AAEtE,YAAQ,YAAY,QAAQ,CAAC,UAAU;AACrC,YAAM,OAAO,QAAQ,CAAC,UAAU,WAAW,KAAK,EAAE,OAAO,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC;AAEhF,YAAM,SAAS,QAAQ,CAAC,gBAAgB;AAItC,YAAI,YAAY,SAAS,QAAQ;AAC/B,sBAAY,OAAO,QAAQ,CAAC,UAAU;AACpC,uBAAW,KAAK,EAAE,OAAO,GAAG,MAAM,IAAI,MAAM,YAAY,KAAK,IAAI,GAAG,MAAM,CAAC;AAAA,UAC7E,CAAC;AACD;AAAA,QACF;AAKA,oBAAY,OAAO,QAAQ,CAAC,UAAU;AACpC,qBAAW,KAAK,EAAE,OAAO,YAAY,MAAM,GAAG,MAAM,CAAC;AAAA,QACvD,CAAC;AACD,oBAAY,SAAS,QAAQ,CAAC,SAAS;AACrC,eAAK,OAAO,QAAQ,CAAC,UAAU;AAC7B,uBAAW,KAAK,EAAE,OAAO,GAAG,YAAY,IAAI,MAAM,KAAK,KAAK,IAAI,GAAG,MAAM,CAAC;AAAA,UAC5E,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAED,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,SAAwB;AACzC,QAAI,CAAC,QAAQ,YAAY,QAAQ;AAC/B;AAAA,IACF;AAEA,UAAM,eAAe,IAAI,cAAc;AAAA,MACrC,iBAAiB,KAAK,SAAS;AAAA,MAC/B,gBAAgB,KAAK,SAAS;AAAA,IAChC,CAAC;AAED,iBAAa,mBAAmB,QAAQ;AACxC,UAAM,aAAa,YAAY,KAAK,iBAAiB,OAAO,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA,EAKU,YAAY,GAAwB;AAAA,EAAC;AAAA,EACrC,UAAU,GAAgB;AAAA,EAAC;AAAA,EAE3B,aAAa,GAAmB;AAAA,EAAC;AAAA,EACjC,WAAW,GAAiB;AAAA,EAAC;AAAA,EAE7B,aAAa,GAAmB;AAAA,EAAC;AAAA,EACjC,WAAW,GAAiB;AAAA,EAAC;AAAA,EAEvC,MAAgB,MAAM,GAAoB;AAAA,EAAC;AAAA,EAC3C,MAAgB,IAAI,GAAkB;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA,EAKvC,MAAgB,aAAa,SAAwB;AACnD,UAAM,KAAK,aAAa,OAAO;AAE/B,YAAQ,IAAI,EAAE;AACd,QAAI,QAAQ,WAAW,UAAU,KAAK,CAAC,QAAQ,UAAU;AACvD,cAAQ,IAAI,OAAO,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAC1D;AAAA,IACF;AAEA,QAAI,QAAQ,UAAU;AACpB,cAAQ,IAAI,OAAO,MAAM,EAAE,MAAM,UAAU,CAAC;AAAA,IAC9C,OAAO;AACL,cAAQ,IAAI,OAAO,QAAQ,EAAE,MAAM,UAAU,CAAC;AAAA,IAChD;AACA,YAAQ,IAAI,EAAE;AACd,SAAK,iBAAiB,OAAO;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,KAAK,QAAgB,SAAkB;AACrC,SAAK,SAAS;AAEd,YAAQ,GAAG,cAAc,CAAC,YAAY;AACpC,WAAK,kBAAkB,QAAQ,KAAK;AACpC,WAAK,YAAY,OAAO;AAAA,IAC1B,CAAC;AAED,YAAQ,GAAG,YAAY,CAAC,YAAY;AAClC,WAAK,UAAU,OAAO;AAAA,IACxB,CAAC;AAED,YAAQ,GAAG,eAAe,CAAC,YAAY;AACrC,WAAK,mBAAmB,QAAQ;AAChC,WAAK,kBAAkB,QAAQ,KAAK;AACpC,WAAK,aAAa,OAAO;AAAA,IAC3B,CAAC;AAED,YAAQ,GAAG,aAAa,CAAC,YAAY;AACnC,WAAK,mBAAmB;AACxB,WAAK,WAAW,OAAO;AAAA,IACzB,CAAC;AAED,YAAQ,GAAG,eAAe,CAAC,YAAY;AACrC,WAAK,mBAAmB,QAAQ;AAChC,WAAK,aAAa,OAAO;AAAA,IAC3B,CAAC;AAED,YAAQ,GAAG,aAAa,CAAC,YAAY;AACnC,WAAK,mBAAmB;AACxB,WAAK,WAAW,OAAO;AAAA,IACzB,CAAC;AAED,YAAQ,GAAG,gBAAgB,OAAO,YAAY;AAC5C,YAAM,KAAK,MAAM,OAAO;AAAA,IAC1B,CAAC;AAED,YAAQ,GAAG,cAAc,OAAO,YAAY;AAC1C,YAAM,KAAK,IAAI,OAAO;AAAA,IACxB,CAAC;AAAA,EACH;AACF;;;AD/LO,IAAM,cAAN,cAA0B,gBAAgB;AAAA,EAO/C,YAAmB,MAAY;AAC7B,UAAM;AADW;AAEjB,SAAK,UAAU,CAAC,oBAA0D;AACxE,WAAK,QAAQ,eAAe;AAAA,IAC9B;AAAA,EACF;AACF;AAMO,IAAM,OAAN,cAA6D,SAGlE;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,oBAAoB,CAAC;AAAA;AAAA;AAAA;AAAA,EAK5B,OAAO,qBAAqB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7B,OAAO,SAA0B,kBAAwB;AACvD,UAAM,eAAe,IAAI,eAAe,CAAC,CAAC;AAC1C,UAAM,mBAAmB,KAAK,QAAQ;AACtC,QAAI,CAAC,kBAAkB;AACrB,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAKA,SAAK,QAAQ,WAAW,UAAU,SAA0B;AAC1D,UAAI;AACJ,UAAI;AACF,cAAM,iBAAiB,GAAG,IAAI;AAAA,MAChC,SAAS,OAAO;AACd,0BAAkB;AAAA,MACpB;AAKA,UAAI,CAAC,iBAAiB;AACpB,qBAAa,UAAU;AACvB,cAAM;AAAA,MACR;AAKA,UAAI,oBAAoB,EAAE,2BAA2B,mBAAmB;AACtE,qBAAa,UAAU,2BAA2B,QAAQ,gBAAgB,CAAC;AAC3E,cAAM;AAAA,MACR;AAKA,YAAM,mBAA4B,gBAAgB;AAClD,UAAI,CAAC,oBAAoB,OAAO,qBAAqB,UAAU;AAC7D,qBAAa,UAAU;AACvB,cAAM;AAAA,MACR;AAKA,UAAI,OAAO,YAAY,UAAU;AAC/B,YAAI,qBAAqB,SAAS;AAChC,uBAAa,UAAU,2BAA2B,OAAO,wBAAwB,gBAAgB,OAAO;AACxG,uBAAa,SAAS,gBAAgB;AACtC,uBAAa,WAAW;AACxB,gBAAM;AAAA,QACR;AACA;AAAA,MACF;AAEA,UAAI,CAAC,QAAQ,KAAK,gBAAgB,GAAG;AACnC,qBAAa,UAAU,iCAAiC,OAAO;AAC/D,cAAM;AAAA,MACR;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAMO,IAAM,QAAN,cAAoB,UAAuB;AAAC;AAO5C,IAAM,QAAN,cAAoB,UAAuB;AAAC;AAK5C,IAAM,SAAN,cAAqB,WAAwB;AAAC;","names":[]}