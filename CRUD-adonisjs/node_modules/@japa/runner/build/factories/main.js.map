{"version":3,"sources":["../../factories/runner.ts","../../factories/create_diverse_tests.ts","../../factories/main.ts"],"sourcesContent":["/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { fileURLToPath } from 'node:url'\n\nimport { Planner } from '../src/planner.js'\nimport { GlobalHooks } from '../src/hooks.js'\nimport { CliParser } from '../src/cli_parser.js'\nimport { createTest } from '../src/create_test.js'\nimport { ConfigManager } from '../src/config_manager.js'\nimport { Suite, Runner, Emitter, TestContext, Refiner } from '../modules/core/main.js'\nimport type {\n  Config,\n  CLIArgs,\n  TestExecutor,\n  RunnerSummary,\n  NormalizedConfig,\n} from '../src/types.js'\n\n/**\n * Runner factory exposes the API to run dummy suites, groups and tests.\n * You might want to use the factory for testing reporters and\n * plugins usage\n */\nexport class RunnerFactory {\n  #emitter = new Emitter()\n  #config?: NormalizedConfig\n  #cliArgs?: CLIArgs\n  #file = fileURLToPath(import.meta.url)\n\n  get #refiner() {\n    return this.#config!.refiner\n  }\n\n  /**\n   * Registers plugins\n   */\n  async #registerPlugins(runner: Runner) {\n    for (let plugin of this.#config!.plugins) {\n      await plugin({\n        config: this.#config!,\n        runner,\n        emitter: this.#emitter,\n        cliArgs: this.#cliArgs!,\n      })\n    }\n  }\n\n  /**\n   * Configure runner\n   */\n  configure(config: Config, argv?: string[]) {\n    this.#cliArgs = new CliParser().parse(argv || [])\n    this.#config = new ConfigManager(config, this.#cliArgs).hydrate()\n    return this\n  }\n\n  /**\n   * Define a custom emitter instance to use\n   */\n  useEmitter(emitter: Emitter) {\n    this.#emitter = emitter\n    return this\n  }\n\n  /**\n   * Run a test using the runner\n   */\n  async runTest(\n    title: string,\n    callback: TestExecutor<TestContext, undefined>\n  ): Promise<RunnerSummary> {\n    return this.runSuites((emitter, refiner, file) => {\n      const defaultSuite = new Suite('default', emitter, refiner)\n\n      createTest(title, emitter, refiner, {\n        suite: defaultSuite,\n        file: file,\n      }).run(callback)\n\n      return [defaultSuite]\n    })\n  }\n\n  /**\n   * Run dummy tests. You might use\n   */\n  async runSuites(\n    suites: (emitter: Emitter, refiner: Refiner, file?: string) => Suite[]\n  ): Promise<RunnerSummary> {\n    const runner = new Runner(this.#emitter)\n    await this.#registerPlugins(runner)\n\n    const { config, reporters, refinerFilters } = await new Planner(this.#config!).plan()\n    const globalHooks = new GlobalHooks()\n    globalHooks.apply(config)\n\n    reporters.forEach((reporter) => {\n      runner.registerReporter(reporter)\n    })\n\n    refinerFilters.forEach((filter) => {\n      config.refiner.add(filter.layer, filter.filters)\n    })\n\n    suites(this.#emitter, this.#refiner, this.#file).forEach((suite) => runner.add(suite))\n\n    await globalHooks.setup(runner)\n    await runner.start()\n    await runner.exec()\n    await runner.end()\n    await globalHooks.teardown(null, runner)\n\n    return runner.getSummary()\n  }\n}\n","import assert from 'node:assert'\nimport { Suite, Emitter, Refiner } from '../modules/core/main.js'\nimport { createTest, createTestGroup } from '../src/create_test.js'\n\n/**\n * Creates a unit tests suite with bunch of dummy tests\n * reproducing different tests behavior\n */\nfunction createUnitTestsSuite(emitter: Emitter, refiner: Refiner, file?: string) {\n  const suite = new Suite('unit', emitter, refiner)\n  const group = createTestGroup('Maths#add', emitter, refiner, {\n    suite,\n    file,\n  })\n\n  createTest('A top level test inside a suite', emitter, refiner, {\n    suite,\n    file,\n  }).run(() => {})\n\n  createTest('add two numbers', emitter, refiner, { group, file }).run(() => {\n    assert.equal(2 + 2, 4)\n  })\n  createTest('add three numbers', emitter, refiner, {\n    group,\n    file,\n  }).run(() => {\n    assert.equal(2 + 2 + 2, 6)\n  })\n\n  createTest('add group of numbers', emitter, refiner, { group, file })\n  createTest('use math.js lib', emitter, refiner, { group, file }).skip(\n    true,\n    'Library work pending'\n  )\n  createTest('add multiple numbers', emitter, refiner, {\n    file,\n    group,\n  }).run(() => {\n    assert.equal(2 + 2 + 2 + 2, 6)\n  })\n  createTest('add floating numbers', emitter, refiner, { group, file })\n    .run(() => {\n      assert.equal(2 + 2.2 + 2.1, 6)\n    })\n    .fails('Have to add support for floating numbers')\n  createTest('A test with an error that is not an AssertionError', emitter, refiner, {\n    group,\n    file,\n  }).run(() => {\n    throw new Error('This is an error')\n  })\n\n  return suite\n}\n\n/**\n * Creates a unit functional suite with bunch of dummy tests\n * reproducing different tests behavior\n */\nfunction createFunctionalTestsSuite(emitter: Emitter, refiner: Refiner, file?: string) {\n  const suite = new Suite('functional', emitter, refiner)\n\n  const group = createTestGroup('Users/store', emitter, refiner, {\n    suite,\n    file: file,\n  })\n  createTest('Validate user data', emitter, refiner, {\n    group,\n    file: file,\n  }).run(() => {})\n  createTest('Disallow duplicate emails', emitter, refiner, {\n    group,\n    file: file,\n  }).run(() => {})\n  createTest('Disallow duplicate emails across tenants', emitter, refiner, {\n    group,\n    file: file,\n  }).run(() => {\n    const users = ['', '']\n    assert.equal(users.length, 1)\n  })\n  createTest('Normalize email before persisting it', emitter, refiner, {\n    group,\n    file: file,\n  }).skip(true, 'Have to build a normalizer')\n  createTest('Send email verification mail', emitter, refiner, {\n    group,\n    file: file,\n  })\n\n  const usersListGroup = createTestGroup('Users/list', emitter, refiner, {\n    suite,\n    file: file,\n  })\n  usersListGroup.setup(() => {\n    throw new Error('Unable to cleanup database')\n  })\n  createTest('A test that will never because the group hooks fails', emitter, refiner, {\n    group: usersListGroup,\n  })\n\n  createTest('A top level test inside functional suite', emitter, refiner, {\n    suite,\n    file: file,\n  }).run(() => {})\n\n  return suite\n}\n\n/**\n * Returns an array of suites with dummy tests reproducting\n * different test behavior\n */\nexport function createDiverseTests(emitter: Emitter, refiner: Refiner, file?: string): Suite[] {\n  return [\n    createUnitTestsSuite(emitter, refiner, file),\n    createFunctionalTestsSuite(emitter, refiner, file),\n  ]\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { ReporterContract } from '../src/types.js'\nimport { RunnerFactory } from './runner.js'\n\n/**\n * Create an instance of the runner factory\n */\nexport const runner = () => new RunnerFactory()\nexport { createDiverseTests } from './create_diverse_tests.js'\nexport const syncReporter: ReporterContract = {\n  name: 'sync',\n  handler(r, emitter) {\n    emitter.on('runner:end', function () {\n      const summary = r.getSummary()\n      if (summary.hasError) {\n        if (summary.failureTree[0].errors.length) {\n          throw summary.failureTree[0].errors[0].error\n        }\n        if (summary.failureTree[0].children[0].errors.length) {\n          throw summary.failureTree[0].children[0].errors[0].error\n        }\n      }\n    })\n  },\n}\n"],"mappings":"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","names":["runner"]}