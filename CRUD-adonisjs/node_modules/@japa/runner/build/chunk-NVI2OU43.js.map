{"version":3,"sources":["../src/debug.ts","../src/validator.ts","../src/files_manager.ts","../src/planner.ts","../src/hooks.ts","../src/cli_parser.ts","../src/config_manager.ts","../src/create_test.ts"],"sourcesContent":["/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\nexport default debuglog('japa:runner')\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { NormalizedConfig } from './types.js'\n\n/**\n * Validator encapsulates the validations to perform before running\n * the tests\n */\nclass Validator {\n  /**\n   * Ensures the japa is configured. Otherwise raises an exception\n   */\n  ensureIsConfigured(config: NormalizedConfig | undefined) {\n    if (!config) {\n      throw new Error(\n        `Cannot run tests. Make sure to call \"configure\" method before the \"run\" method`\n      )\n    }\n  }\n\n  /**\n   * Ensures the japa is in planning phase\n   */\n  ensureIsInPlanningPhase(phase: 'idle' | 'planning' | 'executing') {\n    if (phase !== 'planning') {\n      throw new Error(\n        `Cannot import japa test file directly. It must be imported by calling the \"japa.run\" method`\n      )\n    }\n  }\n\n  /**\n   * Ensures the suites filter uses a subset of the user configured suites.\n   */\n  validateSuitesFilter(config: NormalizedConfig) {\n    /**\n     * Do not perform any validation if no filters are applied\n     * in the first place\n     */\n    if (!config.filters.suites || !config.filters.suites.length) {\n      return\n    }\n\n    /**\n     * Notify user they have applied the suites filter but forgot to define\n     * suites\n     */\n    if (!('suites' in config) || !config.suites.length) {\n      throw new Error(`Cannot apply suites filter. You have not configured any test suites`)\n    }\n\n    const suites = config.suites.map(({ name }) => name)\n\n    /**\n     * Find unknown suites and report the error\n     */\n    const unknownSuites = config.filters.suites.filter((suite) => !suites.includes(suite))\n    if (unknownSuites.length) {\n      throw new Error(`Cannot apply suites filter. \"${unknownSuites[0]}\" suite is not configured`)\n    }\n  }\n\n  /**\n   * Ensure there are unique suites\n   */\n  validateSuitesForUniqueness(config: NormalizedConfig) {\n    if (!('suites' in config)) {\n      return\n    }\n\n    const suites: Set<string> = new Set()\n    config.suites.forEach(({ name }) => {\n      if (suites.has(name)) {\n        throw new Error(`Duplicate suite \"${name}\"`)\n      }\n      suites.add(name)\n    })\n\n    suites.clear()\n  }\n\n  /**\n   * Ensure the activated reporters are in the list of defined\n   * reporters\n   */\n  validateActivatedReporters(config: NormalizedConfig) {\n    const reportersList = config.reporters.list.map(({ name }) => name)\n    const unknownReporters = config.reporters.activated.filter(\n      (name) => !reportersList.includes(name)\n    )\n\n    if (unknownReporters.length) {\n      throw new Error(\n        `Invalid reporter \"${unknownReporters[0]}\". Make sure to register it first inside the \"reporters.list\" array`\n      )\n    }\n  }\n}\n\nexport default new Validator()\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport slash from 'slash'\nimport fastGlob from 'fast-glob'\nimport { pathToFileURL } from 'node:url'\nimport type { TestFiles } from './types.js'\n\n/**\n * The expression to remove file extension and optionally\n * .spec|.test from the test file name\n */\nconst FILE_SUFFIX_EXPRESSION = /(\\.spec|\\.test)?\\.[js|ts|jsx|tsx|mjs|mts|cjs|cts]+$/\n\n/**\n * Files manager exposes the API to collect, filter and import test\n * files based upon the config\n */\nexport class FilesManager {\n  /**\n   * Returns a collection of files from the user defined\n   * glob or the implementation function\n   */\n  async getFiles(cwd: string, files: TestFiles, excludes: string[]): Promise<URL[]> {\n    if (Array.isArray(files) || typeof files === 'string') {\n      const testFiles = await fastGlob(files, {\n        absolute: true,\n        onlyFiles: true,\n        cwd: cwd,\n        ignore: excludes,\n      })\n      return testFiles.map((file) => pathToFileURL(file))\n    }\n\n    return await files()\n  }\n\n  /**\n   * Applies file name filter on a collection of file\n   * URLs\n   */\n  grep(files: URL[], filters: string[]): URL[] {\n    return files.filter((file) => {\n      const filename = slash(file.pathname)\n      const filenameWithoutTestSuffix = filename.replace(FILE_SUFFIX_EXPRESSION, '')\n\n      return !!filters.find((filter) => {\n        if (filename.endsWith(filter)) {\n          return true\n        }\n\n        const filterSegments = filter.split('/').reverse()\n        const fileSegments = filenameWithoutTestSuffix.split('/').reverse()\n\n        return filterSegments.every((segment, index) => {\n          return fileSegments[index] && (segment === '*' || fileSegments[index].endsWith(segment))\n        })\n      })\n    })\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport validator from './validator.js'\nimport { FilesManager } from './files_manager.js'\nimport type { NamedReporterContract, NormalizedConfig, TestFiles, TestSuite } from './types.js'\n\n/**\n * The tests planner is used to plan the tests by doing all\n * the heavy lifting of executing plugins, registering\n * reporters, filtering tests and so on.\n */\nexport class Planner {\n  #config: NormalizedConfig\n  #fileManager = new FilesManager()\n\n  constructor(config: NormalizedConfig) {\n    validator.validateActivatedReporters(config!)\n    validator.validateSuitesFilter(config!)\n    validator.validateSuitesForUniqueness(config!)\n    this.#config = config\n  }\n\n  /**\n   * Returns a list of reporters based upon the activated\n   * reporters list.\n   */\n  #getActivatedReporters(): NamedReporterContract[] {\n    return this.#config.reporters.activated.map((activated) => {\n      return this.#config.reporters.list.find(({ name }) => activated === name)!\n    })\n  }\n\n  /**\n   * A generic method to collect files from the user defined\n   * files glob and apply the files filter\n   */\n  async #collectFiles(files: TestFiles) {\n    let filesURLs = await this.#fileManager.getFiles(this.#config.cwd, files, this.#config.exclude)\n    if (this.#config.filters.files && this.#config.filters.files.length) {\n      filesURLs = this.#fileManager.grep(filesURLs, this.#config.filters.files)\n    }\n\n    return filesURLs\n  }\n\n  /**\n   * Returns a collection of suites and their associated\n   * test files by applying all the filters\n   */\n  async #getSuites(): Promise<(TestSuite & { filesURLs: URL[] })[]> {\n    let suites: (TestSuite & { filesURLs: URL[] })[] = []\n    let suitesFilters = this.#config.filters.suites || []\n\n    if ('files' in this.#config) {\n      suites.push({\n        name: 'default',\n        files: this.#config.files,\n        timeout: this.#config.timeout,\n        retries: this.#config.retries,\n        filesURLs: await this.#collectFiles(this.#config.files),\n      })\n    }\n\n    if ('suites' in this.#config) {\n      for (let suite of this.#config.suites) {\n        if (!suitesFilters.length || suitesFilters.includes(suite.name)) {\n          suites.push({\n            ...suite,\n            filesURLs: await this.#collectFiles(suite.files),\n          })\n        }\n      }\n    }\n\n    return suites\n  }\n\n  /**\n   * Returns a list of filters to the passed to the refiner\n   */\n  #getRefinerFilters() {\n    return Object.keys(this.#config.filters).reduce(\n      (result, layer) => {\n        if (layer === 'tests' || layer === 'tags' || layer === 'groups') {\n          result.push({ layer, filters: this.#config.filters[layer]! })\n        }\n        return result\n      },\n      [] as { layer: 'tags' | 'tests' | 'groups'; filters: string[] }[]\n    )\n  }\n\n  /**\n   * Creates a plan for running the tests\n   */\n  async plan() {\n    const suites = await this.#getSuites()\n    const reporters = this.#getActivatedReporters()\n    const refinerFilters = this.#getRefinerFilters()\n    return {\n      reporters,\n      suites,\n      refinerFilters,\n      config: this.#config,\n    }\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport Hooks from '@poppinss/hooks'\nimport type { Runner as HooksRunner } from '@poppinss/hooks/types'\n\nimport { Runner } from '../modules/core/main.js'\nimport type { HooksEvents, SetupHookState, NormalizedConfig, TeardownHookState } from './types.js'\n\n/**\n * Exposes API for working with global hooks\n */\nexport class GlobalHooks {\n  #hooks = new Hooks<HooksEvents>()\n  #setupRunner: HooksRunner<SetupHookState[0], SetupHookState[1]> | undefined\n  #teardownRunner: HooksRunner<TeardownHookState[0], TeardownHookState[1]> | undefined\n\n  /**\n   * Apply hooks from the config\n   */\n  apply(config: NormalizedConfig) {\n    config.setup.forEach((hook) => this.#hooks.add('setup', hook))\n    config.teardown.forEach((hook) => this.#hooks.add('teardown', hook))\n  }\n\n  /**\n   * Perform setup\n   */\n  async setup(runner: Runner) {\n    this.#setupRunner = this.#hooks.runner('setup')\n    this.#teardownRunner = this.#hooks.runner('teardown')\n    await this.#setupRunner.run(runner)\n  }\n\n  /**\n   * Perform cleanup\n   */\n  async teardown(error: Error | null, runner: Runner) {\n    if (this.#setupRunner) {\n      await this.#setupRunner.cleanup(error, runner)\n    }\n    if (this.#teardownRunner) {\n      if (!error) {\n        await this.#teardownRunner.run(runner)\n      }\n      await this.#teardownRunner.cleanup(error, runner)\n    }\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// @ts-ignore-error\nimport getopts from 'getopts'\nimport { colors } from './helpers.js'\nimport type { CLIArgs } from './types.js'\n\n/**\n * Known commandline options. The user can still define additional flags and they\n * will be parsed aswell, but without any normalization\n */\nconst OPTIONS = {\n  string: ['tests', 'groups', 'tags', 'files', 'timeout', 'retries', 'reporters', 'failed'],\n  boolean: ['help', 'matchAll', 'failed'],\n  alias: {\n    forceExit: 'force-exit',\n    matchAll: 'match-all',\n    help: 'h',\n  },\n}\n\n/**\n * Help string to display when the `--help flag is used`\n */\nconst GET_HELP = () => `\n${colors.yellow('@japa/runner v2.3.0')}\n\n${colors.green('--tests')}                     ${colors.dim('Filter tests by the test title')}\n${colors.green('--groups')}                    ${colors.dim('Filter tests by the group title')}\n${colors.green('--tags')}                      ${colors.dim('Filter tests by tags')}\n${colors.green('--files')}                     ${colors.dim('Filter tests by the file name')}\n${colors.green('--force-exit')}                ${colors.dim('Forcefully exit the process')}\n${colors.green('--timeout')}                   ${colors.dim('Define default timeout for all tests')}\n${colors.green('--retries')}                   ${colors.dim('Define default retries for all tests')}\n${colors.green('--reporters')}                 ${colors.dim('Activate one or more test reporters')}\n${colors.green('--failed')}                    ${colors.dim('Run tests failed during the last run')}\n${colors.green('-h, --help')}                  ${colors.dim('View help')}\n\n${colors.yellow('Examples:')}\n${colors.dim('node bin/test.js --tags=\"@github\"')}\n${colors.dim('node bin/test.js --tags=\"~@github\"')}\n${colors.dim('node bin/test.js --tags=\"@github,@slow,@integration\" --match-all')}\n${colors.dim('node bin/test.js --force-exit')}\n${colors.dim('node bin/test.js --files=\"user\"')}\n${colors.dim('node bin/test.js --files=\"functional/user\"')}\n${colors.dim('node bin/test.js --files=\"unit/user\"')}\n\n${colors.yellow('Notes:')}\n- When groups and tests filters are applied together. We will first filter the\n  tests by group title and then apply the tests title filter.\n- The timeout defined on test object takes precedence over the ${colors.green('--timeout')} flag.\n- The retries defined on test object takes precedence over the ${colors.green('--retries')} flag.\n- The ${colors.green('--files')} flag checks for the file names ending with the filter substring.\n`\n\n/**\n * CLI Parser is used to parse the commandline argument\n */\nexport class CliParser {\n  /**\n   * Parses command-line arguments\n   */\n  parse(argv: string[]): CLIArgs {\n    return getopts(argv, OPTIONS)\n  }\n\n  /**\n   * Returns the help string\n   */\n  getHelp() {\n    return GET_HELP()\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport debug from './debug.js'\nimport { Refiner } from '../modules/core/main.js'\nimport { dot, ndjson, spec } from './reporters/main.js'\nimport type { CLIArgs, Config, Filters, NormalizedBaseConfig, NormalizedConfig } from './types.js'\n\nexport const NOOP = () => {}\n\n/**\n * Defaults to use for configuration\n */\nconst DEFAULTS = {\n  files: [],\n  timeout: 2000,\n  retries: 0,\n  forceExit: false,\n  plugins: [],\n  reporters: {\n    activated: ['spec'],\n    list: [spec(), ndjson(), dot()],\n  },\n  importer: (filePath) => import(filePath.href),\n  configureSuite: () => {},\n} satisfies Config\n\n/**\n * Config manager is used to hydrate the configuration by merging\n * the defaults, user defined config and the command line\n * flags.\n *\n * The command line flags have the upmost priority\n */\nexport class ConfigManager {\n  #config: Config\n  #cliArgs: CLIArgs\n\n  constructor(config: Config, cliArgs: CLIArgs) {\n    this.#config = config\n    this.#cliArgs = cliArgs\n  }\n\n  /**\n   * Processes a CLI argument and converts it to an\n   * array of strings\n   */\n  #processAsArray(value: string | string[], splitByComma: boolean): string[] {\n    return Array.isArray(value)\n      ? value\n      : splitByComma\n        ? value.split(',').map((item: string) => item.trim())\n        : [value]\n  }\n\n  /**\n   * Returns a copy of filters based upon the CLI\n   * arguments.\n   */\n  #getCLIFilters(): Filters {\n    const filters: Filters = {}\n\n    if (this.#cliArgs.tags) {\n      filters.tags = this.#processAsArray(this.#cliArgs.tags, true)\n    }\n    if (this.#cliArgs.tests) {\n      filters.tests = this.#processAsArray(this.#cliArgs.tests, false)\n    }\n    if (this.#cliArgs.files) {\n      filters.files = this.#processAsArray(this.#cliArgs.files, true)\n    }\n    if (this.#cliArgs.groups) {\n      filters.groups = this.#processAsArray(this.#cliArgs.groups, false)\n    }\n    if (this.#cliArgs._ && this.#cliArgs._.length) {\n      filters.suites = this.#processAsArray(this.#cliArgs._, true)\n    }\n\n    return filters\n  }\n\n  /**\n   * Returns the timeout from the CLI args\n   */\n  #getCLITimeout(): number | undefined {\n    if (this.#cliArgs.timeout) {\n      const value = Number(this.#cliArgs.timeout)\n      if (!Number.isNaN(value)) {\n        return value\n      }\n    }\n  }\n\n  /**\n   * Returns the retries from the CLI args\n   */\n  #getCLIRetries(): number | undefined {\n    if (this.#cliArgs.retries) {\n      const value = Number(this.#cliArgs.retries)\n      if (!Number.isNaN(value)) {\n        return value\n      }\n    }\n  }\n\n  /**\n   * Returns the forceExit property from the CLI args\n   */\n  #getCLIForceExit(): boolean | undefined {\n    if (this.#cliArgs.forceExit) {\n      return true\n    }\n  }\n\n  /**\n   * Returns reporters selected using the commandline\n   * --reporter flag\n   */\n  #getCLIReporters(): string[] | undefined {\n    if (this.#cliArgs.reporters) {\n      return this.#processAsArray(this.#cliArgs.reporters, true)\n    }\n  }\n\n  /**\n   * Hydrates the config with user defined options and the\n   * command-line flags.\n   */\n  hydrate(): NormalizedConfig {\n    const cliFilters = this.#getCLIFilters()\n    const cliRetries = this.#getCLIRetries()\n    const cliTimeout = this.#getCLITimeout()\n    const cliReporters = this.#getCLIReporters()\n    const cliForceExit = this.#getCLIForceExit()\n\n    debug('filters applied using CLI flags %O', cliFilters)\n\n    const baseConfig: NormalizedBaseConfig = {\n      cwd: this.#config.cwd ?? process.cwd(),\n      exclude: this.#config.exclude || ['node_modules/**', '.git/**', 'coverage/**'],\n      filters: Object.assign({}, this.#config.filters ?? {}, cliFilters),\n      importer: this.#config.importer ?? DEFAULTS.importer,\n      refiner: this.#config.refiner ?? new Refiner(),\n      retries: cliRetries ?? this.#config.retries ?? DEFAULTS.retries,\n      timeout: cliTimeout ?? this.#config.timeout ?? DEFAULTS.timeout,\n      plugins: this.#config.plugins ?? DEFAULTS.plugins,\n      forceExit: cliForceExit ?? this.#config.forceExit ?? DEFAULTS.forceExit,\n      reporters: this.#config.reporters\n        ? {\n            activated: this.#config.reporters.activated,\n            list: this.#config.reporters.list || DEFAULTS.reporters.list,\n          }\n        : DEFAULTS.reporters,\n      configureSuite: this.#config.configureSuite ?? DEFAULTS.configureSuite,\n      setup: this.#config.setup || [],\n      teardown: this.#config.teardown || [],\n    }\n\n    /**\n     * Overwrite activated reporters when defined using CLI\n     * flag\n     */\n    if (cliReporters) {\n      baseConfig.reporters.activated = cliReporters\n    }\n\n    if ('files' in this.#config) {\n      return {\n        files: this.#config.files,\n        ...baseConfig,\n      }\n    }\n\n    return {\n      suites: this.#config.suites.map((suite) => {\n        return {\n          name: suite.name,\n          files: suite.files,\n          timeout: cliTimeout ?? suite.timeout ?? baseConfig.timeout,\n          retries: cliRetries ?? suite.retries ?? baseConfig.retries,\n          configure: suite.configure || NOOP,\n        }\n      }),\n      ...baseConfig,\n    }\n  }\n}\n","/*\n * @japa/runner\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { Emitter, Group, Refiner, Suite, Test, TestContext } from '../modules/core/main.js'\n\n/**\n * Function to create the test context for the test\n */\nconst contextBuilder = (testInstance: Test<any>) => new TestContext(testInstance)\n\n/**\n * Create a new instance of the Test\n */\nexport function createTest(\n  title: string,\n  emitter: Emitter,\n  refiner: Refiner,\n  options: {\n    group?: Group\n    suite?: Suite\n    file?: string\n    timeout?: number\n    retries?: number\n  }\n) {\n  const testInstance = new Test<undefined>(title, contextBuilder, emitter, refiner, options.group)\n  testInstance.options.meta.suite = options.suite\n  testInstance.options.meta.group = options.group\n  testInstance.options.meta.fileName = options.file\n\n  if (options.timeout !== undefined) {\n    testInstance.timeout(options.timeout)\n  }\n  if (options.retries !== undefined) {\n    testInstance.retry(options.retries)\n  }\n\n  /**\n   * Register test as a child either with the group or the suite\n   */\n  if (options.group) {\n    options.group.add(testInstance)\n  } else if (options.suite) {\n    options.suite.add(testInstance)\n  }\n\n  return testInstance\n}\n\n/**\n * Create a new instance of the Group\n */\nexport function createTestGroup(\n  title: string,\n  emitter: Emitter,\n  refiner: Refiner,\n  options: {\n    group?: Group\n    suite?: Suite\n    file?: string\n    timeout?: number\n    retries?: number\n  }\n) {\n  if (options.group) {\n    throw new Error('Nested groups are not supported by Japa')\n  }\n\n  const group = new Group(title, emitter, refiner)\n  group.options.meta.suite = options.suite\n  group.options.meta.fileName = options.file\n\n  if (options.suite) {\n    options.suite.add(group)\n  }\n\n  return group\n}\n"],"mappings":"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","names":[]}