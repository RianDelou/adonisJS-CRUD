import {
  debug_default
} from "./chunk-SWUWPIUE.js";

// src/extend_api_client.ts
import { ApiClient, ApiRequest } from "@japa/api-client";
function extendApiClient(cookieClient) {
  debug_default("extending @japa/api-client with adonisjs specific methods");
  ApiClient.cookiesSerializer({
    /**
     * The methods on the Request class encrypts and signs cookies.
     * Therefore, the prepare method returns the value as it is
     */
    prepare(_, value) {
      return value;
    },
    /**
     * Process the server response and convert cookie value to a
     * plain string
     */
    process(key, value) {
      if (!value) {
        return value;
      }
      return cookieClient.parse(key, value);
    }
  });
  ApiRequest.macro("withCookie", function(key, value) {
    const signedValue = cookieClient.sign(key, value);
    if (signedValue) {
      this.cookiesJar[key] = { name: key, value: signedValue };
    }
    return this;
  });
  ApiRequest.macro("cookie", function(key, value) {
    return this.withCookie(key, value);
  });
  ApiRequest.macro("withEncryptedCookie", function(key, value) {
    const encryptedValue = cookieClient.encrypt(key, value);
    if (encryptedValue) {
      this.cookiesJar[key] = { name: key, value: encryptedValue };
    }
    return this;
  });
  ApiRequest.macro("encryptedCookie", function(key, value) {
    return this.withEncryptedCookie(key, value);
  });
  ApiRequest.macro("withPlainCookie", function(key, value) {
    const plainValue = cookieClient.encode(key, value);
    if (plainValue) {
      this.cookiesJar[key] = { name: key, value: plainValue };
    }
    return this;
  });
  ApiRequest.macro("plainCookie", function(key, value) {
    return this.withPlainCookie(key, value);
  });
}
export {
  extendApiClient
};
//# sourceMappingURL=extend_api_client-MTNJ2ICA.js.map