{"version":3,"sources":["../src/extend_browser_client.ts"],"sourcesContent":["/*\n * @japa/plugin-adonisjs\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport './types/extended.js'\nimport { CookieOptions } from 'playwright'\nimport { CookieClient } from '@adonisjs/core/http'\nimport { decoratorsCollection } from '@japa/browser-client'\nimport type { Decorator } from '@japa/browser-client/types'\n\nimport debug from './debug.js'\n\n/**\n * Normalizes the cookies options to use the default domain\n * and path\n */\nfunction normalizeCookieOptions(defaultDomain?: string, options?: CookieOptions): CookieOptions {\n  return Object.assign(\n    {\n      domain: defaultDomain,\n      path: '/',\n    },\n    options\n  )\n}\n\n/**\n * Mimicing the behavior of https://github.com/jshttp/cookie/blob/master/index.js\n * package used by AdonisJS to decode response cookies.\n */\nfunction tryDecode(value: string) {\n  try {\n    return value.indexOf('%') !== -1 ? decodeURIComponent(value) : value\n  } catch {\n    return value\n  }\n}\n\n/**\n * Registers custom decorators with the browser client\n */\nexport function extendBrowserClient(cookieClient: CookieClient, baseURL?: string) {\n  debug('extending @japa/browser-client with adonisjs specific methods')\n\n  /**\n   * Compute base url from HOST and PORT variables (if exists)\n   */\n  if (!baseURL) {\n    const HOST = process.env.HOST\n    const PORT = process.env.PORT\n    if (HOST && PORT) {\n      baseURL = `http://${HOST}:${PORT}`\n    }\n  }\n\n  const cookiesDomain = baseURL ? new URL(baseURL).host : undefined\n\n  /**\n   * Adding cookie methods\n   */\n  decoratorsCollection.register({\n    context(context) {\n      /**\n       * Get a signed cookie from the browser context.\n       */\n      context.getCookie = async function (key) {\n        const cookiesList = await this.cookies()\n        const cookie = cookiesList.find(({ name }) => name === key)\n\n        if (!cookie) {\n          return null\n        }\n\n        return cookieClient.unsign(key, tryDecode(cookie.value))\n      }\n\n      /**\n       * Get an encrypted cookie from the browser context.\n       */\n      context.getEncryptedCookie = async function (key) {\n        const cookiesList = await this.cookies()\n        const cookie = cookiesList.find(({ name }) => name === key)\n\n        if (!cookie) {\n          return null\n        }\n\n        return cookieClient.decrypt(key, tryDecode(cookie.value))\n      }\n\n      /**\n       * Get a plain cookie from the browser context.\n       */\n      context.getPlainCookie = async function (key) {\n        const cookiesList = await this.cookies()\n        const cookie = cookiesList.find(({ name }) => name === key)\n\n        if (!cookie) {\n          return null\n        }\n\n        return cookieClient.decode(key, tryDecode(cookie.value))\n      }\n\n      /**\n       * Set a signed cookie on the browser context. Once the cookie is\n       * set, all pages inside the given context with have access to\n       * it.\n       */\n      context.setCookie = async function (key, value, options) {\n        const signedValue = cookieClient.sign(key, value)\n\n        if (signedValue) {\n          await this.addCookies([\n            {\n              name: key,\n              value: signedValue,\n              ...normalizeCookieOptions(cookiesDomain, options),\n            },\n          ])\n        }\n      }\n\n      /**\n       * Set an encrypted cookie on the browser context. Once the cookie is\n       * set, all pages inside the given context with have access to\n       * it.\n       */\n      context.setEncryptedCookie = async function (key, value, options) {\n        const encryptedValue = cookieClient.encrypt(key, value)\n        if (encryptedValue) {\n          await this.addCookies([\n            {\n              name: key,\n              value: encryptedValue,\n              ...normalizeCookieOptions(cookiesDomain, options),\n            },\n          ])\n        }\n      }\n\n      /**\n       * Set an encrypted cookie on the browser context. Once the cookie is\n       * set, all pages inside the given context with have access to\n       * it.\n       */\n      context.setPlainCookie = async function (key, value, options) {\n        const plainCookie = cookieClient.encode(key, value)\n        if (plainCookie) {\n          await this.addCookies([\n            {\n              name: key,\n              value: plainCookie,\n              ...normalizeCookieOptions(cookiesDomain, options),\n            },\n          ])\n        }\n      }\n    },\n  } satisfies Decorator)\n}\n"],"mappings":";;;;;AAYA,SAAS,4BAA4B;AASrC,SAAS,uBAAuB,eAAwB,SAAwC;AAC9F,SAAO,OAAO;AAAA,IACZ;AAAA,MACE,QAAQ;AAAA,MACR,MAAM;AAAA,IACR;AAAA,IACA;AAAA,EACF;AACF;AAMA,SAAS,UAAU,OAAe;AAChC,MAAI;AACF,WAAO,MAAM,QAAQ,GAAG,MAAM,KAAK,mBAAmB,KAAK,IAAI;AAAA,EACjE,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AAKO,SAAS,oBAAoB,cAA4B,SAAkB;AAChF,gBAAM,+DAA+D;AAKrE,MAAI,CAAC,SAAS;AACZ,UAAM,OAAO,QAAQ,IAAI;AACzB,UAAM,OAAO,QAAQ,IAAI;AACzB,QAAI,QAAQ,MAAM;AAChB,gBAAU,UAAU,IAAI,IAAI,IAAI;AAAA,IAClC;AAAA,EACF;AAEA,QAAM,gBAAgB,UAAU,IAAI,IAAI,OAAO,EAAE,OAAO;AAKxD,uBAAqB,SAAS;AAAA,IAC5B,QAAQ,SAAS;AAIf,cAAQ,YAAY,eAAgB,KAAK;AACvC,cAAM,cAAc,MAAM,KAAK,QAAQ;AACvC,cAAM,SAAS,YAAY,KAAK,CAAC,EAAE,KAAK,MAAM,SAAS,GAAG;AAE1D,YAAI,CAAC,QAAQ;AACX,iBAAO;AAAA,QACT;AAEA,eAAO,aAAa,OAAO,KAAK,UAAU,OAAO,KAAK,CAAC;AAAA,MACzD;AAKA,cAAQ,qBAAqB,eAAgB,KAAK;AAChD,cAAM,cAAc,MAAM,KAAK,QAAQ;AACvC,cAAM,SAAS,YAAY,KAAK,CAAC,EAAE,KAAK,MAAM,SAAS,GAAG;AAE1D,YAAI,CAAC,QAAQ;AACX,iBAAO;AAAA,QACT;AAEA,eAAO,aAAa,QAAQ,KAAK,UAAU,OAAO,KAAK,CAAC;AAAA,MAC1D;AAKA,cAAQ,iBAAiB,eAAgB,KAAK;AAC5C,cAAM,cAAc,MAAM,KAAK,QAAQ;AACvC,cAAM,SAAS,YAAY,KAAK,CAAC,EAAE,KAAK,MAAM,SAAS,GAAG;AAE1D,YAAI,CAAC,QAAQ;AACX,iBAAO;AAAA,QACT;AAEA,eAAO,aAAa,OAAO,KAAK,UAAU,OAAO,KAAK,CAAC;AAAA,MACzD;AAOA,cAAQ,YAAY,eAAgB,KAAK,OAAO,SAAS;AACvD,cAAM,cAAc,aAAa,KAAK,KAAK,KAAK;AAEhD,YAAI,aAAa;AACf,gBAAM,KAAK,WAAW;AAAA,YACpB;AAAA,cACE,MAAM;AAAA,cACN,OAAO;AAAA,cACP,GAAG,uBAAuB,eAAe,OAAO;AAAA,YAClD;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAOA,cAAQ,qBAAqB,eAAgB,KAAK,OAAO,SAAS;AAChE,cAAM,iBAAiB,aAAa,QAAQ,KAAK,KAAK;AACtD,YAAI,gBAAgB;AAClB,gBAAM,KAAK,WAAW;AAAA,YACpB;AAAA,cACE,MAAM;AAAA,cACN,OAAO;AAAA,cACP,GAAG,uBAAuB,eAAe,OAAO;AAAA,YAClD;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAOA,cAAQ,iBAAiB,eAAgB,KAAK,OAAO,SAAS;AAC5D,cAAM,cAAc,aAAa,OAAO,KAAK,KAAK;AAClD,YAAI,aAAa;AACf,gBAAM,KAAK,WAAW;AAAA,YACpB;AAAA,cACE,MAAM;AAAA,cACN,OAAO;AAAA,cACP,GAAG,uBAAuB,eAAe,OAAO;AAAA,YAClD;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAqB;AACvB;","names":[]}