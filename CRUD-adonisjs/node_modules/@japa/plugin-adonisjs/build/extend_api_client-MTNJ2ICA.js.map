{"version":3,"sources":["../src/extend_api_client.ts"],"sourcesContent":["/*\n * @japa/plugin-adonisjs\n *\n * (c) Japa\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport './types/extended.js'\nimport { CookieClient } from '@adonisjs/core/http'\nimport { ApiClient, ApiRequest } from '@japa/api-client'\n\nimport debug from './debug.js'\n\n/**\n * Extending the \"@japa/api-client\" plugin with custom methods to\n * set cookies, session, csrf token and authenticated user.\n */\nexport function extendApiClient(cookieClient: CookieClient) {\n  debug('extending @japa/api-client with adonisjs specific methods')\n\n  /**\n   * Serializer for parsing response cookies\n   */\n  ApiClient.cookiesSerializer({\n    /**\n     * The methods on the Request class encrypts and signs cookies.\n     * Therefore, the prepare method returns the value as it is\n     */\n    prepare(_: string, value: any) {\n      return value\n    },\n\n    /**\n     * Process the server response and convert cookie value to a\n     * plain string\n     */\n    process(key: string, value: any) {\n      if (!value) {\n        return value\n      }\n      return cookieClient.parse(key, value)\n    },\n  })\n\n  /**\n   * Send a signed cookie during the API request\n   */\n  ApiRequest.macro('withCookie', function (this: ApiRequest, key: string, value: any) {\n    const signedValue = cookieClient.sign(key, value)\n    if (signedValue) {\n      this.cookiesJar[key] = { name: key, value: signedValue }\n    }\n\n    return this\n  })\n  ApiRequest.macro('cookie', function (this: ApiRequest, key: string, value: any) {\n    return this.withCookie(key, value)\n  })\n\n  /**\n   * Send an encrypted cookie during the API request\n   */\n  ApiRequest.macro('withEncryptedCookie', function (this: ApiRequest, key: string, value: any) {\n    const encryptedValue = cookieClient.encrypt(key, value)\n    if (encryptedValue) {\n      this.cookiesJar[key] = { name: key, value: encryptedValue }\n    }\n\n    return this\n  })\n\n  ApiRequest.macro('encryptedCookie', function (this: ApiRequest, key: string, value: any) {\n    return this.withEncryptedCookie(key, value)\n  })\n\n  /**\n   * Send an encrypted cookie during the API request\n   */\n  ApiRequest.macro('withPlainCookie', function (this: ApiRequest, key: string, value: any) {\n    const plainValue = cookieClient.encode(key, value)\n    if (plainValue) {\n      this.cookiesJar[key] = { name: key, value: plainValue }\n    }\n\n    return this\n  })\n\n  ApiRequest.macro('plainCookie', function (this: ApiRequest, key: string, value: any) {\n    return this.withPlainCookie(key, value)\n  })\n}\n"],"mappings":";;;;;AAWA,SAAS,WAAW,kBAAkB;AAQ/B,SAAS,gBAAgB,cAA4B;AAC1D,gBAAM,2DAA2D;AAKjE,YAAU,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,IAK1B,QAAQ,GAAW,OAAY;AAC7B,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,QAAQ,KAAa,OAAY;AAC/B,UAAI,CAAC,OAAO;AACV,eAAO;AAAA,MACT;AACA,aAAO,aAAa,MAAM,KAAK,KAAK;AAAA,IACtC;AAAA,EACF,CAAC;AAKD,aAAW,MAAM,cAAc,SAA4B,KAAa,OAAY;AAClF,UAAM,cAAc,aAAa,KAAK,KAAK,KAAK;AAChD,QAAI,aAAa;AACf,WAAK,WAAW,GAAG,IAAI,EAAE,MAAM,KAAK,OAAO,YAAY;AAAA,IACzD;AAEA,WAAO;AAAA,EACT,CAAC;AACD,aAAW,MAAM,UAAU,SAA4B,KAAa,OAAY;AAC9E,WAAO,KAAK,WAAW,KAAK,KAAK;AAAA,EACnC,CAAC;AAKD,aAAW,MAAM,uBAAuB,SAA4B,KAAa,OAAY;AAC3F,UAAM,iBAAiB,aAAa,QAAQ,KAAK,KAAK;AACtD,QAAI,gBAAgB;AAClB,WAAK,WAAW,GAAG,IAAI,EAAE,MAAM,KAAK,OAAO,eAAe;AAAA,IAC5D;AAEA,WAAO;AAAA,EACT,CAAC;AAED,aAAW,MAAM,mBAAmB,SAA4B,KAAa,OAAY;AACvF,WAAO,KAAK,oBAAoB,KAAK,KAAK;AAAA,EAC5C,CAAC;AAKD,aAAW,MAAM,mBAAmB,SAA4B,KAAa,OAAY;AACvF,UAAM,aAAa,aAAa,OAAO,KAAK,KAAK;AACjD,QAAI,YAAY;AACd,WAAK,WAAW,GAAG,IAAI,EAAE,MAAM,KAAK,OAAO,WAAW;AAAA,IACxD;AAEA,WAAO;AAAA,EACT,CAAC;AAED,aAAW,MAAM,eAAe,SAA4B,KAAa,OAAY;AACnF,WAAO,KAAK,gBAAgB,KAAK,KAAK;AAAA,EACxC,CAAC;AACH;","names":[]}